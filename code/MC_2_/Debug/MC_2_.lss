
MC_2_.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000034ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000034ba  0000354e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800068  00800068  00003556  2**0
                  ALLOC
  3 .stab         00002f7c  00000000  00000000  00003558  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001168  00000000  00000000  000064d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000763c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000777c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000078ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009535  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a420  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b1d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b330  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b5bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bd8b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 36 12 	jmp	0x246c	; 0x246c <__vector_10>
      2c:	0c 94 03 12 	jmp	0x2406	; 0x2406 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ab 36       	cpi	r26, 0x6B	; 107
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ea eb       	ldi	r30, 0xBA	; 186
      78:	f4 e3       	ldi	r31, 0x34	; 52
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 09 0c 	call	0x1812	; 0x1812 <main>
      8a:	0c 94 5b 1a 	jmp	0x34b6	; 0x34b6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 df 19 	jmp	0x33be	; 0x33be <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 eb 19 	jmp	0x33d6	; 0x33d6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 07 1a 	jmp	0x340e	; 0x340e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 eb 19 	jmp	0x33d6	; 0x33d6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 07 1a 	jmp	0x340e	; 0x340e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 df 19 	jmp	0x33be	; 0x33be <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 eb 19 	jmp	0x33d6	; 0x33d6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 07 1a 	jmp	0x340e	; 0x340e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 eb 19 	jmp	0x33d6	; 0x33d6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 07 1a 	jmp	0x340e	; 0x340e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 eb 19 	jmp	0x33d6	; 0x33d6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 07 1a 	jmp	0x340e	; 0x340e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ef 19 	jmp	0x33de	; 0x33de <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 0b 1a 	jmp	0x3416	; 0x3416 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <APP_Timer>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void APP_Timer(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	tick++;
     b4e:	80 91 68 00 	lds	r24, 0x0068
     b52:	8f 5f       	subi	r24, 0xFF	; 255
     b54:	80 93 68 00 	sts	0x0068, r24
	if(tick == 60)
     b58:	80 91 68 00 	lds	r24, 0x0068
     b5c:	8c 33       	cpi	r24, 0x3C	; 60
     b5e:	79 f4       	brne	.+30     	; 0xb7e <APP_Timer+0x38>
	{

		PORTC &= (~(1<<PC2));
     b60:	a5 e3       	ldi	r26, 0x35	; 53
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	e5 e3       	ldi	r30, 0x35	; 53
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	80 81       	ld	r24, Z
     b6a:	8b 7f       	andi	r24, 0xFB	; 251
     b6c:	8c 93       	st	X, r24
		PORTC &= (~(1<<PC3));
     b6e:	a5 e3       	ldi	r26, 0x35	; 53
     b70:	b0 e0       	ldi	r27, 0x00	; 0
     b72:	e5 e3       	ldi	r30, 0x35	; 53
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	80 81       	ld	r24, Z
     b78:	87 7f       	andi	r24, 0xF7	; 247
     b7a:	8c 93       	st	X, r24
     b7c:	28 c0       	rjmp	.+80     	; 0xbce <APP_Timer+0x88>

	}
	else if(tick == 62)
     b7e:	80 91 68 00 	lds	r24, 0x0068
     b82:	8e 33       	cpi	r24, 0x3E	; 62
     b84:	79 f4       	brne	.+30     	; 0xba4 <APP_Timer+0x5e>
	{
		PORTC &= (~(1<<PC2));
     b86:	a5 e3       	ldi	r26, 0x35	; 53
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e5 e3       	ldi	r30, 0x35	; 53
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	8b 7f       	andi	r24, 0xFB	; 251
     b92:	8c 93       	st	X, r24
		PORTC |= (1<<PC3);
     b94:	a5 e3       	ldi	r26, 0x35	; 53
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e5 e3       	ldi	r30, 0x35	; 53
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	88 60       	ori	r24, 0x08	; 8
     ba0:	8c 93       	st	X, r24
     ba2:	15 c0       	rjmp	.+42     	; 0xbce <APP_Timer+0x88>

	}
	else if(tick == 122)
     ba4:	80 91 68 00 	lds	r24, 0x0068
     ba8:	8a 37       	cpi	r24, 0x7A	; 122
     baa:	89 f4       	brne	.+34     	; 0xbce <APP_Timer+0x88>
	{
		PORTC &= (~(1<<PC2));
     bac:	a5 e3       	ldi	r26, 0x35	; 53
     bae:	b0 e0       	ldi	r27, 0x00	; 0
     bb0:	e5 e3       	ldi	r30, 0x35	; 53
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	80 81       	ld	r24, Z
     bb6:	8b 7f       	andi	r24, 0xFB	; 251
     bb8:	8c 93       	st	X, r24
		PORTC &= (~(1<<PC3));
     bba:	a5 e3       	ldi	r26, 0x35	; 53
     bbc:	b0 e0       	ldi	r27, 0x00	; 0
     bbe:	e5 e3       	ldi	r30, 0x35	; 53
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	87 7f       	andi	r24, 0xF7	; 247
     bc6:	8c 93       	st	X, r24
		TCCR0 = 0;
     bc8:	e3 e5       	ldi	r30, 0x53	; 83
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	10 82       	st	Z, r1

	}

}
     bce:	cf 91       	pop	r28
     bd0:	df 91       	pop	r29
     bd2:	08 95       	ret

00000bd4 <Receive_Password>:

void  Receive_Password( uint8 *password )
{
     bd4:	0f 93       	push	r16
     bd6:	1f 93       	push	r17
     bd8:	df 93       	push	r29
     bda:	cf 93       	push	r28
     bdc:	00 d0       	rcall	.+0      	; 0xbde <Receive_Password+0xa>
     bde:	0f 92       	push	r0
     be0:	cd b7       	in	r28, 0x3d	; 61
     be2:	de b7       	in	r29, 0x3e	; 62
     be4:	9b 83       	std	Y+3, r25	; 0x03
     be6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i; /* increment value of for loops */

	for(i=0;i<5;i++)
     be8:	19 82       	std	Y+1, r1	; 0x01
     bea:	33 c0       	rjmp	.+102    	; 0xc52 <Receive_Password+0x7e>
	{

		*(password + i) = UART_recieveByte(); /* receive the pressed key from uart */
     bec:	89 81       	ldd	r24, Y+1	; 0x01
     bee:	28 2f       	mov	r18, r24
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	8a 81       	ldd	r24, Y+2	; 0x02
     bf4:	9b 81       	ldd	r25, Y+3	; 0x03
     bf6:	8c 01       	movw	r16, r24
     bf8:	02 0f       	add	r16, r18
     bfa:	13 1f       	adc	r17, r19
     bfc:	0e 94 64 19 	call	0x32c8	; 0x32c8 <UART_recieveByte>
     c00:	f8 01       	movw	r30, r16
     c02:	80 83       	st	Z, r24

		if( ( *(password + i)  >= 0) && ( *(password + i) <= 9) )
     c04:	89 81       	ldd	r24, Y+1	; 0x01
     c06:	28 2f       	mov	r18, r24
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	8a 81       	ldd	r24, Y+2	; 0x02
     c0c:	9b 81       	ldd	r25, Y+3	; 0x03
     c0e:	fc 01       	movw	r30, r24
     c10:	e2 0f       	add	r30, r18
     c12:	f3 1f       	adc	r31, r19
     c14:	80 81       	ld	r24, Z
     c16:	8a 30       	cpi	r24, 0x0A	; 10
     c18:	70 f4       	brcc	.+28     	; 0xc36 <Receive_Password+0x62>
		{
			LCD_intgerToString( *(password + i) ); /* display the pressed keypad switch */
     c1a:	89 81       	ldd	r24, Y+1	; 0x01
     c1c:	28 2f       	mov	r18, r24
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	8a 81       	ldd	r24, Y+2	; 0x02
     c22:	9b 81       	ldd	r25, Y+3	; 0x03
     c24:	fc 01       	movw	r30, r24
     c26:	e2 0f       	add	r30, r18
     c28:	f3 1f       	adc	r31, r19
     c2a:	80 81       	ld	r24, Z
     c2c:	88 2f       	mov	r24, r24
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	0e 94 a4 18 	call	0x3148	; 0x3148 <LCD_intgerToString>
     c34:	0b c0       	rjmp	.+22     	; 0xc4c <Receive_Password+0x78>
		}
		else
		{
			LCD_displayCharacter( *(password + i)  ); /* display the pressed keypad switch */
     c36:	89 81       	ldd	r24, Y+1	; 0x01
     c38:	28 2f       	mov	r18, r24
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	8a 81       	ldd	r24, Y+2	; 0x02
     c3e:	9b 81       	ldd	r25, Y+3	; 0x03
     c40:	fc 01       	movw	r30, r24
     c42:	e2 0f       	add	r30, r18
     c44:	f3 1f       	adc	r31, r19
     c46:	80 81       	ld	r24, Z
     c48:	0e 94 24 16 	call	0x2c48	; 0x2c48 <LCD_displayCharacter>

void  Receive_Password( uint8 *password )
{
	uint8 i; /* increment value of for loops */

	for(i=0;i<5;i++)
     c4c:	89 81       	ldd	r24, Y+1	; 0x01
     c4e:	8f 5f       	subi	r24, 0xFF	; 255
     c50:	89 83       	std	Y+1, r24	; 0x01
     c52:	89 81       	ldd	r24, Y+1	; 0x01
     c54:	85 30       	cpi	r24, 0x05	; 5
     c56:	50 f2       	brcs	.-108    	; 0xbec <Receive_Password+0x18>
			LCD_displayCharacter( *(password + i)  ); /* display the pressed keypad switch */
		}
	}


}
     c58:	0f 90       	pop	r0
     c5a:	0f 90       	pop	r0
     c5c:	0f 90       	pop	r0
     c5e:	cf 91       	pop	r28
     c60:	df 91       	pop	r29
     c62:	1f 91       	pop	r17
     c64:	0f 91       	pop	r16
     c66:	08 95       	ret

00000c68 <Write_Password>:

void  Write_Password( uint8 *enter_password )/*func. to write in the external EEPROM  */
{
     c68:	0f 93       	push	r16
     c6a:	1f 93       	push	r17
     c6c:	df 93       	push	r29
     c6e:	cf 93       	push	r28
     c70:	cd b7       	in	r28, 0x3d	; 61
     c72:	de b7       	in	r29, 0x3e	; 62
     c74:	cb 54       	subi	r28, 0x4B	; 75
     c76:	d0 40       	sbci	r29, 0x00	; 0
     c78:	0f b6       	in	r0, 0x3f	; 63
     c7a:	f8 94       	cli
     c7c:	de bf       	out	0x3e, r29	; 62
     c7e:	0f be       	out	0x3f, r0	; 63
     c80:	cd bf       	out	0x3d, r28	; 61
     c82:	fe 01       	movw	r30, r28
     c84:	e6 5b       	subi	r30, 0xB6	; 182
     c86:	ff 4f       	sbci	r31, 0xFF	; 255
     c88:	91 83       	std	Z+1, r25	; 0x01
     c8a:	80 83       	st	Z, r24
	uint8 i; /* increment value of for loops */
	int address= 0x0311; /* the 1st address of EEPROM */
     c8c:	fe 01       	movw	r30, r28
     c8e:	e9 5b       	subi	r30, 0xB9	; 185
     c90:	ff 4f       	sbci	r31, 0xFF	; 255
     c92:	81 e1       	ldi	r24, 0x11	; 17
     c94:	93 e0       	ldi	r25, 0x03	; 3
     c96:	91 83       	std	Z+1, r25	; 0x01
     c98:	80 83       	st	Z, r24
     c9a:	fe 01       	movw	r30, r28
     c9c:	ed 5b       	subi	r30, 0xBD	; 189
     c9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ca0:	80 e0       	ldi	r24, 0x00	; 0
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	aa ef       	ldi	r26, 0xFA	; 250
     ca6:	b3 e4       	ldi	r27, 0x43	; 67
     ca8:	80 83       	st	Z, r24
     caa:	91 83       	std	Z+1, r25	; 0x01
     cac:	a2 83       	std	Z+2, r26	; 0x02
     cae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cb0:	8e 01       	movw	r16, r28
     cb2:	01 5c       	subi	r16, 0xC1	; 193
     cb4:	1f 4f       	sbci	r17, 0xFF	; 255
     cb6:	fe 01       	movw	r30, r28
     cb8:	ed 5b       	subi	r30, 0xBD	; 189
     cba:	ff 4f       	sbci	r31, 0xFF	; 255
     cbc:	60 81       	ld	r22, Z
     cbe:	71 81       	ldd	r23, Z+1	; 0x01
     cc0:	82 81       	ldd	r24, Z+2	; 0x02
     cc2:	93 81       	ldd	r25, Z+3	; 0x03
     cc4:	20 e0       	ldi	r18, 0x00	; 0
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	4a ef       	ldi	r20, 0xFA	; 250
     cca:	54 e4       	ldi	r21, 0x44	; 68
     ccc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cd0:	dc 01       	movw	r26, r24
     cd2:	cb 01       	movw	r24, r22
     cd4:	f8 01       	movw	r30, r16
     cd6:	80 83       	st	Z, r24
     cd8:	91 83       	std	Z+1, r25	; 0x01
     cda:	a2 83       	std	Z+2, r26	; 0x02
     cdc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     cde:	fe 01       	movw	r30, r28
     ce0:	ff 96       	adiw	r30, 0x3f	; 63
     ce2:	60 81       	ld	r22, Z
     ce4:	71 81       	ldd	r23, Z+1	; 0x01
     ce6:	82 81       	ldd	r24, Z+2	; 0x02
     ce8:	93 81       	ldd	r25, Z+3	; 0x03
     cea:	20 e0       	ldi	r18, 0x00	; 0
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	40 e8       	ldi	r20, 0x80	; 128
     cf0:	5f e3       	ldi	r21, 0x3F	; 63
     cf2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cf6:	88 23       	and	r24, r24
     cf8:	2c f4       	brge	.+10     	; 0xd04 <Write_Password+0x9c>
		__ticks = 1;
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	9e af       	std	Y+62, r25	; 0x3e
     d00:	8d af       	std	Y+61, r24	; 0x3d
     d02:	46 c0       	rjmp	.+140    	; 0xd90 <Write_Password+0x128>
	else if (__tmp > 65535)
     d04:	fe 01       	movw	r30, r28
     d06:	ff 96       	adiw	r30, 0x3f	; 63
     d08:	60 81       	ld	r22, Z
     d0a:	71 81       	ldd	r23, Z+1	; 0x01
     d0c:	82 81       	ldd	r24, Z+2	; 0x02
     d0e:	93 81       	ldd	r25, Z+3	; 0x03
     d10:	20 e0       	ldi	r18, 0x00	; 0
     d12:	3f ef       	ldi	r19, 0xFF	; 255
     d14:	4f e7       	ldi	r20, 0x7F	; 127
     d16:	57 e4       	ldi	r21, 0x47	; 71
     d18:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d1c:	18 16       	cp	r1, r24
     d1e:	64 f5       	brge	.+88     	; 0xd78 <Write_Password+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d20:	fe 01       	movw	r30, r28
     d22:	ed 5b       	subi	r30, 0xBD	; 189
     d24:	ff 4f       	sbci	r31, 0xFF	; 255
     d26:	60 81       	ld	r22, Z
     d28:	71 81       	ldd	r23, Z+1	; 0x01
     d2a:	82 81       	ldd	r24, Z+2	; 0x02
     d2c:	93 81       	ldd	r25, Z+3	; 0x03
     d2e:	20 e0       	ldi	r18, 0x00	; 0
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	40 e2       	ldi	r20, 0x20	; 32
     d34:	51 e4       	ldi	r21, 0x41	; 65
     d36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d3a:	dc 01       	movw	r26, r24
     d3c:	cb 01       	movw	r24, r22
     d3e:	bc 01       	movw	r22, r24
     d40:	cd 01       	movw	r24, r26
     d42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d46:	dc 01       	movw	r26, r24
     d48:	cb 01       	movw	r24, r22
     d4a:	9e af       	std	Y+62, r25	; 0x3e
     d4c:	8d af       	std	Y+61, r24	; 0x3d
     d4e:	0f c0       	rjmp	.+30     	; 0xd6e <Write_Password+0x106>
     d50:	88 ec       	ldi	r24, 0xC8	; 200
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	9c af       	std	Y+60, r25	; 0x3c
     d56:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d58:	8b ad       	ldd	r24, Y+59	; 0x3b
     d5a:	9c ad       	ldd	r25, Y+60	; 0x3c
     d5c:	01 97       	sbiw	r24, 0x01	; 1
     d5e:	f1 f7       	brne	.-4      	; 0xd5c <Write_Password+0xf4>
     d60:	9c af       	std	Y+60, r25	; 0x3c
     d62:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d64:	8d ad       	ldd	r24, Y+61	; 0x3d
     d66:	9e ad       	ldd	r25, Y+62	; 0x3e
     d68:	01 97       	sbiw	r24, 0x01	; 1
     d6a:	9e af       	std	Y+62, r25	; 0x3e
     d6c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d6e:	8d ad       	ldd	r24, Y+61	; 0x3d
     d70:	9e ad       	ldd	r25, Y+62	; 0x3e
     d72:	00 97       	sbiw	r24, 0x00	; 0
     d74:	69 f7       	brne	.-38     	; 0xd50 <Write_Password+0xe8>
     d76:	16 c0       	rjmp	.+44     	; 0xda4 <Write_Password+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d78:	fe 01       	movw	r30, r28
     d7a:	ff 96       	adiw	r30, 0x3f	; 63
     d7c:	60 81       	ld	r22, Z
     d7e:	71 81       	ldd	r23, Z+1	; 0x01
     d80:	82 81       	ldd	r24, Z+2	; 0x02
     d82:	93 81       	ldd	r25, Z+3	; 0x03
     d84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d88:	dc 01       	movw	r26, r24
     d8a:	cb 01       	movw	r24, r22
     d8c:	9e af       	std	Y+62, r25	; 0x3e
     d8e:	8d af       	std	Y+61, r24	; 0x3d
     d90:	8d ad       	ldd	r24, Y+61	; 0x3d
     d92:	9e ad       	ldd	r25, Y+62	; 0x3e
     d94:	9a af       	std	Y+58, r25	; 0x3a
     d96:	89 af       	std	Y+57, r24	; 0x39
     d98:	89 ad       	ldd	r24, Y+57	; 0x39
     d9a:	9a ad       	ldd	r25, Y+58	; 0x3a
     d9c:	01 97       	sbiw	r24, 0x01	; 1
     d9e:	f1 f7       	brne	.-4      	; 0xd9c <Write_Password+0x134>
     da0:	9a af       	std	Y+58, r25	; 0x3a
     da2:	89 af       	std	Y+57, r24	; 0x39


	 _delay_ms(500);
	    	 LCD_goToRowColumn(1,0);/*[start] to make sure from results of func.>> Receive_Password( &password ) */
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	60 e0       	ldi	r22, 0x00	; 0
     da8:	0e 94 49 18 	call	0x3092	; 0x3092 <LCD_goToRowColumn>
			for(i=0;i<5;i++)
     dac:	fe 01       	movw	r30, r28
     dae:	e7 5b       	subi	r30, 0xB7	; 183
     db0:	ff 4f       	sbci	r31, 0xFF	; 255
     db2:	10 82       	st	Z, r1
     db4:	8e c0       	rjmp	.+284    	; 0xed2 <Write_Password+0x26a>
				{

				LCD_intgerToString( *(enter_password + i) ); /*to show me value on LCD */
     db6:	fe 01       	movw	r30, r28
     db8:	e7 5b       	subi	r30, 0xB7	; 183
     dba:	ff 4f       	sbci	r31, 0xFF	; 255
     dbc:	80 81       	ld	r24, Z
     dbe:	28 2f       	mov	r18, r24
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	fe 01       	movw	r30, r28
     dc4:	e6 5b       	subi	r30, 0xB6	; 182
     dc6:	ff 4f       	sbci	r31, 0xFF	; 255
     dc8:	80 81       	ld	r24, Z
     dca:	91 81       	ldd	r25, Z+1	; 0x01
     dcc:	fc 01       	movw	r30, r24
     dce:	e2 0f       	add	r30, r18
     dd0:	f3 1f       	adc	r31, r19
     dd2:	80 81       	ld	r24, Z
     dd4:	88 2f       	mov	r24, r24
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	0e 94 a4 18 	call	0x3148	; 0x3148 <LCD_intgerToString>
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	a8 e4       	ldi	r26, 0x48	; 72
     de2:	b3 e4       	ldi	r27, 0x43	; 67
     de4:	8d ab       	std	Y+53, r24	; 0x35
     de6:	9e ab       	std	Y+54, r25	; 0x36
     de8:	af ab       	std	Y+55, r26	; 0x37
     dea:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dec:	6d a9       	ldd	r22, Y+53	; 0x35
     dee:	7e a9       	ldd	r23, Y+54	; 0x36
     df0:	8f a9       	ldd	r24, Y+55	; 0x37
     df2:	98 ad       	ldd	r25, Y+56	; 0x38
     df4:	20 e0       	ldi	r18, 0x00	; 0
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	4a ef       	ldi	r20, 0xFA	; 250
     dfa:	54 e4       	ldi	r21, 0x44	; 68
     dfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e00:	dc 01       	movw	r26, r24
     e02:	cb 01       	movw	r24, r22
     e04:	89 ab       	std	Y+49, r24	; 0x31
     e06:	9a ab       	std	Y+50, r25	; 0x32
     e08:	ab ab       	std	Y+51, r26	; 0x33
     e0a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     e0c:	69 a9       	ldd	r22, Y+49	; 0x31
     e0e:	7a a9       	ldd	r23, Y+50	; 0x32
     e10:	8b a9       	ldd	r24, Y+51	; 0x33
     e12:	9c a9       	ldd	r25, Y+52	; 0x34
     e14:	20 e0       	ldi	r18, 0x00	; 0
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	40 e8       	ldi	r20, 0x80	; 128
     e1a:	5f e3       	ldi	r21, 0x3F	; 63
     e1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e20:	88 23       	and	r24, r24
     e22:	2c f4       	brge	.+10     	; 0xe2e <Write_Password+0x1c6>
		__ticks = 1;
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	98 ab       	std	Y+48, r25	; 0x30
     e2a:	8f a7       	std	Y+47, r24	; 0x2f
     e2c:	3f c0       	rjmp	.+126    	; 0xeac <Write_Password+0x244>
	else if (__tmp > 65535)
     e2e:	69 a9       	ldd	r22, Y+49	; 0x31
     e30:	7a a9       	ldd	r23, Y+50	; 0x32
     e32:	8b a9       	ldd	r24, Y+51	; 0x33
     e34:	9c a9       	ldd	r25, Y+52	; 0x34
     e36:	20 e0       	ldi	r18, 0x00	; 0
     e38:	3f ef       	ldi	r19, 0xFF	; 255
     e3a:	4f e7       	ldi	r20, 0x7F	; 127
     e3c:	57 e4       	ldi	r21, 0x47	; 71
     e3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e42:	18 16       	cp	r1, r24
     e44:	4c f5       	brge	.+82     	; 0xe98 <Write_Password+0x230>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e46:	6d a9       	ldd	r22, Y+53	; 0x35
     e48:	7e a9       	ldd	r23, Y+54	; 0x36
     e4a:	8f a9       	ldd	r24, Y+55	; 0x37
     e4c:	98 ad       	ldd	r25, Y+56	; 0x38
     e4e:	20 e0       	ldi	r18, 0x00	; 0
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	40 e2       	ldi	r20, 0x20	; 32
     e54:	51 e4       	ldi	r21, 0x41	; 65
     e56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e5a:	dc 01       	movw	r26, r24
     e5c:	cb 01       	movw	r24, r22
     e5e:	bc 01       	movw	r22, r24
     e60:	cd 01       	movw	r24, r26
     e62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e66:	dc 01       	movw	r26, r24
     e68:	cb 01       	movw	r24, r22
     e6a:	98 ab       	std	Y+48, r25	; 0x30
     e6c:	8f a7       	std	Y+47, r24	; 0x2f
     e6e:	0f c0       	rjmp	.+30     	; 0xe8e <Write_Password+0x226>
     e70:	88 ec       	ldi	r24, 0xC8	; 200
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	9e a7       	std	Y+46, r25	; 0x2e
     e76:	8d a7       	std	Y+45, r24	; 0x2d
     e78:	8d a5       	ldd	r24, Y+45	; 0x2d
     e7a:	9e a5       	ldd	r25, Y+46	; 0x2e
     e7c:	01 97       	sbiw	r24, 0x01	; 1
     e7e:	f1 f7       	brne	.-4      	; 0xe7c <Write_Password+0x214>
     e80:	9e a7       	std	Y+46, r25	; 0x2e
     e82:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e84:	8f a5       	ldd	r24, Y+47	; 0x2f
     e86:	98 a9       	ldd	r25, Y+48	; 0x30
     e88:	01 97       	sbiw	r24, 0x01	; 1
     e8a:	98 ab       	std	Y+48, r25	; 0x30
     e8c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e8e:	8f a5       	ldd	r24, Y+47	; 0x2f
     e90:	98 a9       	ldd	r25, Y+48	; 0x30
     e92:	00 97       	sbiw	r24, 0x00	; 0
     e94:	69 f7       	brne	.-38     	; 0xe70 <Write_Password+0x208>
     e96:	14 c0       	rjmp	.+40     	; 0xec0 <Write_Password+0x258>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e98:	69 a9       	ldd	r22, Y+49	; 0x31
     e9a:	7a a9       	ldd	r23, Y+50	; 0x32
     e9c:	8b a9       	ldd	r24, Y+51	; 0x33
     e9e:	9c a9       	ldd	r25, Y+52	; 0x34
     ea0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ea4:	dc 01       	movw	r26, r24
     ea6:	cb 01       	movw	r24, r22
     ea8:	98 ab       	std	Y+48, r25	; 0x30
     eaa:	8f a7       	std	Y+47, r24	; 0x2f
     eac:	8f a5       	ldd	r24, Y+47	; 0x2f
     eae:	98 a9       	ldd	r25, Y+48	; 0x30
     eb0:	9c a7       	std	Y+44, r25	; 0x2c
     eb2:	8b a7       	std	Y+43, r24	; 0x2b
     eb4:	8b a5       	ldd	r24, Y+43	; 0x2b
     eb6:	9c a5       	ldd	r25, Y+44	; 0x2c
     eb8:	01 97       	sbiw	r24, 0x01	; 1
     eba:	f1 f7       	brne	.-4      	; 0xeb8 <Write_Password+0x250>
     ebc:	9c a7       	std	Y+44, r25	; 0x2c
     ebe:	8b a7       	std	Y+43, r24	; 0x2b
	int address= 0x0311; /* the 1st address of EEPROM */


	 _delay_ms(500);
	    	 LCD_goToRowColumn(1,0);/*[start] to make sure from results of func.>> Receive_Password( &password ) */
			for(i=0;i<5;i++)
     ec0:	de 01       	movw	r26, r28
     ec2:	a7 5b       	subi	r26, 0xB7	; 183
     ec4:	bf 4f       	sbci	r27, 0xFF	; 255
     ec6:	fe 01       	movw	r30, r28
     ec8:	e7 5b       	subi	r30, 0xB7	; 183
     eca:	ff 4f       	sbci	r31, 0xFF	; 255
     ecc:	80 81       	ld	r24, Z
     ece:	8f 5f       	subi	r24, 0xFF	; 255
     ed0:	8c 93       	st	X, r24
     ed2:	fe 01       	movw	r30, r28
     ed4:	e7 5b       	subi	r30, 0xB7	; 183
     ed6:	ff 4f       	sbci	r31, 0xFF	; 255
     ed8:	80 81       	ld	r24, Z
     eda:	85 30       	cpi	r24, 0x05	; 5
     edc:	08 f4       	brcc	.+2      	; 0xee0 <Write_Password+0x278>
     ede:	6b cf       	rjmp	.-298    	; 0xdb6 <Write_Password+0x14e>
				LCD_intgerToString( *(enter_password + i) ); /*to show me value on LCD */

		    	_delay_ms(200);
				}/*[end] */

			for(i=0;i<5;i++) /* for loop to  write in the external EEPROM  */
     ee0:	fe 01       	movw	r30, r28
     ee2:	e7 5b       	subi	r30, 0xB7	; 183
     ee4:	ff 4f       	sbci	r31, 0xFF	; 255
     ee6:	10 82       	st	Z, r1
     ee8:	9e c0       	rjmp	.+316    	; 0x1026 <Write_Password+0x3be>
				{
				EEPROM_writeByte(address,*(enter_password + i)); /* Write password[i] (1st enter password) in the external EEPROM */
     eea:	fe 01       	movw	r30, r28
     eec:	e9 5b       	subi	r30, 0xB9	; 185
     eee:	ff 4f       	sbci	r31, 0xFF	; 255
     ef0:	40 81       	ld	r20, Z
     ef2:	51 81       	ldd	r21, Z+1	; 0x01
     ef4:	fe 01       	movw	r30, r28
     ef6:	e7 5b       	subi	r30, 0xB7	; 183
     ef8:	ff 4f       	sbci	r31, 0xFF	; 255
     efa:	80 81       	ld	r24, Z
     efc:	28 2f       	mov	r18, r24
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	fe 01       	movw	r30, r28
     f02:	e6 5b       	subi	r30, 0xB6	; 182
     f04:	ff 4f       	sbci	r31, 0xFF	; 255
     f06:	80 81       	ld	r24, Z
     f08:	91 81       	ldd	r25, Z+1	; 0x01
     f0a:	fc 01       	movw	r30, r24
     f0c:	e2 0f       	add	r30, r18
     f0e:	f3 1f       	adc	r31, r19
     f10:	20 81       	ld	r18, Z
     f12:	ca 01       	movw	r24, r20
     f14:	62 2f       	mov	r22, r18
     f16:	0e 94 ef 12 	call	0x25de	; 0x25de <EEPROM_writeByte>
			    address++;
     f1a:	de 01       	movw	r26, r28
     f1c:	a9 5b       	subi	r26, 0xB9	; 185
     f1e:	bf 4f       	sbci	r27, 0xFF	; 255
     f20:	fe 01       	movw	r30, r28
     f22:	e9 5b       	subi	r30, 0xB9	; 185
     f24:	ff 4f       	sbci	r31, 0xFF	; 255
     f26:	80 81       	ld	r24, Z
     f28:	91 81       	ldd	r25, Z+1	; 0x01
     f2a:	01 96       	adiw	r24, 0x01	; 1
     f2c:	8d 93       	st	X+, r24
     f2e:	9c 93       	st	X, r25
     f30:	80 e0       	ldi	r24, 0x00	; 0
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	a8 ec       	ldi	r26, 0xC8	; 200
     f36:	b2 e4       	ldi	r27, 0x42	; 66
     f38:	8f a3       	std	Y+39, r24	; 0x27
     f3a:	98 a7       	std	Y+40, r25	; 0x28
     f3c:	a9 a7       	std	Y+41, r26	; 0x29
     f3e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f40:	6f a1       	ldd	r22, Y+39	; 0x27
     f42:	78 a5       	ldd	r23, Y+40	; 0x28
     f44:	89 a5       	ldd	r24, Y+41	; 0x29
     f46:	9a a5       	ldd	r25, Y+42	; 0x2a
     f48:	20 e0       	ldi	r18, 0x00	; 0
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	4a ef       	ldi	r20, 0xFA	; 250
     f4e:	54 e4       	ldi	r21, 0x44	; 68
     f50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f54:	dc 01       	movw	r26, r24
     f56:	cb 01       	movw	r24, r22
     f58:	8b a3       	std	Y+35, r24	; 0x23
     f5a:	9c a3       	std	Y+36, r25	; 0x24
     f5c:	ad a3       	std	Y+37, r26	; 0x25
     f5e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     f60:	6b a1       	ldd	r22, Y+35	; 0x23
     f62:	7c a1       	ldd	r23, Y+36	; 0x24
     f64:	8d a1       	ldd	r24, Y+37	; 0x25
     f66:	9e a1       	ldd	r25, Y+38	; 0x26
     f68:	20 e0       	ldi	r18, 0x00	; 0
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	40 e8       	ldi	r20, 0x80	; 128
     f6e:	5f e3       	ldi	r21, 0x3F	; 63
     f70:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f74:	88 23       	and	r24, r24
     f76:	2c f4       	brge	.+10     	; 0xf82 <Write_Password+0x31a>
		__ticks = 1;
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	9a a3       	std	Y+34, r25	; 0x22
     f7e:	89 a3       	std	Y+33, r24	; 0x21
     f80:	3f c0       	rjmp	.+126    	; 0x1000 <Write_Password+0x398>
	else if (__tmp > 65535)
     f82:	6b a1       	ldd	r22, Y+35	; 0x23
     f84:	7c a1       	ldd	r23, Y+36	; 0x24
     f86:	8d a1       	ldd	r24, Y+37	; 0x25
     f88:	9e a1       	ldd	r25, Y+38	; 0x26
     f8a:	20 e0       	ldi	r18, 0x00	; 0
     f8c:	3f ef       	ldi	r19, 0xFF	; 255
     f8e:	4f e7       	ldi	r20, 0x7F	; 127
     f90:	57 e4       	ldi	r21, 0x47	; 71
     f92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f96:	18 16       	cp	r1, r24
     f98:	4c f5       	brge	.+82     	; 0xfec <Write_Password+0x384>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f9a:	6f a1       	ldd	r22, Y+39	; 0x27
     f9c:	78 a5       	ldd	r23, Y+40	; 0x28
     f9e:	89 a5       	ldd	r24, Y+41	; 0x29
     fa0:	9a a5       	ldd	r25, Y+42	; 0x2a
     fa2:	20 e0       	ldi	r18, 0x00	; 0
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	40 e2       	ldi	r20, 0x20	; 32
     fa8:	51 e4       	ldi	r21, 0x41	; 65
     faa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fae:	dc 01       	movw	r26, r24
     fb0:	cb 01       	movw	r24, r22
     fb2:	bc 01       	movw	r22, r24
     fb4:	cd 01       	movw	r24, r26
     fb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fba:	dc 01       	movw	r26, r24
     fbc:	cb 01       	movw	r24, r22
     fbe:	9a a3       	std	Y+34, r25	; 0x22
     fc0:	89 a3       	std	Y+33, r24	; 0x21
     fc2:	0f c0       	rjmp	.+30     	; 0xfe2 <Write_Password+0x37a>
     fc4:	88 ec       	ldi	r24, 0xC8	; 200
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	98 a3       	std	Y+32, r25	; 0x20
     fca:	8f 8f       	std	Y+31, r24	; 0x1f
     fcc:	8f 8d       	ldd	r24, Y+31	; 0x1f
     fce:	98 a1       	ldd	r25, Y+32	; 0x20
     fd0:	01 97       	sbiw	r24, 0x01	; 1
     fd2:	f1 f7       	brne	.-4      	; 0xfd0 <Write_Password+0x368>
     fd4:	98 a3       	std	Y+32, r25	; 0x20
     fd6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fd8:	89 a1       	ldd	r24, Y+33	; 0x21
     fda:	9a a1       	ldd	r25, Y+34	; 0x22
     fdc:	01 97       	sbiw	r24, 0x01	; 1
     fde:	9a a3       	std	Y+34, r25	; 0x22
     fe0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fe2:	89 a1       	ldd	r24, Y+33	; 0x21
     fe4:	9a a1       	ldd	r25, Y+34	; 0x22
     fe6:	00 97       	sbiw	r24, 0x00	; 0
     fe8:	69 f7       	brne	.-38     	; 0xfc4 <Write_Password+0x35c>
     fea:	14 c0       	rjmp	.+40     	; 0x1014 <Write_Password+0x3ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fec:	6b a1       	ldd	r22, Y+35	; 0x23
     fee:	7c a1       	ldd	r23, Y+36	; 0x24
     ff0:	8d a1       	ldd	r24, Y+37	; 0x25
     ff2:	9e a1       	ldd	r25, Y+38	; 0x26
     ff4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ff8:	dc 01       	movw	r26, r24
     ffa:	cb 01       	movw	r24, r22
     ffc:	9a a3       	std	Y+34, r25	; 0x22
     ffe:	89 a3       	std	Y+33, r24	; 0x21
    1000:	89 a1       	ldd	r24, Y+33	; 0x21
    1002:	9a a1       	ldd	r25, Y+34	; 0x22
    1004:	9e 8f       	std	Y+30, r25	; 0x1e
    1006:	8d 8f       	std	Y+29, r24	; 0x1d
    1008:	8d 8d       	ldd	r24, Y+29	; 0x1d
    100a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    100c:	01 97       	sbiw	r24, 0x01	; 1
    100e:	f1 f7       	brne	.-4      	; 0x100c <Write_Password+0x3a4>
    1010:	9e 8f       	std	Y+30, r25	; 0x1e
    1012:	8d 8f       	std	Y+29, r24	; 0x1d
				LCD_intgerToString( *(enter_password + i) ); /*to show me value on LCD */

		    	_delay_ms(200);
				}/*[end] */

			for(i=0;i<5;i++) /* for loop to  write in the external EEPROM  */
    1014:	de 01       	movw	r26, r28
    1016:	a7 5b       	subi	r26, 0xB7	; 183
    1018:	bf 4f       	sbci	r27, 0xFF	; 255
    101a:	fe 01       	movw	r30, r28
    101c:	e7 5b       	subi	r30, 0xB7	; 183
    101e:	ff 4f       	sbci	r31, 0xFF	; 255
    1020:	80 81       	ld	r24, Z
    1022:	8f 5f       	subi	r24, 0xFF	; 255
    1024:	8c 93       	st	X, r24
    1026:	fe 01       	movw	r30, r28
    1028:	e7 5b       	subi	r30, 0xB7	; 183
    102a:	ff 4f       	sbci	r31, 0xFF	; 255
    102c:	80 81       	ld	r24, Z
    102e:	85 30       	cpi	r24, 0x05	; 5
    1030:	08 f4       	brcc	.+2      	; 0x1034 <Write_Password+0x3cc>
    1032:	5b cf       	rjmp	.-330    	; 0xeea <Write_Password+0x282>
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	aa e7       	ldi	r26, 0x7A	; 122
    103a:	b4 e4       	ldi	r27, 0x44	; 68
    103c:	89 8f       	std	Y+25, r24	; 0x19
    103e:	9a 8f       	std	Y+26, r25	; 0x1a
    1040:	ab 8f       	std	Y+27, r26	; 0x1b
    1042:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1044:	69 8d       	ldd	r22, Y+25	; 0x19
    1046:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1048:	8b 8d       	ldd	r24, Y+27	; 0x1b
    104a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    104c:	20 e0       	ldi	r18, 0x00	; 0
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	4a ef       	ldi	r20, 0xFA	; 250
    1052:	54 e4       	ldi	r21, 0x44	; 68
    1054:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1058:	dc 01       	movw	r26, r24
    105a:	cb 01       	movw	r24, r22
    105c:	8d 8b       	std	Y+21, r24	; 0x15
    105e:	9e 8b       	std	Y+22, r25	; 0x16
    1060:	af 8b       	std	Y+23, r26	; 0x17
    1062:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1064:	6d 89       	ldd	r22, Y+21	; 0x15
    1066:	7e 89       	ldd	r23, Y+22	; 0x16
    1068:	8f 89       	ldd	r24, Y+23	; 0x17
    106a:	98 8d       	ldd	r25, Y+24	; 0x18
    106c:	20 e0       	ldi	r18, 0x00	; 0
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	40 e8       	ldi	r20, 0x80	; 128
    1072:	5f e3       	ldi	r21, 0x3F	; 63
    1074:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1078:	88 23       	and	r24, r24
    107a:	2c f4       	brge	.+10     	; 0x1086 <Write_Password+0x41e>
		__ticks = 1;
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	9c 8b       	std	Y+20, r25	; 0x14
    1082:	8b 8b       	std	Y+19, r24	; 0x13
    1084:	3f c0       	rjmp	.+126    	; 0x1104 <Write_Password+0x49c>
	else if (__tmp > 65535)
    1086:	6d 89       	ldd	r22, Y+21	; 0x15
    1088:	7e 89       	ldd	r23, Y+22	; 0x16
    108a:	8f 89       	ldd	r24, Y+23	; 0x17
    108c:	98 8d       	ldd	r25, Y+24	; 0x18
    108e:	20 e0       	ldi	r18, 0x00	; 0
    1090:	3f ef       	ldi	r19, 0xFF	; 255
    1092:	4f e7       	ldi	r20, 0x7F	; 127
    1094:	57 e4       	ldi	r21, 0x47	; 71
    1096:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    109a:	18 16       	cp	r1, r24
    109c:	4c f5       	brge	.+82     	; 0x10f0 <Write_Password+0x488>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    109e:	69 8d       	ldd	r22, Y+25	; 0x19
    10a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10a6:	20 e0       	ldi	r18, 0x00	; 0
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	40 e2       	ldi	r20, 0x20	; 32
    10ac:	51 e4       	ldi	r21, 0x41	; 65
    10ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10b2:	dc 01       	movw	r26, r24
    10b4:	cb 01       	movw	r24, r22
    10b6:	bc 01       	movw	r22, r24
    10b8:	cd 01       	movw	r24, r26
    10ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10be:	dc 01       	movw	r26, r24
    10c0:	cb 01       	movw	r24, r22
    10c2:	9c 8b       	std	Y+20, r25	; 0x14
    10c4:	8b 8b       	std	Y+19, r24	; 0x13
    10c6:	0f c0       	rjmp	.+30     	; 0x10e6 <Write_Password+0x47e>
    10c8:	88 ec       	ldi	r24, 0xC8	; 200
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	9a 8b       	std	Y+18, r25	; 0x12
    10ce:	89 8b       	std	Y+17, r24	; 0x11
    10d0:	89 89       	ldd	r24, Y+17	; 0x11
    10d2:	9a 89       	ldd	r25, Y+18	; 0x12
    10d4:	01 97       	sbiw	r24, 0x01	; 1
    10d6:	f1 f7       	brne	.-4      	; 0x10d4 <Write_Password+0x46c>
    10d8:	9a 8b       	std	Y+18, r25	; 0x12
    10da:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10dc:	8b 89       	ldd	r24, Y+19	; 0x13
    10de:	9c 89       	ldd	r25, Y+20	; 0x14
    10e0:	01 97       	sbiw	r24, 0x01	; 1
    10e2:	9c 8b       	std	Y+20, r25	; 0x14
    10e4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10e6:	8b 89       	ldd	r24, Y+19	; 0x13
    10e8:	9c 89       	ldd	r25, Y+20	; 0x14
    10ea:	00 97       	sbiw	r24, 0x00	; 0
    10ec:	69 f7       	brne	.-38     	; 0x10c8 <Write_Password+0x460>
    10ee:	14 c0       	rjmp	.+40     	; 0x1118 <Write_Password+0x4b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10f0:	6d 89       	ldd	r22, Y+21	; 0x15
    10f2:	7e 89       	ldd	r23, Y+22	; 0x16
    10f4:	8f 89       	ldd	r24, Y+23	; 0x17
    10f6:	98 8d       	ldd	r25, Y+24	; 0x18
    10f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10fc:	dc 01       	movw	r26, r24
    10fe:	cb 01       	movw	r24, r22
    1100:	9c 8b       	std	Y+20, r25	; 0x14
    1102:	8b 8b       	std	Y+19, r24	; 0x13
    1104:	8b 89       	ldd	r24, Y+19	; 0x13
    1106:	9c 89       	ldd	r25, Y+20	; 0x14
    1108:	98 8b       	std	Y+16, r25	; 0x10
    110a:	8f 87       	std	Y+15, r24	; 0x0f
    110c:	8f 85       	ldd	r24, Y+15	; 0x0f
    110e:	98 89       	ldd	r25, Y+16	; 0x10
    1110:	01 97       	sbiw	r24, 0x01	; 1
    1112:	f1 f7       	brne	.-4      	; 0x1110 <Write_Password+0x4a8>
    1114:	98 8b       	std	Y+16, r25	; 0x10
    1116:	8f 87       	std	Y+15, r24	; 0x0f

		    	_delay_ms(100);
				}

	    	 _delay_ms(1000);
	    	   LCD_clearScreen(); /* clear the LCD display and begin from 0 Col, 0 Row */
    1118:	0e 94 c7 18 	call	0x318e	; 0x318e <LCD_clearScreen>
    111c:	80 e0       	ldi	r24, 0x00	; 0
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	a8 e4       	ldi	r26, 0x48	; 72
    1122:	b3 e4       	ldi	r27, 0x43	; 67
    1124:	8b 87       	std	Y+11, r24	; 0x0b
    1126:	9c 87       	std	Y+12, r25	; 0x0c
    1128:	ad 87       	std	Y+13, r26	; 0x0d
    112a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    112c:	6b 85       	ldd	r22, Y+11	; 0x0b
    112e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1130:	8d 85       	ldd	r24, Y+13	; 0x0d
    1132:	9e 85       	ldd	r25, Y+14	; 0x0e
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	4a ef       	ldi	r20, 0xFA	; 250
    113a:	54 e4       	ldi	r21, 0x44	; 68
    113c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1140:	dc 01       	movw	r26, r24
    1142:	cb 01       	movw	r24, r22
    1144:	8f 83       	std	Y+7, r24	; 0x07
    1146:	98 87       	std	Y+8, r25	; 0x08
    1148:	a9 87       	std	Y+9, r26	; 0x09
    114a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    114c:	6f 81       	ldd	r22, Y+7	; 0x07
    114e:	78 85       	ldd	r23, Y+8	; 0x08
    1150:	89 85       	ldd	r24, Y+9	; 0x09
    1152:	9a 85       	ldd	r25, Y+10	; 0x0a
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	40 e8       	ldi	r20, 0x80	; 128
    115a:	5f e3       	ldi	r21, 0x3F	; 63
    115c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1160:	88 23       	and	r24, r24
    1162:	2c f4       	brge	.+10     	; 0x116e <Write_Password+0x506>
		__ticks = 1;
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	9e 83       	std	Y+6, r25	; 0x06
    116a:	8d 83       	std	Y+5, r24	; 0x05
    116c:	3f c0       	rjmp	.+126    	; 0x11ec <Write_Password+0x584>
	else if (__tmp > 65535)
    116e:	6f 81       	ldd	r22, Y+7	; 0x07
    1170:	78 85       	ldd	r23, Y+8	; 0x08
    1172:	89 85       	ldd	r24, Y+9	; 0x09
    1174:	9a 85       	ldd	r25, Y+10	; 0x0a
    1176:	20 e0       	ldi	r18, 0x00	; 0
    1178:	3f ef       	ldi	r19, 0xFF	; 255
    117a:	4f e7       	ldi	r20, 0x7F	; 127
    117c:	57 e4       	ldi	r21, 0x47	; 71
    117e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1182:	18 16       	cp	r1, r24
    1184:	4c f5       	brge	.+82     	; 0x11d8 <Write_Password+0x570>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1186:	6b 85       	ldd	r22, Y+11	; 0x0b
    1188:	7c 85       	ldd	r23, Y+12	; 0x0c
    118a:	8d 85       	ldd	r24, Y+13	; 0x0d
    118c:	9e 85       	ldd	r25, Y+14	; 0x0e
    118e:	20 e0       	ldi	r18, 0x00	; 0
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	40 e2       	ldi	r20, 0x20	; 32
    1194:	51 e4       	ldi	r21, 0x41	; 65
    1196:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    119a:	dc 01       	movw	r26, r24
    119c:	cb 01       	movw	r24, r22
    119e:	bc 01       	movw	r22, r24
    11a0:	cd 01       	movw	r24, r26
    11a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11a6:	dc 01       	movw	r26, r24
    11a8:	cb 01       	movw	r24, r22
    11aa:	9e 83       	std	Y+6, r25	; 0x06
    11ac:	8d 83       	std	Y+5, r24	; 0x05
    11ae:	0f c0       	rjmp	.+30     	; 0x11ce <Write_Password+0x566>
    11b0:	88 ec       	ldi	r24, 0xC8	; 200
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	9c 83       	std	Y+4, r25	; 0x04
    11b6:	8b 83       	std	Y+3, r24	; 0x03
    11b8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ba:	9c 81       	ldd	r25, Y+4	; 0x04
    11bc:	01 97       	sbiw	r24, 0x01	; 1
    11be:	f1 f7       	brne	.-4      	; 0x11bc <Write_Password+0x554>
    11c0:	9c 83       	std	Y+4, r25	; 0x04
    11c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11c4:	8d 81       	ldd	r24, Y+5	; 0x05
    11c6:	9e 81       	ldd	r25, Y+6	; 0x06
    11c8:	01 97       	sbiw	r24, 0x01	; 1
    11ca:	9e 83       	std	Y+6, r25	; 0x06
    11cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ce:	8d 81       	ldd	r24, Y+5	; 0x05
    11d0:	9e 81       	ldd	r25, Y+6	; 0x06
    11d2:	00 97       	sbiw	r24, 0x00	; 0
    11d4:	69 f7       	brne	.-38     	; 0x11b0 <Write_Password+0x548>
    11d6:	14 c0       	rjmp	.+40     	; 0x1200 <Write_Password+0x598>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11d8:	6f 81       	ldd	r22, Y+7	; 0x07
    11da:	78 85       	ldd	r23, Y+8	; 0x08
    11dc:	89 85       	ldd	r24, Y+9	; 0x09
    11de:	9a 85       	ldd	r25, Y+10	; 0x0a
    11e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11e4:	dc 01       	movw	r26, r24
    11e6:	cb 01       	movw	r24, r22
    11e8:	9e 83       	std	Y+6, r25	; 0x06
    11ea:	8d 83       	std	Y+5, r24	; 0x05
    11ec:	8d 81       	ldd	r24, Y+5	; 0x05
    11ee:	9e 81       	ldd	r25, Y+6	; 0x06
    11f0:	9a 83       	std	Y+2, r25	; 0x02
    11f2:	89 83       	std	Y+1, r24	; 0x01
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
    11f6:	9a 81       	ldd	r25, Y+2	; 0x02
    11f8:	01 97       	sbiw	r24, 0x01	; 1
    11fa:	f1 f7       	brne	.-4      	; 0x11f8 <Write_Password+0x590>
    11fc:	9a 83       	std	Y+2, r25	; 0x02
    11fe:	89 83       	std	Y+1, r24	; 0x01
	    	  _delay_ms(200);

}
    1200:	c5 5b       	subi	r28, 0xB5	; 181
    1202:	df 4f       	sbci	r29, 0xFF	; 255
    1204:	0f b6       	in	r0, 0x3f	; 63
    1206:	f8 94       	cli
    1208:	de bf       	out	0x3e, r29	; 62
    120a:	0f be       	out	0x3f, r0	; 63
    120c:	cd bf       	out	0x3d, r28	; 61
    120e:	cf 91       	pop	r28
    1210:	df 91       	pop	r29
    1212:	1f 91       	pop	r17
    1214:	0f 91       	pop	r16
    1216:	08 95       	ret

00001218 <Read_Password>:

void  Read_Password( uint8 *confirm_password, uint8 *enter_password  )/* func. to read from the external EEPROM  */
{
    1218:	0f 93       	push	r16
    121a:	1f 93       	push	r17
    121c:	df 93       	push	r29
    121e:	cf 93       	push	r28
    1220:	cd b7       	in	r28, 0x3d	; 61
    1222:	de b7       	in	r29, 0x3e	; 62
    1224:	cd 54       	subi	r28, 0x4D	; 77
    1226:	d0 40       	sbci	r29, 0x00	; 0
    1228:	0f b6       	in	r0, 0x3f	; 63
    122a:	f8 94       	cli
    122c:	de bf       	out	0x3e, r29	; 62
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	cd bf       	out	0x3d, r28	; 61
    1232:	fe 01       	movw	r30, r28
    1234:	e6 5b       	subi	r30, 0xB6	; 182
    1236:	ff 4f       	sbci	r31, 0xFF	; 255
    1238:	91 83       	std	Z+1, r25	; 0x01
    123a:	80 83       	st	Z, r24
    123c:	fe 01       	movw	r30, r28
    123e:	e4 5b       	subi	r30, 0xB4	; 180
    1240:	ff 4f       	sbci	r31, 0xFF	; 255
    1242:	71 83       	std	Z+1, r23	; 0x01
    1244:	60 83       	st	Z, r22
	uint8 i; /* increment value of for loops */
	int address= 0x0311; /* the 1st address of EEPROM */
    1246:	fe 01       	movw	r30, r28
    1248:	e9 5b       	subi	r30, 0xB9	; 185
    124a:	ff 4f       	sbci	r31, 0xFF	; 255
    124c:	81 e1       	ldi	r24, 0x11	; 17
    124e:	93 e0       	ldi	r25, 0x03	; 3
    1250:	91 83       	std	Z+1, r25	; 0x01
    1252:	80 83       	st	Z, r24
    1254:	fe 01       	movw	r30, r28
    1256:	ed 5b       	subi	r30, 0xBD	; 189
    1258:	ff 4f       	sbci	r31, 0xFF	; 255
    125a:	80 e0       	ldi	r24, 0x00	; 0
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	aa ef       	ldi	r26, 0xFA	; 250
    1260:	b3 e4       	ldi	r27, 0x43	; 67
    1262:	80 83       	st	Z, r24
    1264:	91 83       	std	Z+1, r25	; 0x01
    1266:	a2 83       	std	Z+2, r26	; 0x02
    1268:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    126a:	8e 01       	movw	r16, r28
    126c:	01 5c       	subi	r16, 0xC1	; 193
    126e:	1f 4f       	sbci	r17, 0xFF	; 255
    1270:	fe 01       	movw	r30, r28
    1272:	ed 5b       	subi	r30, 0xBD	; 189
    1274:	ff 4f       	sbci	r31, 0xFF	; 255
    1276:	60 81       	ld	r22, Z
    1278:	71 81       	ldd	r23, Z+1	; 0x01
    127a:	82 81       	ldd	r24, Z+2	; 0x02
    127c:	93 81       	ldd	r25, Z+3	; 0x03
    127e:	20 e0       	ldi	r18, 0x00	; 0
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	4a ef       	ldi	r20, 0xFA	; 250
    1284:	54 e4       	ldi	r21, 0x44	; 68
    1286:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    128a:	dc 01       	movw	r26, r24
    128c:	cb 01       	movw	r24, r22
    128e:	f8 01       	movw	r30, r16
    1290:	80 83       	st	Z, r24
    1292:	91 83       	std	Z+1, r25	; 0x01
    1294:	a2 83       	std	Z+2, r26	; 0x02
    1296:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1298:	fe 01       	movw	r30, r28
    129a:	ff 96       	adiw	r30, 0x3f	; 63
    129c:	60 81       	ld	r22, Z
    129e:	71 81       	ldd	r23, Z+1	; 0x01
    12a0:	82 81       	ldd	r24, Z+2	; 0x02
    12a2:	93 81       	ldd	r25, Z+3	; 0x03
    12a4:	20 e0       	ldi	r18, 0x00	; 0
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	40 e8       	ldi	r20, 0x80	; 128
    12aa:	5f e3       	ldi	r21, 0x3F	; 63
    12ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12b0:	88 23       	and	r24, r24
    12b2:	2c f4       	brge	.+10     	; 0x12be <Read_Password+0xa6>
		__ticks = 1;
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	9e af       	std	Y+62, r25	; 0x3e
    12ba:	8d af       	std	Y+61, r24	; 0x3d
    12bc:	46 c0       	rjmp	.+140    	; 0x134a <Read_Password+0x132>
	else if (__tmp > 65535)
    12be:	fe 01       	movw	r30, r28
    12c0:	ff 96       	adiw	r30, 0x3f	; 63
    12c2:	60 81       	ld	r22, Z
    12c4:	71 81       	ldd	r23, Z+1	; 0x01
    12c6:	82 81       	ldd	r24, Z+2	; 0x02
    12c8:	93 81       	ldd	r25, Z+3	; 0x03
    12ca:	20 e0       	ldi	r18, 0x00	; 0
    12cc:	3f ef       	ldi	r19, 0xFF	; 255
    12ce:	4f e7       	ldi	r20, 0x7F	; 127
    12d0:	57 e4       	ldi	r21, 0x47	; 71
    12d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12d6:	18 16       	cp	r1, r24
    12d8:	64 f5       	brge	.+88     	; 0x1332 <Read_Password+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12da:	fe 01       	movw	r30, r28
    12dc:	ed 5b       	subi	r30, 0xBD	; 189
    12de:	ff 4f       	sbci	r31, 0xFF	; 255
    12e0:	60 81       	ld	r22, Z
    12e2:	71 81       	ldd	r23, Z+1	; 0x01
    12e4:	82 81       	ldd	r24, Z+2	; 0x02
    12e6:	93 81       	ldd	r25, Z+3	; 0x03
    12e8:	20 e0       	ldi	r18, 0x00	; 0
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	40 e2       	ldi	r20, 0x20	; 32
    12ee:	51 e4       	ldi	r21, 0x41	; 65
    12f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f4:	dc 01       	movw	r26, r24
    12f6:	cb 01       	movw	r24, r22
    12f8:	bc 01       	movw	r22, r24
    12fa:	cd 01       	movw	r24, r26
    12fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1300:	dc 01       	movw	r26, r24
    1302:	cb 01       	movw	r24, r22
    1304:	9e af       	std	Y+62, r25	; 0x3e
    1306:	8d af       	std	Y+61, r24	; 0x3d
    1308:	0f c0       	rjmp	.+30     	; 0x1328 <Read_Password+0x110>
    130a:	88 ec       	ldi	r24, 0xC8	; 200
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	9c af       	std	Y+60, r25	; 0x3c
    1310:	8b af       	std	Y+59, r24	; 0x3b
    1312:	8b ad       	ldd	r24, Y+59	; 0x3b
    1314:	9c ad       	ldd	r25, Y+60	; 0x3c
    1316:	01 97       	sbiw	r24, 0x01	; 1
    1318:	f1 f7       	brne	.-4      	; 0x1316 <Read_Password+0xfe>
    131a:	9c af       	std	Y+60, r25	; 0x3c
    131c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    131e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1320:	9e ad       	ldd	r25, Y+62	; 0x3e
    1322:	01 97       	sbiw	r24, 0x01	; 1
    1324:	9e af       	std	Y+62, r25	; 0x3e
    1326:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1328:	8d ad       	ldd	r24, Y+61	; 0x3d
    132a:	9e ad       	ldd	r25, Y+62	; 0x3e
    132c:	00 97       	sbiw	r24, 0x00	; 0
    132e:	69 f7       	brne	.-38     	; 0x130a <Read_Password+0xf2>
    1330:	16 c0       	rjmp	.+44     	; 0x135e <Read_Password+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1332:	fe 01       	movw	r30, r28
    1334:	ff 96       	adiw	r30, 0x3f	; 63
    1336:	60 81       	ld	r22, Z
    1338:	71 81       	ldd	r23, Z+1	; 0x01
    133a:	82 81       	ldd	r24, Z+2	; 0x02
    133c:	93 81       	ldd	r25, Z+3	; 0x03
    133e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1342:	dc 01       	movw	r26, r24
    1344:	cb 01       	movw	r24, r22
    1346:	9e af       	std	Y+62, r25	; 0x3e
    1348:	8d af       	std	Y+61, r24	; 0x3d
    134a:	8d ad       	ldd	r24, Y+61	; 0x3d
    134c:	9e ad       	ldd	r25, Y+62	; 0x3e
    134e:	9a af       	std	Y+58, r25	; 0x3a
    1350:	89 af       	std	Y+57, r24	; 0x39
    1352:	89 ad       	ldd	r24, Y+57	; 0x39
    1354:	9a ad       	ldd	r25, Y+58	; 0x3a
    1356:	01 97       	sbiw	r24, 0x01	; 1
    1358:	f1 f7       	brne	.-4      	; 0x1356 <Read_Password+0x13e>
    135a:	9a af       	std	Y+58, r25	; 0x3a
    135c:	89 af       	std	Y+57, r24	; 0x39



	 _delay_ms(500);

	    	 LCD_goToRowColumn(1,0);/*[start] to make sure from results of func.>> Receive_Password( &password ) */
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	60 e0       	ldi	r22, 0x00	; 0
    1362:	0e 94 49 18 	call	0x3092	; 0x3092 <LCD_goToRowColumn>

			for(i=0;i<5;i++)/* for loop to  read from the external EEPROM  */
    1366:	fe 01       	movw	r30, r28
    1368:	e7 5b       	subi	r30, 0xB7	; 183
    136a:	ff 4f       	sbci	r31, 0xFF	; 255
    136c:	10 82       	st	Z, r1
    136e:	21 c1       	rjmp	.+578    	; 0x15b2 <Read_Password+0x39a>
				{
				EEPROM_readByte(address, &*(enter_password + i) ); /* Read password[i] (confirm password) from the external EEPROM */
    1370:	fe 01       	movw	r30, r28
    1372:	e9 5b       	subi	r30, 0xB9	; 185
    1374:	ff 4f       	sbci	r31, 0xFF	; 255
    1376:	40 81       	ld	r20, Z
    1378:	51 81       	ldd	r21, Z+1	; 0x01
    137a:	fe 01       	movw	r30, r28
    137c:	e7 5b       	subi	r30, 0xB7	; 183
    137e:	ff 4f       	sbci	r31, 0xFF	; 255
    1380:	80 81       	ld	r24, Z
    1382:	28 2f       	mov	r18, r24
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	fe 01       	movw	r30, r28
    1388:	e4 5b       	subi	r30, 0xB4	; 180
    138a:	ff 4f       	sbci	r31, 0xFF	; 255
    138c:	80 81       	ld	r24, Z
    138e:	91 81       	ldd	r25, Z+1	; 0x01
    1390:	28 0f       	add	r18, r24
    1392:	39 1f       	adc	r19, r25
    1394:	ca 01       	movw	r24, r20
    1396:	b9 01       	movw	r22, r18
    1398:	0e 94 30 13 	call	0x2660	; 0x2660 <EEPROM_readByte>
				address++;
    139c:	de 01       	movw	r26, r28
    139e:	a9 5b       	subi	r26, 0xB9	; 185
    13a0:	bf 4f       	sbci	r27, 0xFF	; 255
    13a2:	fe 01       	movw	r30, r28
    13a4:	e9 5b       	subi	r30, 0xB9	; 185
    13a6:	ff 4f       	sbci	r31, 0xFF	; 255
    13a8:	80 81       	ld	r24, Z
    13aa:	91 81       	ldd	r25, Z+1	; 0x01
    13ac:	01 96       	adiw	r24, 0x01	; 1
    13ae:	8d 93       	st	X+, r24
    13b0:	9c 93       	st	X, r25
				/* to show me value on LCD  */
				LCD_intgerToString( *(enter_password + i) );
    13b2:	fe 01       	movw	r30, r28
    13b4:	e7 5b       	subi	r30, 0xB7	; 183
    13b6:	ff 4f       	sbci	r31, 0xFF	; 255
    13b8:	80 81       	ld	r24, Z
    13ba:	28 2f       	mov	r18, r24
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	fe 01       	movw	r30, r28
    13c0:	e4 5b       	subi	r30, 0xB4	; 180
    13c2:	ff 4f       	sbci	r31, 0xFF	; 255
    13c4:	80 81       	ld	r24, Z
    13c6:	91 81       	ldd	r25, Z+1	; 0x01
    13c8:	fc 01       	movw	r30, r24
    13ca:	e2 0f       	add	r30, r18
    13cc:	f3 1f       	adc	r31, r19
    13ce:	80 81       	ld	r24, Z
    13d0:	88 2f       	mov	r24, r24
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	0e 94 a4 18 	call	0x3148	; 0x3148 <LCD_intgerToString>
    13d8:	80 e0       	ldi	r24, 0x00	; 0
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	a8 e4       	ldi	r26, 0x48	; 72
    13de:	b3 e4       	ldi	r27, 0x43	; 67
    13e0:	8d ab       	std	Y+53, r24	; 0x35
    13e2:	9e ab       	std	Y+54, r25	; 0x36
    13e4:	af ab       	std	Y+55, r26	; 0x37
    13e6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13e8:	6d a9       	ldd	r22, Y+53	; 0x35
    13ea:	7e a9       	ldd	r23, Y+54	; 0x36
    13ec:	8f a9       	ldd	r24, Y+55	; 0x37
    13ee:	98 ad       	ldd	r25, Y+56	; 0x38
    13f0:	20 e0       	ldi	r18, 0x00	; 0
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	4a ef       	ldi	r20, 0xFA	; 250
    13f6:	54 e4       	ldi	r21, 0x44	; 68
    13f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13fc:	dc 01       	movw	r26, r24
    13fe:	cb 01       	movw	r24, r22
    1400:	89 ab       	std	Y+49, r24	; 0x31
    1402:	9a ab       	std	Y+50, r25	; 0x32
    1404:	ab ab       	std	Y+51, r26	; 0x33
    1406:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1408:	69 a9       	ldd	r22, Y+49	; 0x31
    140a:	7a a9       	ldd	r23, Y+50	; 0x32
    140c:	8b a9       	ldd	r24, Y+51	; 0x33
    140e:	9c a9       	ldd	r25, Y+52	; 0x34
    1410:	20 e0       	ldi	r18, 0x00	; 0
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	40 e8       	ldi	r20, 0x80	; 128
    1416:	5f e3       	ldi	r21, 0x3F	; 63
    1418:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    141c:	88 23       	and	r24, r24
    141e:	2c f4       	brge	.+10     	; 0x142a <Read_Password+0x212>
		__ticks = 1;
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	98 ab       	std	Y+48, r25	; 0x30
    1426:	8f a7       	std	Y+47, r24	; 0x2f
    1428:	3f c0       	rjmp	.+126    	; 0x14a8 <Read_Password+0x290>
	else if (__tmp > 65535)
    142a:	69 a9       	ldd	r22, Y+49	; 0x31
    142c:	7a a9       	ldd	r23, Y+50	; 0x32
    142e:	8b a9       	ldd	r24, Y+51	; 0x33
    1430:	9c a9       	ldd	r25, Y+52	; 0x34
    1432:	20 e0       	ldi	r18, 0x00	; 0
    1434:	3f ef       	ldi	r19, 0xFF	; 255
    1436:	4f e7       	ldi	r20, 0x7F	; 127
    1438:	57 e4       	ldi	r21, 0x47	; 71
    143a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    143e:	18 16       	cp	r1, r24
    1440:	4c f5       	brge	.+82     	; 0x1494 <Read_Password+0x27c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1442:	6d a9       	ldd	r22, Y+53	; 0x35
    1444:	7e a9       	ldd	r23, Y+54	; 0x36
    1446:	8f a9       	ldd	r24, Y+55	; 0x37
    1448:	98 ad       	ldd	r25, Y+56	; 0x38
    144a:	20 e0       	ldi	r18, 0x00	; 0
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	40 e2       	ldi	r20, 0x20	; 32
    1450:	51 e4       	ldi	r21, 0x41	; 65
    1452:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1456:	dc 01       	movw	r26, r24
    1458:	cb 01       	movw	r24, r22
    145a:	bc 01       	movw	r22, r24
    145c:	cd 01       	movw	r24, r26
    145e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1462:	dc 01       	movw	r26, r24
    1464:	cb 01       	movw	r24, r22
    1466:	98 ab       	std	Y+48, r25	; 0x30
    1468:	8f a7       	std	Y+47, r24	; 0x2f
    146a:	0f c0       	rjmp	.+30     	; 0x148a <Read_Password+0x272>
    146c:	88 ec       	ldi	r24, 0xC8	; 200
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	9e a7       	std	Y+46, r25	; 0x2e
    1472:	8d a7       	std	Y+45, r24	; 0x2d
    1474:	8d a5       	ldd	r24, Y+45	; 0x2d
    1476:	9e a5       	ldd	r25, Y+46	; 0x2e
    1478:	01 97       	sbiw	r24, 0x01	; 1
    147a:	f1 f7       	brne	.-4      	; 0x1478 <Read_Password+0x260>
    147c:	9e a7       	std	Y+46, r25	; 0x2e
    147e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1480:	8f a5       	ldd	r24, Y+47	; 0x2f
    1482:	98 a9       	ldd	r25, Y+48	; 0x30
    1484:	01 97       	sbiw	r24, 0x01	; 1
    1486:	98 ab       	std	Y+48, r25	; 0x30
    1488:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    148a:	8f a5       	ldd	r24, Y+47	; 0x2f
    148c:	98 a9       	ldd	r25, Y+48	; 0x30
    148e:	00 97       	sbiw	r24, 0x00	; 0
    1490:	69 f7       	brne	.-38     	; 0x146c <Read_Password+0x254>
    1492:	14 c0       	rjmp	.+40     	; 0x14bc <Read_Password+0x2a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1494:	69 a9       	ldd	r22, Y+49	; 0x31
    1496:	7a a9       	ldd	r23, Y+50	; 0x32
    1498:	8b a9       	ldd	r24, Y+51	; 0x33
    149a:	9c a9       	ldd	r25, Y+52	; 0x34
    149c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14a0:	dc 01       	movw	r26, r24
    14a2:	cb 01       	movw	r24, r22
    14a4:	98 ab       	std	Y+48, r25	; 0x30
    14a6:	8f a7       	std	Y+47, r24	; 0x2f
    14a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    14aa:	98 a9       	ldd	r25, Y+48	; 0x30
    14ac:	9c a7       	std	Y+44, r25	; 0x2c
    14ae:	8b a7       	std	Y+43, r24	; 0x2b
    14b0:	8b a5       	ldd	r24, Y+43	; 0x2b
    14b2:	9c a5       	ldd	r25, Y+44	; 0x2c
    14b4:	01 97       	sbiw	r24, 0x01	; 1
    14b6:	f1 f7       	brne	.-4      	; 0x14b4 <Read_Password+0x29c>
    14b8:	9c a7       	std	Y+44, r25	; 0x2c
    14ba:	8b a7       	std	Y+43, r24	; 0x2b
    14bc:	80 e0       	ldi	r24, 0x00	; 0
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	a8 ec       	ldi	r26, 0xC8	; 200
    14c2:	b2 e4       	ldi	r27, 0x42	; 66
    14c4:	8f a3       	std	Y+39, r24	; 0x27
    14c6:	98 a7       	std	Y+40, r25	; 0x28
    14c8:	a9 a7       	std	Y+41, r26	; 0x29
    14ca:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14cc:	6f a1       	ldd	r22, Y+39	; 0x27
    14ce:	78 a5       	ldd	r23, Y+40	; 0x28
    14d0:	89 a5       	ldd	r24, Y+41	; 0x29
    14d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	4a ef       	ldi	r20, 0xFA	; 250
    14da:	54 e4       	ldi	r21, 0x44	; 68
    14dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14e0:	dc 01       	movw	r26, r24
    14e2:	cb 01       	movw	r24, r22
    14e4:	8b a3       	std	Y+35, r24	; 0x23
    14e6:	9c a3       	std	Y+36, r25	; 0x24
    14e8:	ad a3       	std	Y+37, r26	; 0x25
    14ea:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    14ec:	6b a1       	ldd	r22, Y+35	; 0x23
    14ee:	7c a1       	ldd	r23, Y+36	; 0x24
    14f0:	8d a1       	ldd	r24, Y+37	; 0x25
    14f2:	9e a1       	ldd	r25, Y+38	; 0x26
    14f4:	20 e0       	ldi	r18, 0x00	; 0
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	40 e8       	ldi	r20, 0x80	; 128
    14fa:	5f e3       	ldi	r21, 0x3F	; 63
    14fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1500:	88 23       	and	r24, r24
    1502:	2c f4       	brge	.+10     	; 0x150e <Read_Password+0x2f6>
		__ticks = 1;
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	9a a3       	std	Y+34, r25	; 0x22
    150a:	89 a3       	std	Y+33, r24	; 0x21
    150c:	3f c0       	rjmp	.+126    	; 0x158c <Read_Password+0x374>
	else if (__tmp > 65535)
    150e:	6b a1       	ldd	r22, Y+35	; 0x23
    1510:	7c a1       	ldd	r23, Y+36	; 0x24
    1512:	8d a1       	ldd	r24, Y+37	; 0x25
    1514:	9e a1       	ldd	r25, Y+38	; 0x26
    1516:	20 e0       	ldi	r18, 0x00	; 0
    1518:	3f ef       	ldi	r19, 0xFF	; 255
    151a:	4f e7       	ldi	r20, 0x7F	; 127
    151c:	57 e4       	ldi	r21, 0x47	; 71
    151e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1522:	18 16       	cp	r1, r24
    1524:	4c f5       	brge	.+82     	; 0x1578 <Read_Password+0x360>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1526:	6f a1       	ldd	r22, Y+39	; 0x27
    1528:	78 a5       	ldd	r23, Y+40	; 0x28
    152a:	89 a5       	ldd	r24, Y+41	; 0x29
    152c:	9a a5       	ldd	r25, Y+42	; 0x2a
    152e:	20 e0       	ldi	r18, 0x00	; 0
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	40 e2       	ldi	r20, 0x20	; 32
    1534:	51 e4       	ldi	r21, 0x41	; 65
    1536:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    153a:	dc 01       	movw	r26, r24
    153c:	cb 01       	movw	r24, r22
    153e:	bc 01       	movw	r22, r24
    1540:	cd 01       	movw	r24, r26
    1542:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1546:	dc 01       	movw	r26, r24
    1548:	cb 01       	movw	r24, r22
    154a:	9a a3       	std	Y+34, r25	; 0x22
    154c:	89 a3       	std	Y+33, r24	; 0x21
    154e:	0f c0       	rjmp	.+30     	; 0x156e <Read_Password+0x356>
    1550:	88 ec       	ldi	r24, 0xC8	; 200
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	98 a3       	std	Y+32, r25	; 0x20
    1556:	8f 8f       	std	Y+31, r24	; 0x1f
    1558:	8f 8d       	ldd	r24, Y+31	; 0x1f
    155a:	98 a1       	ldd	r25, Y+32	; 0x20
    155c:	01 97       	sbiw	r24, 0x01	; 1
    155e:	f1 f7       	brne	.-4      	; 0x155c <Read_Password+0x344>
    1560:	98 a3       	std	Y+32, r25	; 0x20
    1562:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1564:	89 a1       	ldd	r24, Y+33	; 0x21
    1566:	9a a1       	ldd	r25, Y+34	; 0x22
    1568:	01 97       	sbiw	r24, 0x01	; 1
    156a:	9a a3       	std	Y+34, r25	; 0x22
    156c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    156e:	89 a1       	ldd	r24, Y+33	; 0x21
    1570:	9a a1       	ldd	r25, Y+34	; 0x22
    1572:	00 97       	sbiw	r24, 0x00	; 0
    1574:	69 f7       	brne	.-38     	; 0x1550 <Read_Password+0x338>
    1576:	14 c0       	rjmp	.+40     	; 0x15a0 <Read_Password+0x388>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1578:	6b a1       	ldd	r22, Y+35	; 0x23
    157a:	7c a1       	ldd	r23, Y+36	; 0x24
    157c:	8d a1       	ldd	r24, Y+37	; 0x25
    157e:	9e a1       	ldd	r25, Y+38	; 0x26
    1580:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1584:	dc 01       	movw	r26, r24
    1586:	cb 01       	movw	r24, r22
    1588:	9a a3       	std	Y+34, r25	; 0x22
    158a:	89 a3       	std	Y+33, r24	; 0x21
    158c:	89 a1       	ldd	r24, Y+33	; 0x21
    158e:	9a a1       	ldd	r25, Y+34	; 0x22
    1590:	9e 8f       	std	Y+30, r25	; 0x1e
    1592:	8d 8f       	std	Y+29, r24	; 0x1d
    1594:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1596:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1598:	01 97       	sbiw	r24, 0x01	; 1
    159a:	f1 f7       	brne	.-4      	; 0x1598 <Read_Password+0x380>
    159c:	9e 8f       	std	Y+30, r25	; 0x1e
    159e:	8d 8f       	std	Y+29, r24	; 0x1d

	 _delay_ms(500);

	    	 LCD_goToRowColumn(1,0);/*[start] to make sure from results of func.>> Receive_Password( &password ) */

			for(i=0;i<5;i++)/* for loop to  read from the external EEPROM  */
    15a0:	de 01       	movw	r26, r28
    15a2:	a7 5b       	subi	r26, 0xB7	; 183
    15a4:	bf 4f       	sbci	r27, 0xFF	; 255
    15a6:	fe 01       	movw	r30, r28
    15a8:	e7 5b       	subi	r30, 0xB7	; 183
    15aa:	ff 4f       	sbci	r31, 0xFF	; 255
    15ac:	80 81       	ld	r24, Z
    15ae:	8f 5f       	subi	r24, 0xFF	; 255
    15b0:	8c 93       	st	X, r24
    15b2:	fe 01       	movw	r30, r28
    15b4:	e7 5b       	subi	r30, 0xB7	; 183
    15b6:	ff 4f       	sbci	r31, 0xFF	; 255
    15b8:	80 81       	ld	r24, Z
    15ba:	85 30       	cpi	r24, 0x05	; 5
    15bc:	08 f4       	brcc	.+2      	; 0x15c0 <Read_Password+0x3a8>
    15be:	d8 ce       	rjmp	.-592    	; 0x1370 <Read_Password+0x158>
    15c0:	80 e0       	ldi	r24, 0x00	; 0
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	aa e7       	ldi	r26, 0x7A	; 122
    15c6:	b4 e4       	ldi	r27, 0x44	; 68
    15c8:	89 8f       	std	Y+25, r24	; 0x19
    15ca:	9a 8f       	std	Y+26, r25	; 0x1a
    15cc:	ab 8f       	std	Y+27, r26	; 0x1b
    15ce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15d0:	69 8d       	ldd	r22, Y+25	; 0x19
    15d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	4a ef       	ldi	r20, 0xFA	; 250
    15de:	54 e4       	ldi	r21, 0x44	; 68
    15e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e4:	dc 01       	movw	r26, r24
    15e6:	cb 01       	movw	r24, r22
    15e8:	8d 8b       	std	Y+21, r24	; 0x15
    15ea:	9e 8b       	std	Y+22, r25	; 0x16
    15ec:	af 8b       	std	Y+23, r26	; 0x17
    15ee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15f0:	6d 89       	ldd	r22, Y+21	; 0x15
    15f2:	7e 89       	ldd	r23, Y+22	; 0x16
    15f4:	8f 89       	ldd	r24, Y+23	; 0x17
    15f6:	98 8d       	ldd	r25, Y+24	; 0x18
    15f8:	20 e0       	ldi	r18, 0x00	; 0
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	40 e8       	ldi	r20, 0x80	; 128
    15fe:	5f e3       	ldi	r21, 0x3F	; 63
    1600:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1604:	88 23       	and	r24, r24
    1606:	2c f4       	brge	.+10     	; 0x1612 <Read_Password+0x3fa>
		__ticks = 1;
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	9c 8b       	std	Y+20, r25	; 0x14
    160e:	8b 8b       	std	Y+19, r24	; 0x13
    1610:	3f c0       	rjmp	.+126    	; 0x1690 <Read_Password+0x478>
	else if (__tmp > 65535)
    1612:	6d 89       	ldd	r22, Y+21	; 0x15
    1614:	7e 89       	ldd	r23, Y+22	; 0x16
    1616:	8f 89       	ldd	r24, Y+23	; 0x17
    1618:	98 8d       	ldd	r25, Y+24	; 0x18
    161a:	20 e0       	ldi	r18, 0x00	; 0
    161c:	3f ef       	ldi	r19, 0xFF	; 255
    161e:	4f e7       	ldi	r20, 0x7F	; 127
    1620:	57 e4       	ldi	r21, 0x47	; 71
    1622:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1626:	18 16       	cp	r1, r24
    1628:	4c f5       	brge	.+82     	; 0x167c <Read_Password+0x464>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    162a:	69 8d       	ldd	r22, Y+25	; 0x19
    162c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    162e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1630:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1632:	20 e0       	ldi	r18, 0x00	; 0
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	40 e2       	ldi	r20, 0x20	; 32
    1638:	51 e4       	ldi	r21, 0x41	; 65
    163a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    163e:	dc 01       	movw	r26, r24
    1640:	cb 01       	movw	r24, r22
    1642:	bc 01       	movw	r22, r24
    1644:	cd 01       	movw	r24, r26
    1646:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    164a:	dc 01       	movw	r26, r24
    164c:	cb 01       	movw	r24, r22
    164e:	9c 8b       	std	Y+20, r25	; 0x14
    1650:	8b 8b       	std	Y+19, r24	; 0x13
    1652:	0f c0       	rjmp	.+30     	; 0x1672 <Read_Password+0x45a>
    1654:	88 ec       	ldi	r24, 0xC8	; 200
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	9a 8b       	std	Y+18, r25	; 0x12
    165a:	89 8b       	std	Y+17, r24	; 0x11
    165c:	89 89       	ldd	r24, Y+17	; 0x11
    165e:	9a 89       	ldd	r25, Y+18	; 0x12
    1660:	01 97       	sbiw	r24, 0x01	; 1
    1662:	f1 f7       	brne	.-4      	; 0x1660 <Read_Password+0x448>
    1664:	9a 8b       	std	Y+18, r25	; 0x12
    1666:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1668:	8b 89       	ldd	r24, Y+19	; 0x13
    166a:	9c 89       	ldd	r25, Y+20	; 0x14
    166c:	01 97       	sbiw	r24, 0x01	; 1
    166e:	9c 8b       	std	Y+20, r25	; 0x14
    1670:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1672:	8b 89       	ldd	r24, Y+19	; 0x13
    1674:	9c 89       	ldd	r25, Y+20	; 0x14
    1676:	00 97       	sbiw	r24, 0x00	; 0
    1678:	69 f7       	brne	.-38     	; 0x1654 <Read_Password+0x43c>
    167a:	14 c0       	rjmp	.+40     	; 0x16a4 <Read_Password+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    167c:	6d 89       	ldd	r22, Y+21	; 0x15
    167e:	7e 89       	ldd	r23, Y+22	; 0x16
    1680:	8f 89       	ldd	r24, Y+23	; 0x17
    1682:	98 8d       	ldd	r25, Y+24	; 0x18
    1684:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1688:	dc 01       	movw	r26, r24
    168a:	cb 01       	movw	r24, r22
    168c:	9c 8b       	std	Y+20, r25	; 0x14
    168e:	8b 8b       	std	Y+19, r24	; 0x13
    1690:	8b 89       	ldd	r24, Y+19	; 0x13
    1692:	9c 89       	ldd	r25, Y+20	; 0x14
    1694:	98 8b       	std	Y+16, r25	; 0x10
    1696:	8f 87       	std	Y+15, r24	; 0x0f
    1698:	8f 85       	ldd	r24, Y+15	; 0x0f
    169a:	98 89       	ldd	r25, Y+16	; 0x10
    169c:	01 97       	sbiw	r24, 0x01	; 1
    169e:	f1 f7       	brne	.-4      	; 0x169c <Read_Password+0x484>
    16a0:	98 8b       	std	Y+16, r25	; 0x10
    16a2:	8f 87       	std	Y+15, r24	; 0x0f

		    	_delay_ms(100);
				}

	    	 _delay_ms(1000);
	    	   LCD_clearScreen(); /* clear the LCD display and begin from 0 Col, 0 Row */
    16a4:	0e 94 c7 18 	call	0x318e	; 0x318e <LCD_clearScreen>
    16a8:	80 e0       	ldi	r24, 0x00	; 0
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	a8 e4       	ldi	r26, 0x48	; 72
    16ae:	b3 e4       	ldi	r27, 0x43	; 67
    16b0:	8b 87       	std	Y+11, r24	; 0x0b
    16b2:	9c 87       	std	Y+12, r25	; 0x0c
    16b4:	ad 87       	std	Y+13, r26	; 0x0d
    16b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    16ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    16bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    16be:	9e 85       	ldd	r25, Y+14	; 0x0e
    16c0:	20 e0       	ldi	r18, 0x00	; 0
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	4a ef       	ldi	r20, 0xFA	; 250
    16c6:	54 e4       	ldi	r21, 0x44	; 68
    16c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16cc:	dc 01       	movw	r26, r24
    16ce:	cb 01       	movw	r24, r22
    16d0:	8f 83       	std	Y+7, r24	; 0x07
    16d2:	98 87       	std	Y+8, r25	; 0x08
    16d4:	a9 87       	std	Y+9, r26	; 0x09
    16d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16d8:	6f 81       	ldd	r22, Y+7	; 0x07
    16da:	78 85       	ldd	r23, Y+8	; 0x08
    16dc:	89 85       	ldd	r24, Y+9	; 0x09
    16de:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	40 e8       	ldi	r20, 0x80	; 128
    16e6:	5f e3       	ldi	r21, 0x3F	; 63
    16e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16ec:	88 23       	and	r24, r24
    16ee:	2c f4       	brge	.+10     	; 0x16fa <Read_Password+0x4e2>
		__ticks = 1;
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	9e 83       	std	Y+6, r25	; 0x06
    16f6:	8d 83       	std	Y+5, r24	; 0x05
    16f8:	3f c0       	rjmp	.+126    	; 0x1778 <Read_Password+0x560>
	else if (__tmp > 65535)
    16fa:	6f 81       	ldd	r22, Y+7	; 0x07
    16fc:	78 85       	ldd	r23, Y+8	; 0x08
    16fe:	89 85       	ldd	r24, Y+9	; 0x09
    1700:	9a 85       	ldd	r25, Y+10	; 0x0a
    1702:	20 e0       	ldi	r18, 0x00	; 0
    1704:	3f ef       	ldi	r19, 0xFF	; 255
    1706:	4f e7       	ldi	r20, 0x7F	; 127
    1708:	57 e4       	ldi	r21, 0x47	; 71
    170a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    170e:	18 16       	cp	r1, r24
    1710:	4c f5       	brge	.+82     	; 0x1764 <Read_Password+0x54c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1712:	6b 85       	ldd	r22, Y+11	; 0x0b
    1714:	7c 85       	ldd	r23, Y+12	; 0x0c
    1716:	8d 85       	ldd	r24, Y+13	; 0x0d
    1718:	9e 85       	ldd	r25, Y+14	; 0x0e
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	40 e2       	ldi	r20, 0x20	; 32
    1720:	51 e4       	ldi	r21, 0x41	; 65
    1722:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1726:	dc 01       	movw	r26, r24
    1728:	cb 01       	movw	r24, r22
    172a:	bc 01       	movw	r22, r24
    172c:	cd 01       	movw	r24, r26
    172e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1732:	dc 01       	movw	r26, r24
    1734:	cb 01       	movw	r24, r22
    1736:	9e 83       	std	Y+6, r25	; 0x06
    1738:	8d 83       	std	Y+5, r24	; 0x05
    173a:	0f c0       	rjmp	.+30     	; 0x175a <Read_Password+0x542>
    173c:	88 ec       	ldi	r24, 0xC8	; 200
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	9c 83       	std	Y+4, r25	; 0x04
    1742:	8b 83       	std	Y+3, r24	; 0x03
    1744:	8b 81       	ldd	r24, Y+3	; 0x03
    1746:	9c 81       	ldd	r25, Y+4	; 0x04
    1748:	01 97       	sbiw	r24, 0x01	; 1
    174a:	f1 f7       	brne	.-4      	; 0x1748 <Read_Password+0x530>
    174c:	9c 83       	std	Y+4, r25	; 0x04
    174e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1750:	8d 81       	ldd	r24, Y+5	; 0x05
    1752:	9e 81       	ldd	r25, Y+6	; 0x06
    1754:	01 97       	sbiw	r24, 0x01	; 1
    1756:	9e 83       	std	Y+6, r25	; 0x06
    1758:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    175a:	8d 81       	ldd	r24, Y+5	; 0x05
    175c:	9e 81       	ldd	r25, Y+6	; 0x06
    175e:	00 97       	sbiw	r24, 0x00	; 0
    1760:	69 f7       	brne	.-38     	; 0x173c <Read_Password+0x524>
    1762:	14 c0       	rjmp	.+40     	; 0x178c <Read_Password+0x574>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1764:	6f 81       	ldd	r22, Y+7	; 0x07
    1766:	78 85       	ldd	r23, Y+8	; 0x08
    1768:	89 85       	ldd	r24, Y+9	; 0x09
    176a:	9a 85       	ldd	r25, Y+10	; 0x0a
    176c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1770:	dc 01       	movw	r26, r24
    1772:	cb 01       	movw	r24, r22
    1774:	9e 83       	std	Y+6, r25	; 0x06
    1776:	8d 83       	std	Y+5, r24	; 0x05
    1778:	8d 81       	ldd	r24, Y+5	; 0x05
    177a:	9e 81       	ldd	r25, Y+6	; 0x06
    177c:	9a 83       	std	Y+2, r25	; 0x02
    177e:	89 83       	std	Y+1, r24	; 0x01
    1780:	89 81       	ldd	r24, Y+1	; 0x01
    1782:	9a 81       	ldd	r25, Y+2	; 0x02
    1784:	01 97       	sbiw	r24, 0x01	; 1
    1786:	f1 f7       	brne	.-4      	; 0x1784 <Read_Password+0x56c>
    1788:	9a 83       	std	Y+2, r25	; 0x02
    178a:	89 83       	std	Y+1, r24	; 0x01
	    	  _delay_ms(200);




}
    178c:	c3 5b       	subi	r28, 0xB3	; 179
    178e:	df 4f       	sbci	r29, 0xFF	; 255
    1790:	0f b6       	in	r0, 0x3f	; 63
    1792:	f8 94       	cli
    1794:	de bf       	out	0x3e, r29	; 62
    1796:	0f be       	out	0x3f, r0	; 63
    1798:	cd bf       	out	0x3d, r28	; 61
    179a:	cf 91       	pop	r28
    179c:	df 91       	pop	r29
    179e:	1f 91       	pop	r17
    17a0:	0f 91       	pop	r16
    17a2:	08 95       	ret

000017a4 <Matching_Password>:

uint8 Matching_Password(uint8 *enter_password , uint8 *confirm_password)
{
    17a4:	df 93       	push	r29
    17a6:	cf 93       	push	r28
    17a8:	00 d0       	rcall	.+0      	; 0x17aa <Matching_Password+0x6>
    17aa:	00 d0       	rcall	.+0      	; 0x17ac <Matching_Password+0x8>
    17ac:	00 d0       	rcall	.+0      	; 0x17ae <Matching_Password+0xa>
    17ae:	cd b7       	in	r28, 0x3d	; 61
    17b0:	de b7       	in	r29, 0x3e	; 62
    17b2:	9c 83       	std	Y+4, r25	; 0x04
    17b4:	8b 83       	std	Y+3, r24	; 0x03
    17b6:	7e 83       	std	Y+6, r23	; 0x06
    17b8:	6d 83       	std	Y+5, r22	; 0x05
	uint8 check_value;
	uint8 i;

	for(i=0;i<5;i++)
    17ba:	19 82       	std	Y+1, r1	; 0x01
    17bc:	1d c0       	rjmp	.+58     	; 0x17f8 <Matching_Password+0x54>
	{
		if(*(enter_password + i) == *(confirm_password + i))
    17be:	89 81       	ldd	r24, Y+1	; 0x01
    17c0:	28 2f       	mov	r18, r24
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	8b 81       	ldd	r24, Y+3	; 0x03
    17c6:	9c 81       	ldd	r25, Y+4	; 0x04
    17c8:	fc 01       	movw	r30, r24
    17ca:	e2 0f       	add	r30, r18
    17cc:	f3 1f       	adc	r31, r19
    17ce:	40 81       	ld	r20, Z
    17d0:	89 81       	ldd	r24, Y+1	; 0x01
    17d2:	28 2f       	mov	r18, r24
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	8d 81       	ldd	r24, Y+5	; 0x05
    17d8:	9e 81       	ldd	r25, Y+6	; 0x06
    17da:	fc 01       	movw	r30, r24
    17dc:	e2 0f       	add	r30, r18
    17de:	f3 1f       	adc	r31, r19
    17e0:	80 81       	ld	r24, Z
    17e2:	48 17       	cp	r20, r24
    17e4:	19 f4       	brne	.+6      	; 0x17ec <Matching_Password+0x48>
		{
			check_value= 1;
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	8a 83       	std	Y+2, r24	; 0x02
    17ea:	03 c0       	rjmp	.+6      	; 0x17f2 <Matching_Password+0x4e>

		}
		else
		{
			check_value= 0;
    17ec:	1a 82       	std	Y+2, r1	; 0x02
			i= 5;
    17ee:	85 e0       	ldi	r24, 0x05	; 5
    17f0:	89 83       	std	Y+1, r24	; 0x01
uint8 Matching_Password(uint8 *enter_password , uint8 *confirm_password)
{
	uint8 check_value;
	uint8 i;

	for(i=0;i<5;i++)
    17f2:	89 81       	ldd	r24, Y+1	; 0x01
    17f4:	8f 5f       	subi	r24, 0xFF	; 255
    17f6:	89 83       	std	Y+1, r24	; 0x01
    17f8:	89 81       	ldd	r24, Y+1	; 0x01
    17fa:	85 30       	cpi	r24, 0x05	; 5
    17fc:	00 f3       	brcs	.-64     	; 0x17be <Matching_Password+0x1a>
			check_value= 0;
			i= 5;
		}
	}

	return check_value;
    17fe:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1800:	26 96       	adiw	r28, 0x06	; 6
    1802:	0f b6       	in	r0, 0x3f	; 63
    1804:	f8 94       	cli
    1806:	de bf       	out	0x3e, r29	; 62
    1808:	0f be       	out	0x3f, r0	; 63
    180a:	cd bf       	out	0x3d, r28	; 61
    180c:	cf 91       	pop	r28
    180e:	df 91       	pop	r29
    1810:	08 95       	ret

00001812 <main>:



int main(void)
{ DDRC=0XFF;
    1812:	0f 93       	push	r16
    1814:	1f 93       	push	r17
    1816:	df 93       	push	r29
    1818:	cf 93       	push	r28
    181a:	cd b7       	in	r28, 0x3d	; 61
    181c:	de b7       	in	r29, 0x3e	; 62
    181e:	cf 58       	subi	r28, 0x8F	; 143
    1820:	d0 40       	sbci	r29, 0x00	; 0
    1822:	0f b6       	in	r0, 0x3f	; 63
    1824:	f8 94       	cli
    1826:	de bf       	out	0x3e, r29	; 62
    1828:	0f be       	out	0x3f, r0	; 63
    182a:	cd bf       	out	0x3d, r28	; 61
    182c:	e4 e3       	ldi	r30, 0x34	; 52
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	8f ef       	ldi	r24, 0xFF	; 255
    1832:	80 83       	st	Z, r24
	uint8 saved_password_value_2nd;

	uint8 val;/*variable to show the 1st enter & comfirm password only once forever */

	/* Create configuration structure for Timer driver */
	Timer_ConfigType Timer_Config = {F_CPU_1024,NORMAL,5,250};
    1834:	fe 01       	movw	r30, r28
    1836:	e8 57       	subi	r30, 0x78	; 120
    1838:	ff 4f       	sbci	r31, 0xFF	; 255
    183a:	85 e0       	ldi	r24, 0x05	; 5
    183c:	80 83       	st	Z, r24
    183e:	fe 01       	movw	r30, r28
    1840:	e8 57       	subi	r30, 0x78	; 120
    1842:	ff 4f       	sbci	r31, 0xFF	; 255
    1844:	11 82       	std	Z+1, r1	; 0x01
    1846:	fe 01       	movw	r30, r28
    1848:	e8 57       	subi	r30, 0x78	; 120
    184a:	ff 4f       	sbci	r31, 0xFF	; 255
    184c:	85 e0       	ldi	r24, 0x05	; 5
    184e:	82 83       	std	Z+2, r24	; 0x02
    1850:	fe 01       	movw	r30, r28
    1852:	e8 57       	subi	r30, 0x78	; 120
    1854:	ff 4f       	sbci	r31, 0xFF	; 255
    1856:	8a ef       	ldi	r24, 0xFA	; 250
    1858:	83 83       	std	Z+3, r24	; 0x03
	/* Create configuration structure for UART driver */
	UART_ConfigType uart_Config = {ONE_STOP_BIT,ASYNCHRONOUS,DISABLE,ASYNCHRONOUS_DOUBLE_SPEED_MODE};
    185a:	fe 01       	movw	r30, r28
    185c:	e4 57       	subi	r30, 0x74	; 116
    185e:	ff 4f       	sbci	r31, 0xFF	; 255
    1860:	10 82       	st	Z, r1
    1862:	fe 01       	movw	r30, r28
    1864:	e4 57       	subi	r30, 0x74	; 116
    1866:	ff 4f       	sbci	r31, 0xFF	; 255
    1868:	11 82       	std	Z+1, r1	; 0x01
    186a:	fe 01       	movw	r30, r28
    186c:	e4 57       	subi	r30, 0x74	; 116
    186e:	ff 4f       	sbci	r31, 0xFF	; 255
    1870:	12 82       	std	Z+2, r1	; 0x02
    1872:	fe 01       	movw	r30, r28
    1874:	e4 57       	subi	r30, 0x74	; 116
    1876:	ff 4f       	sbci	r31, 0xFF	; 255
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	83 83       	std	Z+3, r24	; 0x03

	/* uint8 key;*/
	UART_init(& uart_Config );	/* Init UART */
    187c:	ce 01       	movw	r24, r28
    187e:	84 57       	subi	r24, 0x74	; 116
    1880:	9f 4f       	sbci	r25, 0xFF	; 255
    1882:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <UART_init>
	LCD_init();	  /* Init LCD */
    1886:	0e 94 0d 14 	call	0x281a	; 0x281a <LCD_init>
	EEPROM_init();	/* Init EEPROM */
    188a:	0e 94 e6 12 	call	0x25cc	; 0x25cc <EEPROM_init>

/*****************************( show the 1st enter & confirm password only once forever )*************************************************/
	EEPROM_readByte( 0x0333, &val);
    188e:	9e 01       	movw	r18, r28
    1890:	29 57       	subi	r18, 0x79	; 121
    1892:	3f 4f       	sbci	r19, 0xFF	; 255
    1894:	83 e3       	ldi	r24, 0x33	; 51
    1896:	93 e0       	ldi	r25, 0x03	; 3
    1898:	b9 01       	movw	r22, r18
    189a:	0e 94 30 13 	call	0x2660	; 0x2660 <EEPROM_readByte>
		while(UART_recieveByte() != M2_READY){} // wait mc1 is ready
    189e:	0e 94 64 19 	call	0x32c8	; 0x32c8 <UART_recieveByte>
    18a2:	80 31       	cpi	r24, 0x10	; 16
    18a4:	e1 f7       	brne	.-8      	; 0x189e <main+0x8c>
		 UART_sendByte(val); // send 1 by UART to mc1
    18a6:	fe 01       	movw	r30, r28
    18a8:	e9 57       	subi	r30, 0x79	; 121
    18aa:	ff 4f       	sbci	r31, 0xFF	; 255
    18ac:	80 81       	ld	r24, Z
    18ae:	0e 94 4d 19 	call	0x329a	; 0x329a <UART_sendByte>
    18b2:	cb c1       	rjmp	.+918    	; 0x1c4a <main+0x438>
/********(1st interfacing screen with owner-[1st mode] enter password for 1st time)*************************************************
/****************************************************************************************************************/

	while(val==0xff)
	{
	 Receive_Password( &enter_password ); /* call func. to receive 1st enter password */
    18b4:	ce 01       	movw	r24, r28
    18b6:	88 58       	subi	r24, 0x88	; 136
    18b8:	9f 4f       	sbci	r25, 0xFF	; 255
    18ba:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <Receive_Password>
	 Write_Password(&enter_password);/* call func.  to write in the external EEPROM */
    18be:	ce 01       	movw	r24, r28
    18c0:	88 58       	subi	r24, 0x88	; 136
    18c2:	9f 4f       	sbci	r25, 0xFF	; 255
    18c4:	0e 94 34 06 	call	0xc68	; 0xc68 <Write_Password>

	  Receive_Password( &confirm_password ); /*call func. to receive confirm  password */
    18c8:	ce 01       	movw	r24, r28
    18ca:	83 58       	subi	r24, 0x83	; 131
    18cc:	9f 4f       	sbci	r25, 0xFF	; 255
    18ce:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <Receive_Password>
	  Read_Password( &confirm_password,&enter_password);/* call func. to read from the external EEPROM */
    18d2:	ce 01       	movw	r24, r28
    18d4:	83 58       	subi	r24, 0x83	; 131
    18d6:	9f 4f       	sbci	r25, 0xFF	; 255
    18d8:	9e 01       	movw	r18, r28
    18da:	28 58       	subi	r18, 0x88	; 136
    18dc:	3f 4f       	sbci	r19, 0xFF	; 255
    18de:	b9 01       	movw	r22, r18
    18e0:	0e 94 0c 09 	call	0x1218	; 0x1218 <Read_Password>

	  check_value_1st_mode = Matching_Password( &enter_password , &confirm_password);
    18e4:	ce 01       	movw	r24, r28
    18e6:	88 58       	subi	r24, 0x88	; 136
    18e8:	9f 4f       	sbci	r25, 0xFF	; 255
    18ea:	9e 01       	movw	r18, r28
    18ec:	23 58       	subi	r18, 0x83	; 131
    18ee:	3f 4f       	sbci	r19, 0xFF	; 255
    18f0:	b9 01       	movw	r22, r18
    18f2:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <Matching_Password>
    18f6:	fe 01       	movw	r30, r28
    18f8:	ec 58       	subi	r30, 0x8C	; 140
    18fa:	ff 4f       	sbci	r31, 0xFF	; 255
    18fc:	80 83       	st	Z, r24

	  UART_sendByte(check_value_1st_mode); //send the check_value  to the first MC using uart
    18fe:	fe 01       	movw	r30, r28
    1900:	ec 58       	subi	r30, 0x8C	; 140
    1902:	ff 4f       	sbci	r31, 0xFF	; 255
    1904:	80 81       	ld	r24, Z
    1906:	0e 94 4d 19 	call	0x329a	; 0x329a <UART_sendByte>
    190a:	fe 01       	movw	r30, r28
    190c:	e3 59       	subi	r30, 0x93	; 147
    190e:	ff 4f       	sbci	r31, 0xFF	; 255
    1910:	80 e0       	ldi	r24, 0x00	; 0
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	aa ef       	ldi	r26, 0xFA	; 250
    1916:	b3 e4       	ldi	r27, 0x43	; 67
    1918:	80 83       	st	Z, r24
    191a:	91 83       	std	Z+1, r25	; 0x01
    191c:	a2 83       	std	Z+2, r26	; 0x02
    191e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1920:	8e 01       	movw	r16, r28
    1922:	07 59       	subi	r16, 0x97	; 151
    1924:	1f 4f       	sbci	r17, 0xFF	; 255
    1926:	fe 01       	movw	r30, r28
    1928:	e3 59       	subi	r30, 0x93	; 147
    192a:	ff 4f       	sbci	r31, 0xFF	; 255
    192c:	60 81       	ld	r22, Z
    192e:	71 81       	ldd	r23, Z+1	; 0x01
    1930:	82 81       	ldd	r24, Z+2	; 0x02
    1932:	93 81       	ldd	r25, Z+3	; 0x03
    1934:	20 e0       	ldi	r18, 0x00	; 0
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	4a ef       	ldi	r20, 0xFA	; 250
    193a:	54 e4       	ldi	r21, 0x44	; 68
    193c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1940:	dc 01       	movw	r26, r24
    1942:	cb 01       	movw	r24, r22
    1944:	f8 01       	movw	r30, r16
    1946:	80 83       	st	Z, r24
    1948:	91 83       	std	Z+1, r25	; 0x01
    194a:	a2 83       	std	Z+2, r26	; 0x02
    194c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    194e:	fe 01       	movw	r30, r28
    1950:	e7 59       	subi	r30, 0x97	; 151
    1952:	ff 4f       	sbci	r31, 0xFF	; 255
    1954:	60 81       	ld	r22, Z
    1956:	71 81       	ldd	r23, Z+1	; 0x01
    1958:	82 81       	ldd	r24, Z+2	; 0x02
    195a:	93 81       	ldd	r25, Z+3	; 0x03
    195c:	20 e0       	ldi	r18, 0x00	; 0
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	40 e8       	ldi	r20, 0x80	; 128
    1962:	5f e3       	ldi	r21, 0x3F	; 63
    1964:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1968:	88 23       	and	r24, r24
    196a:	44 f4       	brge	.+16     	; 0x197c <main+0x16a>
		__ticks = 1;
    196c:	fe 01       	movw	r30, r28
    196e:	e9 59       	subi	r30, 0x99	; 153
    1970:	ff 4f       	sbci	r31, 0xFF	; 255
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	91 83       	std	Z+1, r25	; 0x01
    1978:	80 83       	st	Z, r24
    197a:	64 c0       	rjmp	.+200    	; 0x1a44 <main+0x232>
	else if (__tmp > 65535)
    197c:	fe 01       	movw	r30, r28
    197e:	e7 59       	subi	r30, 0x97	; 151
    1980:	ff 4f       	sbci	r31, 0xFF	; 255
    1982:	60 81       	ld	r22, Z
    1984:	71 81       	ldd	r23, Z+1	; 0x01
    1986:	82 81       	ldd	r24, Z+2	; 0x02
    1988:	93 81       	ldd	r25, Z+3	; 0x03
    198a:	20 e0       	ldi	r18, 0x00	; 0
    198c:	3f ef       	ldi	r19, 0xFF	; 255
    198e:	4f e7       	ldi	r20, 0x7F	; 127
    1990:	57 e4       	ldi	r21, 0x47	; 71
    1992:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1996:	18 16       	cp	r1, r24
    1998:	0c f0       	brlt	.+2      	; 0x199c <main+0x18a>
    199a:	43 c0       	rjmp	.+134    	; 0x1a22 <main+0x210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    199c:	fe 01       	movw	r30, r28
    199e:	e3 59       	subi	r30, 0x93	; 147
    19a0:	ff 4f       	sbci	r31, 0xFF	; 255
    19a2:	60 81       	ld	r22, Z
    19a4:	71 81       	ldd	r23, Z+1	; 0x01
    19a6:	82 81       	ldd	r24, Z+2	; 0x02
    19a8:	93 81       	ldd	r25, Z+3	; 0x03
    19aa:	20 e0       	ldi	r18, 0x00	; 0
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	40 e2       	ldi	r20, 0x20	; 32
    19b0:	51 e4       	ldi	r21, 0x41	; 65
    19b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19b6:	dc 01       	movw	r26, r24
    19b8:	cb 01       	movw	r24, r22
    19ba:	8e 01       	movw	r16, r28
    19bc:	09 59       	subi	r16, 0x99	; 153
    19be:	1f 4f       	sbci	r17, 0xFF	; 255
    19c0:	bc 01       	movw	r22, r24
    19c2:	cd 01       	movw	r24, r26
    19c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c8:	dc 01       	movw	r26, r24
    19ca:	cb 01       	movw	r24, r22
    19cc:	f8 01       	movw	r30, r16
    19ce:	91 83       	std	Z+1, r25	; 0x01
    19d0:	80 83       	st	Z, r24
    19d2:	1f c0       	rjmp	.+62     	; 0x1a12 <main+0x200>
    19d4:	fe 01       	movw	r30, r28
    19d6:	eb 59       	subi	r30, 0x9B	; 155
    19d8:	ff 4f       	sbci	r31, 0xFF	; 255
    19da:	88 ec       	ldi	r24, 0xC8	; 200
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	91 83       	std	Z+1, r25	; 0x01
    19e0:	80 83       	st	Z, r24
    19e2:	fe 01       	movw	r30, r28
    19e4:	eb 59       	subi	r30, 0x9B	; 155
    19e6:	ff 4f       	sbci	r31, 0xFF	; 255
    19e8:	80 81       	ld	r24, Z
    19ea:	91 81       	ldd	r25, Z+1	; 0x01
    19ec:	01 97       	sbiw	r24, 0x01	; 1
    19ee:	f1 f7       	brne	.-4      	; 0x19ec <main+0x1da>
    19f0:	fe 01       	movw	r30, r28
    19f2:	eb 59       	subi	r30, 0x9B	; 155
    19f4:	ff 4f       	sbci	r31, 0xFF	; 255
    19f6:	91 83       	std	Z+1, r25	; 0x01
    19f8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19fa:	de 01       	movw	r26, r28
    19fc:	a9 59       	subi	r26, 0x99	; 153
    19fe:	bf 4f       	sbci	r27, 0xFF	; 255
    1a00:	fe 01       	movw	r30, r28
    1a02:	e9 59       	subi	r30, 0x99	; 153
    1a04:	ff 4f       	sbci	r31, 0xFF	; 255
    1a06:	80 81       	ld	r24, Z
    1a08:	91 81       	ldd	r25, Z+1	; 0x01
    1a0a:	01 97       	sbiw	r24, 0x01	; 1
    1a0c:	11 96       	adiw	r26, 0x01	; 1
    1a0e:	9c 93       	st	X, r25
    1a10:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a12:	fe 01       	movw	r30, r28
    1a14:	e9 59       	subi	r30, 0x99	; 153
    1a16:	ff 4f       	sbci	r31, 0xFF	; 255
    1a18:	80 81       	ld	r24, Z
    1a1a:	91 81       	ldd	r25, Z+1	; 0x01
    1a1c:	00 97       	sbiw	r24, 0x00	; 0
    1a1e:	d1 f6       	brne	.-76     	; 0x19d4 <main+0x1c2>
    1a20:	08 c1       	rjmp	.+528    	; 0x1c32 <main+0x420>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a22:	8e 01       	movw	r16, r28
    1a24:	09 59       	subi	r16, 0x99	; 153
    1a26:	1f 4f       	sbci	r17, 0xFF	; 255
    1a28:	fe 01       	movw	r30, r28
    1a2a:	e7 59       	subi	r30, 0x97	; 151
    1a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2e:	60 81       	ld	r22, Z
    1a30:	71 81       	ldd	r23, Z+1	; 0x01
    1a32:	82 81       	ldd	r24, Z+2	; 0x02
    1a34:	93 81       	ldd	r25, Z+3	; 0x03
    1a36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	cb 01       	movw	r24, r22
    1a3e:	f8 01       	movw	r30, r16
    1a40:	91 83       	std	Z+1, r25	; 0x01
    1a42:	80 83       	st	Z, r24
    1a44:	de 01       	movw	r26, r28
    1a46:	ad 59       	subi	r26, 0x9D	; 157
    1a48:	bf 4f       	sbci	r27, 0xFF	; 255
    1a4a:	fe 01       	movw	r30, r28
    1a4c:	e9 59       	subi	r30, 0x99	; 153
    1a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a50:	80 81       	ld	r24, Z
    1a52:	91 81       	ldd	r25, Z+1	; 0x01
    1a54:	11 96       	adiw	r26, 0x01	; 1
    1a56:	9c 93       	st	X, r25
    1a58:	8e 93       	st	-X, r24
    1a5a:	fe 01       	movw	r30, r28
    1a5c:	ed 59       	subi	r30, 0x9D	; 157
    1a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a60:	80 81       	ld	r24, Z
    1a62:	91 81       	ldd	r25, Z+1	; 0x01
    1a64:	01 97       	sbiw	r24, 0x01	; 1
    1a66:	f1 f7       	brne	.-4      	; 0x1a64 <main+0x252>
    1a68:	fe 01       	movw	r30, r28
    1a6a:	ed 59       	subi	r30, 0x9D	; 157
    1a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6e:	91 83       	std	Z+1, r25	; 0x01
    1a70:	80 83       	st	Z, r24
    1a72:	df c0       	rjmp	.+446    	; 0x1c32 <main+0x420>
		 _delay_ms(500);

	  		 while(check_value_1st_mode==0 )
	  		 {	 Receive_Password( &enter_password ); /* call func. to receive 1st enter password */
    1a74:	ce 01       	movw	r24, r28
    1a76:	88 58       	subi	r24, 0x88	; 136
    1a78:	9f 4f       	sbci	r25, 0xFF	; 255
    1a7a:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <Receive_Password>
	  		 Write_Password(&enter_password);/* call func.  to write in the external EEPROM */
    1a7e:	ce 01       	movw	r24, r28
    1a80:	88 58       	subi	r24, 0x88	; 136
    1a82:	9f 4f       	sbci	r25, 0xFF	; 255
    1a84:	0e 94 34 06 	call	0xc68	; 0xc68 <Write_Password>


	  		  Receive_Password( &confirm_password ); /*call func. to receive confirm  password */
    1a88:	ce 01       	movw	r24, r28
    1a8a:	83 58       	subi	r24, 0x83	; 131
    1a8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a8e:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <Receive_Password>
	  		  Read_Password( &confirm_password,&enter_password);/* call func. to read from the external EEPROM */
    1a92:	ce 01       	movw	r24, r28
    1a94:	83 58       	subi	r24, 0x83	; 131
    1a96:	9f 4f       	sbci	r25, 0xFF	; 255
    1a98:	9e 01       	movw	r18, r28
    1a9a:	28 58       	subi	r18, 0x88	; 136
    1a9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a9e:	b9 01       	movw	r22, r18
    1aa0:	0e 94 0c 09 	call	0x1218	; 0x1218 <Read_Password>



	  		check_value_1st_mode = Matching_Password( &enter_password , &confirm_password);
    1aa4:	ce 01       	movw	r24, r28
    1aa6:	88 58       	subi	r24, 0x88	; 136
    1aa8:	9f 4f       	sbci	r25, 0xFF	; 255
    1aaa:	9e 01       	movw	r18, r28
    1aac:	23 58       	subi	r18, 0x83	; 131
    1aae:	3f 4f       	sbci	r19, 0xFF	; 255
    1ab0:	b9 01       	movw	r22, r18
    1ab2:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <Matching_Password>
    1ab6:	fe 01       	movw	r30, r28
    1ab8:	ec 58       	subi	r30, 0x8C	; 140
    1aba:	ff 4f       	sbci	r31, 0xFF	; 255
    1abc:	80 83       	st	Z, r24

	  		  UART_sendByte(check_value_1st_mode); //send the check_value  to the first MC using uart
    1abe:	fe 01       	movw	r30, r28
    1ac0:	ec 58       	subi	r30, 0x8C	; 140
    1ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac4:	80 81       	ld	r24, Z
    1ac6:	0e 94 4d 19 	call	0x329a	; 0x329a <UART_sendByte>
    1aca:	fe 01       	movw	r30, r28
    1acc:	e1 5a       	subi	r30, 0xA1	; 161
    1ace:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad0:	80 e0       	ldi	r24, 0x00	; 0
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	aa ef       	ldi	r26, 0xFA	; 250
    1ad6:	b3 e4       	ldi	r27, 0x43	; 67
    1ad8:	80 83       	st	Z, r24
    1ada:	91 83       	std	Z+1, r25	; 0x01
    1adc:	a2 83       	std	Z+2, r26	; 0x02
    1ade:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ae0:	8e 01       	movw	r16, r28
    1ae2:	05 5a       	subi	r16, 0xA5	; 165
    1ae4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ae6:	fe 01       	movw	r30, r28
    1ae8:	e1 5a       	subi	r30, 0xA1	; 161
    1aea:	ff 4f       	sbci	r31, 0xFF	; 255
    1aec:	60 81       	ld	r22, Z
    1aee:	71 81       	ldd	r23, Z+1	; 0x01
    1af0:	82 81       	ldd	r24, Z+2	; 0x02
    1af2:	93 81       	ldd	r25, Z+3	; 0x03
    1af4:	20 e0       	ldi	r18, 0x00	; 0
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	4a ef       	ldi	r20, 0xFA	; 250
    1afa:	54 e4       	ldi	r21, 0x44	; 68
    1afc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b00:	dc 01       	movw	r26, r24
    1b02:	cb 01       	movw	r24, r22
    1b04:	f8 01       	movw	r30, r16
    1b06:	80 83       	st	Z, r24
    1b08:	91 83       	std	Z+1, r25	; 0x01
    1b0a:	a2 83       	std	Z+2, r26	; 0x02
    1b0c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b0e:	fe 01       	movw	r30, r28
    1b10:	e5 5a       	subi	r30, 0xA5	; 165
    1b12:	ff 4f       	sbci	r31, 0xFF	; 255
    1b14:	60 81       	ld	r22, Z
    1b16:	71 81       	ldd	r23, Z+1	; 0x01
    1b18:	82 81       	ldd	r24, Z+2	; 0x02
    1b1a:	93 81       	ldd	r25, Z+3	; 0x03
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	40 e8       	ldi	r20, 0x80	; 128
    1b22:	5f e3       	ldi	r21, 0x3F	; 63
    1b24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b28:	88 23       	and	r24, r24
    1b2a:	44 f4       	brge	.+16     	; 0x1b3c <main+0x32a>
		__ticks = 1;
    1b2c:	fe 01       	movw	r30, r28
    1b2e:	e7 5a       	subi	r30, 0xA7	; 167
    1b30:	ff 4f       	sbci	r31, 0xFF	; 255
    1b32:	81 e0       	ldi	r24, 0x01	; 1
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	91 83       	std	Z+1, r25	; 0x01
    1b38:	80 83       	st	Z, r24
    1b3a:	64 c0       	rjmp	.+200    	; 0x1c04 <main+0x3f2>
	else if (__tmp > 65535)
    1b3c:	fe 01       	movw	r30, r28
    1b3e:	e5 5a       	subi	r30, 0xA5	; 165
    1b40:	ff 4f       	sbci	r31, 0xFF	; 255
    1b42:	60 81       	ld	r22, Z
    1b44:	71 81       	ldd	r23, Z+1	; 0x01
    1b46:	82 81       	ldd	r24, Z+2	; 0x02
    1b48:	93 81       	ldd	r25, Z+3	; 0x03
    1b4a:	20 e0       	ldi	r18, 0x00	; 0
    1b4c:	3f ef       	ldi	r19, 0xFF	; 255
    1b4e:	4f e7       	ldi	r20, 0x7F	; 127
    1b50:	57 e4       	ldi	r21, 0x47	; 71
    1b52:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b56:	18 16       	cp	r1, r24
    1b58:	0c f0       	brlt	.+2      	; 0x1b5c <main+0x34a>
    1b5a:	43 c0       	rjmp	.+134    	; 0x1be2 <main+0x3d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b5c:	fe 01       	movw	r30, r28
    1b5e:	e1 5a       	subi	r30, 0xA1	; 161
    1b60:	ff 4f       	sbci	r31, 0xFF	; 255
    1b62:	60 81       	ld	r22, Z
    1b64:	71 81       	ldd	r23, Z+1	; 0x01
    1b66:	82 81       	ldd	r24, Z+2	; 0x02
    1b68:	93 81       	ldd	r25, Z+3	; 0x03
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	40 e2       	ldi	r20, 0x20	; 32
    1b70:	51 e4       	ldi	r21, 0x41	; 65
    1b72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	8e 01       	movw	r16, r28
    1b7c:	07 5a       	subi	r16, 0xA7	; 167
    1b7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b80:	bc 01       	movw	r22, r24
    1b82:	cd 01       	movw	r24, r26
    1b84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b88:	dc 01       	movw	r26, r24
    1b8a:	cb 01       	movw	r24, r22
    1b8c:	f8 01       	movw	r30, r16
    1b8e:	91 83       	std	Z+1, r25	; 0x01
    1b90:	80 83       	st	Z, r24
    1b92:	1f c0       	rjmp	.+62     	; 0x1bd2 <main+0x3c0>
    1b94:	fe 01       	movw	r30, r28
    1b96:	e9 5a       	subi	r30, 0xA9	; 169
    1b98:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9a:	88 ec       	ldi	r24, 0xC8	; 200
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	91 83       	std	Z+1, r25	; 0x01
    1ba0:	80 83       	st	Z, r24
    1ba2:	fe 01       	movw	r30, r28
    1ba4:	e9 5a       	subi	r30, 0xA9	; 169
    1ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba8:	80 81       	ld	r24, Z
    1baa:	91 81       	ldd	r25, Z+1	; 0x01
    1bac:	01 97       	sbiw	r24, 0x01	; 1
    1bae:	f1 f7       	brne	.-4      	; 0x1bac <main+0x39a>
    1bb0:	fe 01       	movw	r30, r28
    1bb2:	e9 5a       	subi	r30, 0xA9	; 169
    1bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb6:	91 83       	std	Z+1, r25	; 0x01
    1bb8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bba:	de 01       	movw	r26, r28
    1bbc:	a7 5a       	subi	r26, 0xA7	; 167
    1bbe:	bf 4f       	sbci	r27, 0xFF	; 255
    1bc0:	fe 01       	movw	r30, r28
    1bc2:	e7 5a       	subi	r30, 0xA7	; 167
    1bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc6:	80 81       	ld	r24, Z
    1bc8:	91 81       	ldd	r25, Z+1	; 0x01
    1bca:	01 97       	sbiw	r24, 0x01	; 1
    1bcc:	11 96       	adiw	r26, 0x01	; 1
    1bce:	9c 93       	st	X, r25
    1bd0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bd2:	fe 01       	movw	r30, r28
    1bd4:	e7 5a       	subi	r30, 0xA7	; 167
    1bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd8:	80 81       	ld	r24, Z
    1bda:	91 81       	ldd	r25, Z+1	; 0x01
    1bdc:	00 97       	sbiw	r24, 0x00	; 0
    1bde:	d1 f6       	brne	.-76     	; 0x1b94 <main+0x382>
    1be0:	28 c0       	rjmp	.+80     	; 0x1c32 <main+0x420>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1be2:	8e 01       	movw	r16, r28
    1be4:	07 5a       	subi	r16, 0xA7	; 167
    1be6:	1f 4f       	sbci	r17, 0xFF	; 255
    1be8:	fe 01       	movw	r30, r28
    1bea:	e5 5a       	subi	r30, 0xA5	; 165
    1bec:	ff 4f       	sbci	r31, 0xFF	; 255
    1bee:	60 81       	ld	r22, Z
    1bf0:	71 81       	ldd	r23, Z+1	; 0x01
    1bf2:	82 81       	ldd	r24, Z+2	; 0x02
    1bf4:	93 81       	ldd	r25, Z+3	; 0x03
    1bf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	f8 01       	movw	r30, r16
    1c00:	91 83       	std	Z+1, r25	; 0x01
    1c02:	80 83       	st	Z, r24
    1c04:	de 01       	movw	r26, r28
    1c06:	ab 5a       	subi	r26, 0xAB	; 171
    1c08:	bf 4f       	sbci	r27, 0xFF	; 255
    1c0a:	fe 01       	movw	r30, r28
    1c0c:	e7 5a       	subi	r30, 0xA7	; 167
    1c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c10:	80 81       	ld	r24, Z
    1c12:	91 81       	ldd	r25, Z+1	; 0x01
    1c14:	11 96       	adiw	r26, 0x01	; 1
    1c16:	9c 93       	st	X, r25
    1c18:	8e 93       	st	-X, r24
    1c1a:	fe 01       	movw	r30, r28
    1c1c:	eb 5a       	subi	r30, 0xAB	; 171
    1c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c20:	80 81       	ld	r24, Z
    1c22:	91 81       	ldd	r25, Z+1	; 0x01
    1c24:	01 97       	sbiw	r24, 0x01	; 1
    1c26:	f1 f7       	brne	.-4      	; 0x1c24 <main+0x412>
    1c28:	fe 01       	movw	r30, r28
    1c2a:	eb 5a       	subi	r30, 0xAB	; 171
    1c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2e:	91 83       	std	Z+1, r25	; 0x01
    1c30:	80 83       	st	Z, r24
	  check_value_1st_mode = Matching_Password( &enter_password , &confirm_password);

	  UART_sendByte(check_value_1st_mode); //send the check_value  to the first MC using uart
		 _delay_ms(500);

	  		 while(check_value_1st_mode==0 )
    1c32:	fe 01       	movw	r30, r28
    1c34:	ec 58       	subi	r30, 0x8C	; 140
    1c36:	ff 4f       	sbci	r31, 0xFF	; 255
    1c38:	80 81       	ld	r24, Z
    1c3a:	88 23       	and	r24, r24
    1c3c:	09 f4       	brne	.+2      	; 0x1c40 <main+0x42e>
    1c3e:	1a cf       	rjmp	.-460    	; 0x1a74 <main+0x262>
	  		check_value_1st_mode = Matching_Password( &enter_password , &confirm_password);

	  		  UART_sendByte(check_value_1st_mode); //send the check_value  to the first MC using uart
	  			 _delay_ms(500);
	  		 }
		  		EEPROM_writeByte(0x0333,0x00);
    1c40:	83 e3       	ldi	r24, 0x33	; 51
    1c42:	93 e0       	ldi	r25, 0x03	; 3
    1c44:	60 e0       	ldi	r22, 0x00	; 0
    1c46:	0e 94 ef 12 	call	0x25de	; 0x25de <EEPROM_writeByte>
		 UART_sendByte(val); // send 1 by UART to mc1

/********(1st interfacing screen with owner-[1st mode] enter password for 1st time)*************************************************
/****************************************************************************************************************/

	while(val==0xff)
    1c4a:	fe 01       	movw	r30, r28
    1c4c:	e9 57       	subi	r30, 0x79	; 121
    1c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c50:	80 81       	ld	r24, Z
    1c52:	8f 3f       	cpi	r24, 0xFF	; 255
    1c54:	09 f4       	brne	.+2      	; 0x1c58 <main+0x446>
    1c56:	2e ce       	rjmp	.-932    	; 0x18b4 <main+0xa2>
/****************************************************************************************************************/
/******(2st interfacing screen with owner- to select Open Door or Change Password )*************************************************/
	while(1){

		/* emta habd2 f change*/
  		mode = UART_recieveByte(); /* receive the pressed key from uart */
    1c58:	0e 94 64 19 	call	0x32c8	; 0x32c8 <UART_recieveByte>
    1c5c:	fe 01       	movw	r30, r28
    1c5e:	ed 58       	subi	r30, 0x8D	; 141
    1c60:	ff 4f       	sbci	r31, 0xFF	; 255
    1c62:	80 83       	st	Z, r24
  		/*****************************( Open Door mode )*************************************************/

  		if(mode == 1)
    1c64:	fe 01       	movw	r30, r28
    1c66:	ed 58       	subi	r30, 0x8D	; 141
    1c68:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6a:	80 81       	ld	r24, Z
    1c6c:	81 30       	cpi	r24, 0x01	; 1
    1c6e:	09 f0       	breq	.+2      	; 0x1c72 <main+0x460>
    1c70:	12 c2       	rjmp	.+1060   	; 0x2096 <main+0x884>
    1c72:	fe 01       	movw	r30, r28
    1c74:	ef 5a       	subi	r30, 0xAF	; 175
    1c76:	ff 4f       	sbci	r31, 0xFF	; 255
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	90 e4       	ldi	r25, 0x40	; 64
    1c7c:	ac e1       	ldi	r26, 0x1C	; 28
    1c7e:	b5 e4       	ldi	r27, 0x45	; 69
    1c80:	80 83       	st	Z, r24
    1c82:	91 83       	std	Z+1, r25	; 0x01
    1c84:	a2 83       	std	Z+2, r26	; 0x02
    1c86:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c88:	8e 01       	movw	r16, r28
    1c8a:	03 5b       	subi	r16, 0xB3	; 179
    1c8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c8e:	fe 01       	movw	r30, r28
    1c90:	ef 5a       	subi	r30, 0xAF	; 175
    1c92:	ff 4f       	sbci	r31, 0xFF	; 255
    1c94:	60 81       	ld	r22, Z
    1c96:	71 81       	ldd	r23, Z+1	; 0x01
    1c98:	82 81       	ldd	r24, Z+2	; 0x02
    1c9a:	93 81       	ldd	r25, Z+3	; 0x03
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	4a ef       	ldi	r20, 0xFA	; 250
    1ca2:	54 e4       	ldi	r21, 0x44	; 68
    1ca4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca8:	dc 01       	movw	r26, r24
    1caa:	cb 01       	movw	r24, r22
    1cac:	f8 01       	movw	r30, r16
    1cae:	80 83       	st	Z, r24
    1cb0:	91 83       	std	Z+1, r25	; 0x01
    1cb2:	a2 83       	std	Z+2, r26	; 0x02
    1cb4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cb6:	fe 01       	movw	r30, r28
    1cb8:	e3 5b       	subi	r30, 0xB3	; 179
    1cba:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbc:	60 81       	ld	r22, Z
    1cbe:	71 81       	ldd	r23, Z+1	; 0x01
    1cc0:	82 81       	ldd	r24, Z+2	; 0x02
    1cc2:	93 81       	ldd	r25, Z+3	; 0x03
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	40 e8       	ldi	r20, 0x80	; 128
    1cca:	5f e3       	ldi	r21, 0x3F	; 63
    1ccc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cd0:	88 23       	and	r24, r24
    1cd2:	44 f4       	brge	.+16     	; 0x1ce4 <main+0x4d2>
		__ticks = 1;
    1cd4:	fe 01       	movw	r30, r28
    1cd6:	e5 5b       	subi	r30, 0xB5	; 181
    1cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	91 83       	std	Z+1, r25	; 0x01
    1ce0:	80 83       	st	Z, r24
    1ce2:	64 c0       	rjmp	.+200    	; 0x1dac <main+0x59a>
	else if (__tmp > 65535)
    1ce4:	fe 01       	movw	r30, r28
    1ce6:	e3 5b       	subi	r30, 0xB3	; 179
    1ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cea:	60 81       	ld	r22, Z
    1cec:	71 81       	ldd	r23, Z+1	; 0x01
    1cee:	82 81       	ldd	r24, Z+2	; 0x02
    1cf0:	93 81       	ldd	r25, Z+3	; 0x03
    1cf2:	20 e0       	ldi	r18, 0x00	; 0
    1cf4:	3f ef       	ldi	r19, 0xFF	; 255
    1cf6:	4f e7       	ldi	r20, 0x7F	; 127
    1cf8:	57 e4       	ldi	r21, 0x47	; 71
    1cfa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cfe:	18 16       	cp	r1, r24
    1d00:	0c f0       	brlt	.+2      	; 0x1d04 <main+0x4f2>
    1d02:	43 c0       	rjmp	.+134    	; 0x1d8a <main+0x578>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d04:	fe 01       	movw	r30, r28
    1d06:	ef 5a       	subi	r30, 0xAF	; 175
    1d08:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0a:	60 81       	ld	r22, Z
    1d0c:	71 81       	ldd	r23, Z+1	; 0x01
    1d0e:	82 81       	ldd	r24, Z+2	; 0x02
    1d10:	93 81       	ldd	r25, Z+3	; 0x03
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	40 e2       	ldi	r20, 0x20	; 32
    1d18:	51 e4       	ldi	r21, 0x41	; 65
    1d1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	8e 01       	movw	r16, r28
    1d24:	05 5b       	subi	r16, 0xB5	; 181
    1d26:	1f 4f       	sbci	r17, 0xFF	; 255
    1d28:	bc 01       	movw	r22, r24
    1d2a:	cd 01       	movw	r24, r26
    1d2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d30:	dc 01       	movw	r26, r24
    1d32:	cb 01       	movw	r24, r22
    1d34:	f8 01       	movw	r30, r16
    1d36:	91 83       	std	Z+1, r25	; 0x01
    1d38:	80 83       	st	Z, r24
    1d3a:	1f c0       	rjmp	.+62     	; 0x1d7a <main+0x568>
    1d3c:	fe 01       	movw	r30, r28
    1d3e:	e7 5b       	subi	r30, 0xB7	; 183
    1d40:	ff 4f       	sbci	r31, 0xFF	; 255
    1d42:	88 ec       	ldi	r24, 0xC8	; 200
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	91 83       	std	Z+1, r25	; 0x01
    1d48:	80 83       	st	Z, r24
    1d4a:	fe 01       	movw	r30, r28
    1d4c:	e7 5b       	subi	r30, 0xB7	; 183
    1d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d50:	80 81       	ld	r24, Z
    1d52:	91 81       	ldd	r25, Z+1	; 0x01
    1d54:	01 97       	sbiw	r24, 0x01	; 1
    1d56:	f1 f7       	brne	.-4      	; 0x1d54 <main+0x542>
    1d58:	fe 01       	movw	r30, r28
    1d5a:	e7 5b       	subi	r30, 0xB7	; 183
    1d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5e:	91 83       	std	Z+1, r25	; 0x01
    1d60:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d62:	de 01       	movw	r26, r28
    1d64:	a5 5b       	subi	r26, 0xB5	; 181
    1d66:	bf 4f       	sbci	r27, 0xFF	; 255
    1d68:	fe 01       	movw	r30, r28
    1d6a:	e5 5b       	subi	r30, 0xB5	; 181
    1d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6e:	80 81       	ld	r24, Z
    1d70:	91 81       	ldd	r25, Z+1	; 0x01
    1d72:	01 97       	sbiw	r24, 0x01	; 1
    1d74:	11 96       	adiw	r26, 0x01	; 1
    1d76:	9c 93       	st	X, r25
    1d78:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d7a:	fe 01       	movw	r30, r28
    1d7c:	e5 5b       	subi	r30, 0xB5	; 181
    1d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d80:	80 81       	ld	r24, Z
    1d82:	91 81       	ldd	r25, Z+1	; 0x01
    1d84:	00 97       	sbiw	r24, 0x00	; 0
    1d86:	d1 f6       	brne	.-76     	; 0x1d3c <main+0x52a>
    1d88:	27 c0       	rjmp	.+78     	; 0x1dd8 <main+0x5c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d8a:	8e 01       	movw	r16, r28
    1d8c:	05 5b       	subi	r16, 0xB5	; 181
    1d8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d90:	fe 01       	movw	r30, r28
    1d92:	e3 5b       	subi	r30, 0xB3	; 179
    1d94:	ff 4f       	sbci	r31, 0xFF	; 255
    1d96:	60 81       	ld	r22, Z
    1d98:	71 81       	ldd	r23, Z+1	; 0x01
    1d9a:	82 81       	ldd	r24, Z+2	; 0x02
    1d9c:	93 81       	ldd	r25, Z+3	; 0x03
    1d9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da2:	dc 01       	movw	r26, r24
    1da4:	cb 01       	movw	r24, r22
    1da6:	f8 01       	movw	r30, r16
    1da8:	91 83       	std	Z+1, r25	; 0x01
    1daa:	80 83       	st	Z, r24
    1dac:	de 01       	movw	r26, r28
    1dae:	a9 5b       	subi	r26, 0xB9	; 185
    1db0:	bf 4f       	sbci	r27, 0xFF	; 255
    1db2:	fe 01       	movw	r30, r28
    1db4:	e5 5b       	subi	r30, 0xB5	; 181
    1db6:	ff 4f       	sbci	r31, 0xFF	; 255
    1db8:	80 81       	ld	r24, Z
    1dba:	91 81       	ldd	r25, Z+1	; 0x01
    1dbc:	8d 93       	st	X+, r24
    1dbe:	9c 93       	st	X, r25
    1dc0:	fe 01       	movw	r30, r28
    1dc2:	e9 5b       	subi	r30, 0xB9	; 185
    1dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc6:	80 81       	ld	r24, Z
    1dc8:	91 81       	ldd	r25, Z+1	; 0x01
    1dca:	01 97       	sbiw	r24, 0x01	; 1
    1dcc:	f1 f7       	brne	.-4      	; 0x1dca <main+0x5b8>
    1dce:	fe 01       	movw	r30, r28
    1dd0:	e9 5b       	subi	r30, 0xB9	; 185
    1dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd4:	91 83       	std	Z+1, r25	; 0x01
    1dd6:	80 83       	st	Z, r24
  		{
   		   _delay_ms(2500);

   	    	 Receive_Password( &saved_password ); /* call func. to receive 1st enter password */
    1dd8:	ce 01       	movw	r24, r28
    1dda:	8e 57       	subi	r24, 0x7E	; 126
    1ddc:	9f 4f       	sbci	r25, 0xFF	; 255
    1dde:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <Receive_Password>
   	    	 Read_Password( &saved_password,&enter_password);/* call func. to read from the external EEPROM */
    1de2:	ce 01       	movw	r24, r28
    1de4:	8e 57       	subi	r24, 0x7E	; 126
    1de6:	9f 4f       	sbci	r25, 0xFF	; 255
    1de8:	9e 01       	movw	r18, r28
    1dea:	28 58       	subi	r18, 0x88	; 136
    1dec:	3f 4f       	sbci	r19, 0xFF	; 255
    1dee:	b9 01       	movw	r22, r18
    1df0:	0e 94 0c 09 	call	0x1218	; 0x1218 <Read_Password>

   	    	 saved_password_value = Matching_Password( &enter_password , &saved_password);
    1df4:	ce 01       	movw	r24, r28
    1df6:	88 58       	subi	r24, 0x88	; 136
    1df8:	9f 4f       	sbci	r25, 0xFF	; 255
    1dfa:	9e 01       	movw	r18, r28
    1dfc:	2e 57       	subi	r18, 0x7E	; 126
    1dfe:	3f 4f       	sbci	r19, 0xFF	; 255
    1e00:	b9 01       	movw	r22, r18
    1e02:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <Matching_Password>
    1e06:	fe 01       	movw	r30, r28
    1e08:	ee 58       	subi	r30, 0x8E	; 142
    1e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0c:	80 83       	st	Z, r24

   	     	 UART_sendByte(saved_password_value); //send the check_value  to the first MC using uart
    1e0e:	fe 01       	movw	r30, r28
    1e10:	ee 58       	subi	r30, 0x8E	; 142
    1e12:	ff 4f       	sbci	r31, 0xFF	; 255
    1e14:	80 81       	ld	r24, Z
    1e16:	0e 94 4d 19 	call	0x329a	; 0x329a <UART_sendByte>
    1e1a:	fe 01       	movw	r30, r28
    1e1c:	ed 5b       	subi	r30, 0xBD	; 189
    1e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e20:	80 e0       	ldi	r24, 0x00	; 0
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	aa ef       	ldi	r26, 0xFA	; 250
    1e26:	b3 e4       	ldi	r27, 0x43	; 67
    1e28:	80 83       	st	Z, r24
    1e2a:	91 83       	std	Z+1, r25	; 0x01
    1e2c:	a2 83       	std	Z+2, r26	; 0x02
    1e2e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e30:	8e 01       	movw	r16, r28
    1e32:	01 5c       	subi	r16, 0xC1	; 193
    1e34:	1f 4f       	sbci	r17, 0xFF	; 255
    1e36:	fe 01       	movw	r30, r28
    1e38:	ed 5b       	subi	r30, 0xBD	; 189
    1e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3c:	60 81       	ld	r22, Z
    1e3e:	71 81       	ldd	r23, Z+1	; 0x01
    1e40:	82 81       	ldd	r24, Z+2	; 0x02
    1e42:	93 81       	ldd	r25, Z+3	; 0x03
    1e44:	20 e0       	ldi	r18, 0x00	; 0
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	4a ef       	ldi	r20, 0xFA	; 250
    1e4a:	54 e4       	ldi	r21, 0x44	; 68
    1e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	f8 01       	movw	r30, r16
    1e56:	80 83       	st	Z, r24
    1e58:	91 83       	std	Z+1, r25	; 0x01
    1e5a:	a2 83       	std	Z+2, r26	; 0x02
    1e5c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e5e:	fe 01       	movw	r30, r28
    1e60:	ff 96       	adiw	r30, 0x3f	; 63
    1e62:	60 81       	ld	r22, Z
    1e64:	71 81       	ldd	r23, Z+1	; 0x01
    1e66:	82 81       	ldd	r24, Z+2	; 0x02
    1e68:	93 81       	ldd	r25, Z+3	; 0x03
    1e6a:	20 e0       	ldi	r18, 0x00	; 0
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	40 e8       	ldi	r20, 0x80	; 128
    1e70:	5f e3       	ldi	r21, 0x3F	; 63
    1e72:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e76:	88 23       	and	r24, r24
    1e78:	2c f4       	brge	.+10     	; 0x1e84 <main+0x672>
		__ticks = 1;
    1e7a:	81 e0       	ldi	r24, 0x01	; 1
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	9e af       	std	Y+62, r25	; 0x3e
    1e80:	8d af       	std	Y+61, r24	; 0x3d
    1e82:	46 c0       	rjmp	.+140    	; 0x1f10 <main+0x6fe>
	else if (__tmp > 65535)
    1e84:	fe 01       	movw	r30, r28
    1e86:	ff 96       	adiw	r30, 0x3f	; 63
    1e88:	60 81       	ld	r22, Z
    1e8a:	71 81       	ldd	r23, Z+1	; 0x01
    1e8c:	82 81       	ldd	r24, Z+2	; 0x02
    1e8e:	93 81       	ldd	r25, Z+3	; 0x03
    1e90:	20 e0       	ldi	r18, 0x00	; 0
    1e92:	3f ef       	ldi	r19, 0xFF	; 255
    1e94:	4f e7       	ldi	r20, 0x7F	; 127
    1e96:	57 e4       	ldi	r21, 0x47	; 71
    1e98:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e9c:	18 16       	cp	r1, r24
    1e9e:	64 f5       	brge	.+88     	; 0x1ef8 <main+0x6e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ea0:	fe 01       	movw	r30, r28
    1ea2:	ed 5b       	subi	r30, 0xBD	; 189
    1ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea6:	60 81       	ld	r22, Z
    1ea8:	71 81       	ldd	r23, Z+1	; 0x01
    1eaa:	82 81       	ldd	r24, Z+2	; 0x02
    1eac:	93 81       	ldd	r25, Z+3	; 0x03
    1eae:	20 e0       	ldi	r18, 0x00	; 0
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	40 e2       	ldi	r20, 0x20	; 32
    1eb4:	51 e4       	ldi	r21, 0x41	; 65
    1eb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eba:	dc 01       	movw	r26, r24
    1ebc:	cb 01       	movw	r24, r22
    1ebe:	bc 01       	movw	r22, r24
    1ec0:	cd 01       	movw	r24, r26
    1ec2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec6:	dc 01       	movw	r26, r24
    1ec8:	cb 01       	movw	r24, r22
    1eca:	9e af       	std	Y+62, r25	; 0x3e
    1ecc:	8d af       	std	Y+61, r24	; 0x3d
    1ece:	0f c0       	rjmp	.+30     	; 0x1eee <main+0x6dc>
    1ed0:	88 ec       	ldi	r24, 0xC8	; 200
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	9c af       	std	Y+60, r25	; 0x3c
    1ed6:	8b af       	std	Y+59, r24	; 0x3b
    1ed8:	8b ad       	ldd	r24, Y+59	; 0x3b
    1eda:	9c ad       	ldd	r25, Y+60	; 0x3c
    1edc:	01 97       	sbiw	r24, 0x01	; 1
    1ede:	f1 f7       	brne	.-4      	; 0x1edc <main+0x6ca>
    1ee0:	9c af       	std	Y+60, r25	; 0x3c
    1ee2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ee4:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ee6:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ee8:	01 97       	sbiw	r24, 0x01	; 1
    1eea:	9e af       	std	Y+62, r25	; 0x3e
    1eec:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eee:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ef0:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ef2:	00 97       	sbiw	r24, 0x00	; 0
    1ef4:	69 f7       	brne	.-38     	; 0x1ed0 <main+0x6be>
    1ef6:	c7 c0       	rjmp	.+398    	; 0x2086 <main+0x874>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ef8:	fe 01       	movw	r30, r28
    1efa:	ff 96       	adiw	r30, 0x3f	; 63
    1efc:	60 81       	ld	r22, Z
    1efe:	71 81       	ldd	r23, Z+1	; 0x01
    1f00:	82 81       	ldd	r24, Z+2	; 0x02
    1f02:	93 81       	ldd	r25, Z+3	; 0x03
    1f04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f08:	dc 01       	movw	r26, r24
    1f0a:	cb 01       	movw	r24, r22
    1f0c:	9e af       	std	Y+62, r25	; 0x3e
    1f0e:	8d af       	std	Y+61, r24	; 0x3d
    1f10:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f12:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f14:	9a af       	std	Y+58, r25	; 0x3a
    1f16:	89 af       	std	Y+57, r24	; 0x39
    1f18:	89 ad       	ldd	r24, Y+57	; 0x39
    1f1a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f1c:	01 97       	sbiw	r24, 0x01	; 1
    1f1e:	f1 f7       	brne	.-4      	; 0x1f1c <main+0x70a>
    1f20:	9a af       	std	Y+58, r25	; 0x3a
    1f22:	89 af       	std	Y+57, r24	; 0x39
    1f24:	b0 c0       	rjmp	.+352    	; 0x2086 <main+0x874>
   	  		 _delay_ms(500);

   	  		 while (saved_password_value==0) /*the old password is Wrong*/
   	  		 {
   	  	    	 Receive_Password( &saved_password ); /* call func. to receive 1st enter password */
    1f26:	ce 01       	movw	r24, r28
    1f28:	8e 57       	subi	r24, 0x7E	; 126
    1f2a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f2c:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <Receive_Password>
   	  	    	 Read_Password( &saved_password,&enter_password);/* call func. to read from the external EEPROM */
    1f30:	ce 01       	movw	r24, r28
    1f32:	8e 57       	subi	r24, 0x7E	; 126
    1f34:	9f 4f       	sbci	r25, 0xFF	; 255
    1f36:	9e 01       	movw	r18, r28
    1f38:	28 58       	subi	r18, 0x88	; 136
    1f3a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f3c:	b9 01       	movw	r22, r18
    1f3e:	0e 94 0c 09 	call	0x1218	; 0x1218 <Read_Password>

   	  	    	 saved_password_value = Matching_Password( &enter_password , &saved_password);
    1f42:	ce 01       	movw	r24, r28
    1f44:	88 58       	subi	r24, 0x88	; 136
    1f46:	9f 4f       	sbci	r25, 0xFF	; 255
    1f48:	9e 01       	movw	r18, r28
    1f4a:	2e 57       	subi	r18, 0x7E	; 126
    1f4c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f4e:	b9 01       	movw	r22, r18
    1f50:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <Matching_Password>
    1f54:	fe 01       	movw	r30, r28
    1f56:	ee 58       	subi	r30, 0x8E	; 142
    1f58:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5a:	80 83       	st	Z, r24

   	  	     	 UART_sendByte(saved_password_value); //send the check_value  to the first MC using uart
    1f5c:	fe 01       	movw	r30, r28
    1f5e:	ee 58       	subi	r30, 0x8E	; 142
    1f60:	ff 4f       	sbci	r31, 0xFF	; 255
    1f62:	80 81       	ld	r24, Z
    1f64:	0e 94 4d 19 	call	0x329a	; 0x329a <UART_sendByte>
    1f68:	80 e0       	ldi	r24, 0x00	; 0
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	aa ef       	ldi	r26, 0xFA	; 250
    1f6e:	b3 e4       	ldi	r27, 0x43	; 67
    1f70:	8d ab       	std	Y+53, r24	; 0x35
    1f72:	9e ab       	std	Y+54, r25	; 0x36
    1f74:	af ab       	std	Y+55, r26	; 0x37
    1f76:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f78:	6d a9       	ldd	r22, Y+53	; 0x35
    1f7a:	7e a9       	ldd	r23, Y+54	; 0x36
    1f7c:	8f a9       	ldd	r24, Y+55	; 0x37
    1f7e:	98 ad       	ldd	r25, Y+56	; 0x38
    1f80:	20 e0       	ldi	r18, 0x00	; 0
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	4a ef       	ldi	r20, 0xFA	; 250
    1f86:	54 e4       	ldi	r21, 0x44	; 68
    1f88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f8c:	dc 01       	movw	r26, r24
    1f8e:	cb 01       	movw	r24, r22
    1f90:	89 ab       	std	Y+49, r24	; 0x31
    1f92:	9a ab       	std	Y+50, r25	; 0x32
    1f94:	ab ab       	std	Y+51, r26	; 0x33
    1f96:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f98:	69 a9       	ldd	r22, Y+49	; 0x31
    1f9a:	7a a9       	ldd	r23, Y+50	; 0x32
    1f9c:	8b a9       	ldd	r24, Y+51	; 0x33
    1f9e:	9c a9       	ldd	r25, Y+52	; 0x34
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	40 e8       	ldi	r20, 0x80	; 128
    1fa6:	5f e3       	ldi	r21, 0x3F	; 63
    1fa8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fac:	88 23       	and	r24, r24
    1fae:	2c f4       	brge	.+10     	; 0x1fba <main+0x7a8>
		__ticks = 1;
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	98 ab       	std	Y+48, r25	; 0x30
    1fb6:	8f a7       	std	Y+47, r24	; 0x2f
    1fb8:	3f c0       	rjmp	.+126    	; 0x2038 <main+0x826>
	else if (__tmp > 65535)
    1fba:	69 a9       	ldd	r22, Y+49	; 0x31
    1fbc:	7a a9       	ldd	r23, Y+50	; 0x32
    1fbe:	8b a9       	ldd	r24, Y+51	; 0x33
    1fc0:	9c a9       	ldd	r25, Y+52	; 0x34
    1fc2:	20 e0       	ldi	r18, 0x00	; 0
    1fc4:	3f ef       	ldi	r19, 0xFF	; 255
    1fc6:	4f e7       	ldi	r20, 0x7F	; 127
    1fc8:	57 e4       	ldi	r21, 0x47	; 71
    1fca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fce:	18 16       	cp	r1, r24
    1fd0:	4c f5       	brge	.+82     	; 0x2024 <main+0x812>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fd2:	6d a9       	ldd	r22, Y+53	; 0x35
    1fd4:	7e a9       	ldd	r23, Y+54	; 0x36
    1fd6:	8f a9       	ldd	r24, Y+55	; 0x37
    1fd8:	98 ad       	ldd	r25, Y+56	; 0x38
    1fda:	20 e0       	ldi	r18, 0x00	; 0
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	40 e2       	ldi	r20, 0x20	; 32
    1fe0:	51 e4       	ldi	r21, 0x41	; 65
    1fe2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	bc 01       	movw	r22, r24
    1fec:	cd 01       	movw	r24, r26
    1fee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff2:	dc 01       	movw	r26, r24
    1ff4:	cb 01       	movw	r24, r22
    1ff6:	98 ab       	std	Y+48, r25	; 0x30
    1ff8:	8f a7       	std	Y+47, r24	; 0x2f
    1ffa:	0f c0       	rjmp	.+30     	; 0x201a <main+0x808>
    1ffc:	88 ec       	ldi	r24, 0xC8	; 200
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	9e a7       	std	Y+46, r25	; 0x2e
    2002:	8d a7       	std	Y+45, r24	; 0x2d
    2004:	8d a5       	ldd	r24, Y+45	; 0x2d
    2006:	9e a5       	ldd	r25, Y+46	; 0x2e
    2008:	01 97       	sbiw	r24, 0x01	; 1
    200a:	f1 f7       	brne	.-4      	; 0x2008 <main+0x7f6>
    200c:	9e a7       	std	Y+46, r25	; 0x2e
    200e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2010:	8f a5       	ldd	r24, Y+47	; 0x2f
    2012:	98 a9       	ldd	r25, Y+48	; 0x30
    2014:	01 97       	sbiw	r24, 0x01	; 1
    2016:	98 ab       	std	Y+48, r25	; 0x30
    2018:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    201a:	8f a5       	ldd	r24, Y+47	; 0x2f
    201c:	98 a9       	ldd	r25, Y+48	; 0x30
    201e:	00 97       	sbiw	r24, 0x00	; 0
    2020:	69 f7       	brne	.-38     	; 0x1ffc <main+0x7ea>
    2022:	14 c0       	rjmp	.+40     	; 0x204c <main+0x83a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2024:	69 a9       	ldd	r22, Y+49	; 0x31
    2026:	7a a9       	ldd	r23, Y+50	; 0x32
    2028:	8b a9       	ldd	r24, Y+51	; 0x33
    202a:	9c a9       	ldd	r25, Y+52	; 0x34
    202c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2030:	dc 01       	movw	r26, r24
    2032:	cb 01       	movw	r24, r22
    2034:	98 ab       	std	Y+48, r25	; 0x30
    2036:	8f a7       	std	Y+47, r24	; 0x2f
    2038:	8f a5       	ldd	r24, Y+47	; 0x2f
    203a:	98 a9       	ldd	r25, Y+48	; 0x30
    203c:	9c a7       	std	Y+44, r25	; 0x2c
    203e:	8b a7       	std	Y+43, r24	; 0x2b
    2040:	8b a5       	ldd	r24, Y+43	; 0x2b
    2042:	9c a5       	ldd	r25, Y+44	; 0x2c
    2044:	01 97       	sbiw	r24, 0x01	; 1
    2046:	f1 f7       	brne	.-4      	; 0x2044 <main+0x832>
    2048:	9c a7       	std	Y+44, r25	; 0x2c
    204a:	8b a7       	std	Y+43, r24	; 0x2b
   	  	  		 _delay_ms(500);
   	  	  	if (saved_password_value==1) /*the old password is correct*/
    204c:	fe 01       	movw	r30, r28
    204e:	ee 58       	subi	r30, 0x8E	; 142
    2050:	ff 4f       	sbci	r31, 0xFF	; 255
    2052:	80 81       	ld	r24, Z
    2054:	81 30       	cpi	r24, 0x01	; 1
    2056:	b9 f4       	brne	.+46     	; 0x2086 <main+0x874>
   	  	  	{ /* now, you will open the door (turn on the motor)*/

   				PORTC &= (~(1<<PC3));
    2058:	a5 e3       	ldi	r26, 0x35	; 53
    205a:	b0 e0       	ldi	r27, 0x00	; 0
    205c:	e5 e3       	ldi	r30, 0x35	; 53
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	80 81       	ld	r24, Z
    2062:	87 7f       	andi	r24, 0xF7	; 247
    2064:	8c 93       	st	X, r24
   				PORTC |= (1<<PC2);
    2066:	a5 e3       	ldi	r26, 0x35	; 53
    2068:	b0 e0       	ldi	r27, 0x00	; 0
    206a:	e5 e3       	ldi	r30, 0x35	; 53
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	80 81       	ld	r24, Z
    2070:	84 60       	ori	r24, 0x04	; 4
    2072:	8c 93       	st	X, r24

   	  	  		Timer_init(&Timer_Config);
    2074:	ce 01       	movw	r24, r28
    2076:	88 57       	subi	r24, 0x78	; 120
    2078:	9f 4f       	sbci	r25, 0xFF	; 255
    207a:	0e 94 69 12 	call	0x24d2	; 0x24d2 <Timer_init>

   	  		/* Set the Call back function pointer in the Timer driver */
   	  		Timer_setCallBack(APP_Timer);
    207e:	83 ea       	ldi	r24, 0xA3	; 163
    2080:	95 e0       	ldi	r25, 0x05	; 5
    2082:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <Timer_setCallBack>
   	    	 saved_password_value = Matching_Password( &enter_password , &saved_password);

   	     	 UART_sendByte(saved_password_value); //send the check_value  to the first MC using uart
   	  		 _delay_ms(500);

   	  		 while (saved_password_value==0) /*the old password is Wrong*/
    2086:	fe 01       	movw	r30, r28
    2088:	ee 58       	subi	r30, 0x8E	; 142
    208a:	ff 4f       	sbci	r31, 0xFF	; 255
    208c:	80 81       	ld	r24, Z
    208e:	88 23       	and	r24, r24
    2090:	09 f4       	brne	.+2      	; 0x2094 <main+0x882>
    2092:	49 cf       	rjmp	.-366    	; 0x1f26 <main+0x714>
    2094:	e1 cd       	rjmp	.-1086   	; 0x1c58 <main+0x446>
   	  	  	}
   	  	}
		}
 /*****************************( change password mode )*************************************************/

  		else if(mode == 0)
    2096:	fe 01       	movw	r30, r28
    2098:	ed 58       	subi	r30, 0x8D	; 141
    209a:	ff 4f       	sbci	r31, 0xFF	; 255
    209c:	80 81       	ld	r24, Z
    209e:	88 23       	and	r24, r24
    20a0:	09 f0       	breq	.+2      	; 0x20a4 <main+0x892>
    20a2:	da cd       	rjmp	.-1100   	; 0x1c58 <main+0x446>
    20a4:	80 e0       	ldi	r24, 0x00	; 0
    20a6:	90 e4       	ldi	r25, 0x40	; 64
    20a8:	ac e1       	ldi	r26, 0x1C	; 28
    20aa:	b5 e4       	ldi	r27, 0x45	; 69
    20ac:	8f a3       	std	Y+39, r24	; 0x27
    20ae:	98 a7       	std	Y+40, r25	; 0x28
    20b0:	a9 a7       	std	Y+41, r26	; 0x29
    20b2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20b4:	6f a1       	ldd	r22, Y+39	; 0x27
    20b6:	78 a5       	ldd	r23, Y+40	; 0x28
    20b8:	89 a5       	ldd	r24, Y+41	; 0x29
    20ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    20bc:	20 e0       	ldi	r18, 0x00	; 0
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	4a ef       	ldi	r20, 0xFA	; 250
    20c2:	54 e4       	ldi	r21, 0x44	; 68
    20c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c8:	dc 01       	movw	r26, r24
    20ca:	cb 01       	movw	r24, r22
    20cc:	8b a3       	std	Y+35, r24	; 0x23
    20ce:	9c a3       	std	Y+36, r25	; 0x24
    20d0:	ad a3       	std	Y+37, r26	; 0x25
    20d2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20d4:	6b a1       	ldd	r22, Y+35	; 0x23
    20d6:	7c a1       	ldd	r23, Y+36	; 0x24
    20d8:	8d a1       	ldd	r24, Y+37	; 0x25
    20da:	9e a1       	ldd	r25, Y+38	; 0x26
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	40 e8       	ldi	r20, 0x80	; 128
    20e2:	5f e3       	ldi	r21, 0x3F	; 63
    20e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20e8:	88 23       	and	r24, r24
    20ea:	2c f4       	brge	.+10     	; 0x20f6 <main+0x8e4>
		__ticks = 1;
    20ec:	81 e0       	ldi	r24, 0x01	; 1
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	9a a3       	std	Y+34, r25	; 0x22
    20f2:	89 a3       	std	Y+33, r24	; 0x21
    20f4:	3f c0       	rjmp	.+126    	; 0x2174 <main+0x962>
	else if (__tmp > 65535)
    20f6:	6b a1       	ldd	r22, Y+35	; 0x23
    20f8:	7c a1       	ldd	r23, Y+36	; 0x24
    20fa:	8d a1       	ldd	r24, Y+37	; 0x25
    20fc:	9e a1       	ldd	r25, Y+38	; 0x26
    20fe:	20 e0       	ldi	r18, 0x00	; 0
    2100:	3f ef       	ldi	r19, 0xFF	; 255
    2102:	4f e7       	ldi	r20, 0x7F	; 127
    2104:	57 e4       	ldi	r21, 0x47	; 71
    2106:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    210a:	18 16       	cp	r1, r24
    210c:	4c f5       	brge	.+82     	; 0x2160 <main+0x94e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    210e:	6f a1       	ldd	r22, Y+39	; 0x27
    2110:	78 a5       	ldd	r23, Y+40	; 0x28
    2112:	89 a5       	ldd	r24, Y+41	; 0x29
    2114:	9a a5       	ldd	r25, Y+42	; 0x2a
    2116:	20 e0       	ldi	r18, 0x00	; 0
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	40 e2       	ldi	r20, 0x20	; 32
    211c:	51 e4       	ldi	r21, 0x41	; 65
    211e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2122:	dc 01       	movw	r26, r24
    2124:	cb 01       	movw	r24, r22
    2126:	bc 01       	movw	r22, r24
    2128:	cd 01       	movw	r24, r26
    212a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    212e:	dc 01       	movw	r26, r24
    2130:	cb 01       	movw	r24, r22
    2132:	9a a3       	std	Y+34, r25	; 0x22
    2134:	89 a3       	std	Y+33, r24	; 0x21
    2136:	0f c0       	rjmp	.+30     	; 0x2156 <main+0x944>
    2138:	88 ec       	ldi	r24, 0xC8	; 200
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	98 a3       	std	Y+32, r25	; 0x20
    213e:	8f 8f       	std	Y+31, r24	; 0x1f
    2140:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2142:	98 a1       	ldd	r25, Y+32	; 0x20
    2144:	01 97       	sbiw	r24, 0x01	; 1
    2146:	f1 f7       	brne	.-4      	; 0x2144 <main+0x932>
    2148:	98 a3       	std	Y+32, r25	; 0x20
    214a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    214c:	89 a1       	ldd	r24, Y+33	; 0x21
    214e:	9a a1       	ldd	r25, Y+34	; 0x22
    2150:	01 97       	sbiw	r24, 0x01	; 1
    2152:	9a a3       	std	Y+34, r25	; 0x22
    2154:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2156:	89 a1       	ldd	r24, Y+33	; 0x21
    2158:	9a a1       	ldd	r25, Y+34	; 0x22
    215a:	00 97       	sbiw	r24, 0x00	; 0
    215c:	69 f7       	brne	.-38     	; 0x2138 <main+0x926>
    215e:	14 c0       	rjmp	.+40     	; 0x2188 <main+0x976>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2160:	6b a1       	ldd	r22, Y+35	; 0x23
    2162:	7c a1       	ldd	r23, Y+36	; 0x24
    2164:	8d a1       	ldd	r24, Y+37	; 0x25
    2166:	9e a1       	ldd	r25, Y+38	; 0x26
    2168:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	9a a3       	std	Y+34, r25	; 0x22
    2172:	89 a3       	std	Y+33, r24	; 0x21
    2174:	89 a1       	ldd	r24, Y+33	; 0x21
    2176:	9a a1       	ldd	r25, Y+34	; 0x22
    2178:	9e 8f       	std	Y+30, r25	; 0x1e
    217a:	8d 8f       	std	Y+29, r24	; 0x1d
    217c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    217e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2180:	01 97       	sbiw	r24, 0x01	; 1
    2182:	f1 f7       	brne	.-4      	; 0x2180 <main+0x96e>
    2184:	9e 8f       	std	Y+30, r25	; 0x1e
    2186:	8d 8f       	std	Y+29, r24	; 0x1d
  		 {
  		   _delay_ms(2500);

  	    	 Receive_Password( &saved_password ); /* call func. to receive 1st enter password */
    2188:	ce 01       	movw	r24, r28
    218a:	8e 57       	subi	r24, 0x7E	; 126
    218c:	9f 4f       	sbci	r25, 0xFF	; 255
    218e:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <Receive_Password>
  	    	 Read_Password( &saved_password,&enter_password);/* call func. to read from the external EEPROM */
    2192:	ce 01       	movw	r24, r28
    2194:	8e 57       	subi	r24, 0x7E	; 126
    2196:	9f 4f       	sbci	r25, 0xFF	; 255
    2198:	9e 01       	movw	r18, r28
    219a:	28 58       	subi	r18, 0x88	; 136
    219c:	3f 4f       	sbci	r19, 0xFF	; 255
    219e:	b9 01       	movw	r22, r18
    21a0:	0e 94 0c 09 	call	0x1218	; 0x1218 <Read_Password>

  	    	 saved_password_value = Matching_Password( &enter_password , &saved_password);
    21a4:	ce 01       	movw	r24, r28
    21a6:	88 58       	subi	r24, 0x88	; 136
    21a8:	9f 4f       	sbci	r25, 0xFF	; 255
    21aa:	9e 01       	movw	r18, r28
    21ac:	2e 57       	subi	r18, 0x7E	; 126
    21ae:	3f 4f       	sbci	r19, 0xFF	; 255
    21b0:	b9 01       	movw	r22, r18
    21b2:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <Matching_Password>
    21b6:	fe 01       	movw	r30, r28
    21b8:	ee 58       	subi	r30, 0x8E	; 142
    21ba:	ff 4f       	sbci	r31, 0xFF	; 255
    21bc:	80 83       	st	Z, r24

  	     	 UART_sendByte(saved_password_value); //send the check_value  to the first MC using uart
    21be:	fe 01       	movw	r30, r28
    21c0:	ee 58       	subi	r30, 0x8E	; 142
    21c2:	ff 4f       	sbci	r31, 0xFF	; 255
    21c4:	80 81       	ld	r24, Z
    21c6:	0e 94 4d 19 	call	0x329a	; 0x329a <UART_sendByte>
    21ca:	80 e0       	ldi	r24, 0x00	; 0
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	aa ef       	ldi	r26, 0xFA	; 250
    21d0:	b3 e4       	ldi	r27, 0x43	; 67
    21d2:	89 8f       	std	Y+25, r24	; 0x19
    21d4:	9a 8f       	std	Y+26, r25	; 0x1a
    21d6:	ab 8f       	std	Y+27, r26	; 0x1b
    21d8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21da:	69 8d       	ldd	r22, Y+25	; 0x19
    21dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21e2:	20 e0       	ldi	r18, 0x00	; 0
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	4a ef       	ldi	r20, 0xFA	; 250
    21e8:	54 e4       	ldi	r21, 0x44	; 68
    21ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ee:	dc 01       	movw	r26, r24
    21f0:	cb 01       	movw	r24, r22
    21f2:	8d 8b       	std	Y+21, r24	; 0x15
    21f4:	9e 8b       	std	Y+22, r25	; 0x16
    21f6:	af 8b       	std	Y+23, r26	; 0x17
    21f8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21fa:	6d 89       	ldd	r22, Y+21	; 0x15
    21fc:	7e 89       	ldd	r23, Y+22	; 0x16
    21fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2200:	98 8d       	ldd	r25, Y+24	; 0x18
    2202:	20 e0       	ldi	r18, 0x00	; 0
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	40 e8       	ldi	r20, 0x80	; 128
    2208:	5f e3       	ldi	r21, 0x3F	; 63
    220a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    220e:	88 23       	and	r24, r24
    2210:	2c f4       	brge	.+10     	; 0x221c <main+0xa0a>
		__ticks = 1;
    2212:	81 e0       	ldi	r24, 0x01	; 1
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	9c 8b       	std	Y+20, r25	; 0x14
    2218:	8b 8b       	std	Y+19, r24	; 0x13
    221a:	3f c0       	rjmp	.+126    	; 0x229a <main+0xa88>
	else if (__tmp > 65535)
    221c:	6d 89       	ldd	r22, Y+21	; 0x15
    221e:	7e 89       	ldd	r23, Y+22	; 0x16
    2220:	8f 89       	ldd	r24, Y+23	; 0x17
    2222:	98 8d       	ldd	r25, Y+24	; 0x18
    2224:	20 e0       	ldi	r18, 0x00	; 0
    2226:	3f ef       	ldi	r19, 0xFF	; 255
    2228:	4f e7       	ldi	r20, 0x7F	; 127
    222a:	57 e4       	ldi	r21, 0x47	; 71
    222c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2230:	18 16       	cp	r1, r24
    2232:	4c f5       	brge	.+82     	; 0x2286 <main+0xa74>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2234:	69 8d       	ldd	r22, Y+25	; 0x19
    2236:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2238:	8b 8d       	ldd	r24, Y+27	; 0x1b
    223a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    223c:	20 e0       	ldi	r18, 0x00	; 0
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	40 e2       	ldi	r20, 0x20	; 32
    2242:	51 e4       	ldi	r21, 0x41	; 65
    2244:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2248:	dc 01       	movw	r26, r24
    224a:	cb 01       	movw	r24, r22
    224c:	bc 01       	movw	r22, r24
    224e:	cd 01       	movw	r24, r26
    2250:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2254:	dc 01       	movw	r26, r24
    2256:	cb 01       	movw	r24, r22
    2258:	9c 8b       	std	Y+20, r25	; 0x14
    225a:	8b 8b       	std	Y+19, r24	; 0x13
    225c:	0f c0       	rjmp	.+30     	; 0x227c <main+0xa6a>
    225e:	88 ec       	ldi	r24, 0xC8	; 200
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	9a 8b       	std	Y+18, r25	; 0x12
    2264:	89 8b       	std	Y+17, r24	; 0x11
    2266:	89 89       	ldd	r24, Y+17	; 0x11
    2268:	9a 89       	ldd	r25, Y+18	; 0x12
    226a:	01 97       	sbiw	r24, 0x01	; 1
    226c:	f1 f7       	brne	.-4      	; 0x226a <main+0xa58>
    226e:	9a 8b       	std	Y+18, r25	; 0x12
    2270:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2272:	8b 89       	ldd	r24, Y+19	; 0x13
    2274:	9c 89       	ldd	r25, Y+20	; 0x14
    2276:	01 97       	sbiw	r24, 0x01	; 1
    2278:	9c 8b       	std	Y+20, r25	; 0x14
    227a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    227c:	8b 89       	ldd	r24, Y+19	; 0x13
    227e:	9c 89       	ldd	r25, Y+20	; 0x14
    2280:	00 97       	sbiw	r24, 0x00	; 0
    2282:	69 f7       	brne	.-38     	; 0x225e <main+0xa4c>
    2284:	b8 c0       	rjmp	.+368    	; 0x23f6 <main+0xbe4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2286:	6d 89       	ldd	r22, Y+21	; 0x15
    2288:	7e 89       	ldd	r23, Y+22	; 0x16
    228a:	8f 89       	ldd	r24, Y+23	; 0x17
    228c:	98 8d       	ldd	r25, Y+24	; 0x18
    228e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2292:	dc 01       	movw	r26, r24
    2294:	cb 01       	movw	r24, r22
    2296:	9c 8b       	std	Y+20, r25	; 0x14
    2298:	8b 8b       	std	Y+19, r24	; 0x13
    229a:	8b 89       	ldd	r24, Y+19	; 0x13
    229c:	9c 89       	ldd	r25, Y+20	; 0x14
    229e:	98 8b       	std	Y+16, r25	; 0x10
    22a0:	8f 87       	std	Y+15, r24	; 0x0f
    22a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    22a4:	98 89       	ldd	r25, Y+16	; 0x10
    22a6:	01 97       	sbiw	r24, 0x01	; 1
    22a8:	f1 f7       	brne	.-4      	; 0x22a6 <main+0xa94>
    22aa:	98 8b       	std	Y+16, r25	; 0x10
    22ac:	8f 87       	std	Y+15, r24	; 0x0f
    22ae:	a3 c0       	rjmp	.+326    	; 0x23f6 <main+0xbe4>
  	  		 _delay_ms(500);

  	  		 while (saved_password_value==0)/*the old password is correct*/
  	  		 {

  	  	    	 Receive_Password( &saved_password ); /* call func. to receive 1st enter password */
    22b0:	ce 01       	movw	r24, r28
    22b2:	8e 57       	subi	r24, 0x7E	; 126
    22b4:	9f 4f       	sbci	r25, 0xFF	; 255
    22b6:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <Receive_Password>
  	  	    	 Read_Password( &saved_password,&enter_password);/* call func. to read from the external EEPROM */
    22ba:	ce 01       	movw	r24, r28
    22bc:	8e 57       	subi	r24, 0x7E	; 126
    22be:	9f 4f       	sbci	r25, 0xFF	; 255
    22c0:	9e 01       	movw	r18, r28
    22c2:	28 58       	subi	r18, 0x88	; 136
    22c4:	3f 4f       	sbci	r19, 0xFF	; 255
    22c6:	b9 01       	movw	r22, r18
    22c8:	0e 94 0c 09 	call	0x1218	; 0x1218 <Read_Password>

  	  	    	 saved_password_value = Matching_Password( &enter_password , &saved_password);
    22cc:	ce 01       	movw	r24, r28
    22ce:	88 58       	subi	r24, 0x88	; 136
    22d0:	9f 4f       	sbci	r25, 0xFF	; 255
    22d2:	9e 01       	movw	r18, r28
    22d4:	2e 57       	subi	r18, 0x7E	; 126
    22d6:	3f 4f       	sbci	r19, 0xFF	; 255
    22d8:	b9 01       	movw	r22, r18
    22da:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <Matching_Password>
    22de:	fe 01       	movw	r30, r28
    22e0:	ee 58       	subi	r30, 0x8E	; 142
    22e2:	ff 4f       	sbci	r31, 0xFF	; 255
    22e4:	80 83       	st	Z, r24

  	  	     	 UART_sendByte(saved_password_value); //send the check_value  to the first MC using uart
    22e6:	fe 01       	movw	r30, r28
    22e8:	ee 58       	subi	r30, 0x8E	; 142
    22ea:	ff 4f       	sbci	r31, 0xFF	; 255
    22ec:	80 81       	ld	r24, Z
    22ee:	0e 94 4d 19 	call	0x329a	; 0x329a <UART_sendByte>
    22f2:	80 e0       	ldi	r24, 0x00	; 0
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	aa ef       	ldi	r26, 0xFA	; 250
    22f8:	b3 e4       	ldi	r27, 0x43	; 67
    22fa:	8b 87       	std	Y+11, r24	; 0x0b
    22fc:	9c 87       	std	Y+12, r25	; 0x0c
    22fe:	ad 87       	std	Y+13, r26	; 0x0d
    2300:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2302:	6b 85       	ldd	r22, Y+11	; 0x0b
    2304:	7c 85       	ldd	r23, Y+12	; 0x0c
    2306:	8d 85       	ldd	r24, Y+13	; 0x0d
    2308:	9e 85       	ldd	r25, Y+14	; 0x0e
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	4a ef       	ldi	r20, 0xFA	; 250
    2310:	54 e4       	ldi	r21, 0x44	; 68
    2312:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	8f 83       	std	Y+7, r24	; 0x07
    231c:	98 87       	std	Y+8, r25	; 0x08
    231e:	a9 87       	std	Y+9, r26	; 0x09
    2320:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2322:	6f 81       	ldd	r22, Y+7	; 0x07
    2324:	78 85       	ldd	r23, Y+8	; 0x08
    2326:	89 85       	ldd	r24, Y+9	; 0x09
    2328:	9a 85       	ldd	r25, Y+10	; 0x0a
    232a:	20 e0       	ldi	r18, 0x00	; 0
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	40 e8       	ldi	r20, 0x80	; 128
    2330:	5f e3       	ldi	r21, 0x3F	; 63
    2332:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2336:	88 23       	and	r24, r24
    2338:	2c f4       	brge	.+10     	; 0x2344 <main+0xb32>
		__ticks = 1;
    233a:	81 e0       	ldi	r24, 0x01	; 1
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	9e 83       	std	Y+6, r25	; 0x06
    2340:	8d 83       	std	Y+5, r24	; 0x05
    2342:	3f c0       	rjmp	.+126    	; 0x23c2 <main+0xbb0>
	else if (__tmp > 65535)
    2344:	6f 81       	ldd	r22, Y+7	; 0x07
    2346:	78 85       	ldd	r23, Y+8	; 0x08
    2348:	89 85       	ldd	r24, Y+9	; 0x09
    234a:	9a 85       	ldd	r25, Y+10	; 0x0a
    234c:	20 e0       	ldi	r18, 0x00	; 0
    234e:	3f ef       	ldi	r19, 0xFF	; 255
    2350:	4f e7       	ldi	r20, 0x7F	; 127
    2352:	57 e4       	ldi	r21, 0x47	; 71
    2354:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2358:	18 16       	cp	r1, r24
    235a:	4c f5       	brge	.+82     	; 0x23ae <main+0xb9c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    235c:	6b 85       	ldd	r22, Y+11	; 0x0b
    235e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2360:	8d 85       	ldd	r24, Y+13	; 0x0d
    2362:	9e 85       	ldd	r25, Y+14	; 0x0e
    2364:	20 e0       	ldi	r18, 0x00	; 0
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	40 e2       	ldi	r20, 0x20	; 32
    236a:	51 e4       	ldi	r21, 0x41	; 65
    236c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2370:	dc 01       	movw	r26, r24
    2372:	cb 01       	movw	r24, r22
    2374:	bc 01       	movw	r22, r24
    2376:	cd 01       	movw	r24, r26
    2378:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    237c:	dc 01       	movw	r26, r24
    237e:	cb 01       	movw	r24, r22
    2380:	9e 83       	std	Y+6, r25	; 0x06
    2382:	8d 83       	std	Y+5, r24	; 0x05
    2384:	0f c0       	rjmp	.+30     	; 0x23a4 <main+0xb92>
    2386:	88 ec       	ldi	r24, 0xC8	; 200
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	9c 83       	std	Y+4, r25	; 0x04
    238c:	8b 83       	std	Y+3, r24	; 0x03
    238e:	8b 81       	ldd	r24, Y+3	; 0x03
    2390:	9c 81       	ldd	r25, Y+4	; 0x04
    2392:	01 97       	sbiw	r24, 0x01	; 1
    2394:	f1 f7       	brne	.-4      	; 0x2392 <main+0xb80>
    2396:	9c 83       	std	Y+4, r25	; 0x04
    2398:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    239a:	8d 81       	ldd	r24, Y+5	; 0x05
    239c:	9e 81       	ldd	r25, Y+6	; 0x06
    239e:	01 97       	sbiw	r24, 0x01	; 1
    23a0:	9e 83       	std	Y+6, r25	; 0x06
    23a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23a4:	8d 81       	ldd	r24, Y+5	; 0x05
    23a6:	9e 81       	ldd	r25, Y+6	; 0x06
    23a8:	00 97       	sbiw	r24, 0x00	; 0
    23aa:	69 f7       	brne	.-38     	; 0x2386 <main+0xb74>
    23ac:	14 c0       	rjmp	.+40     	; 0x23d6 <main+0xbc4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ae:	6f 81       	ldd	r22, Y+7	; 0x07
    23b0:	78 85       	ldd	r23, Y+8	; 0x08
    23b2:	89 85       	ldd	r24, Y+9	; 0x09
    23b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ba:	dc 01       	movw	r26, r24
    23bc:	cb 01       	movw	r24, r22
    23be:	9e 83       	std	Y+6, r25	; 0x06
    23c0:	8d 83       	std	Y+5, r24	; 0x05
    23c2:	8d 81       	ldd	r24, Y+5	; 0x05
    23c4:	9e 81       	ldd	r25, Y+6	; 0x06
    23c6:	9a 83       	std	Y+2, r25	; 0x02
    23c8:	89 83       	std	Y+1, r24	; 0x01
    23ca:	89 81       	ldd	r24, Y+1	; 0x01
    23cc:	9a 81       	ldd	r25, Y+2	; 0x02
    23ce:	01 97       	sbiw	r24, 0x01	; 1
    23d0:	f1 f7       	brne	.-4      	; 0x23ce <main+0xbbc>
    23d2:	9a 83       	std	Y+2, r25	; 0x02
    23d4:	89 83       	std	Y+1, r24	; 0x01
  	  	  		 _delay_ms(500);
  	  	  	if (saved_password_value==1)/*the old password is correct*/
    23d6:	fe 01       	movw	r30, r28
    23d8:	ee 58       	subi	r30, 0x8E	; 142
    23da:	ff 4f       	sbci	r31, 0xFF	; 255
    23dc:	80 81       	ld	r24, Z
    23de:	81 30       	cpi	r24, 0x01	; 1
    23e0:	51 f4       	brne	.+20     	; 0x23f6 <main+0xbe4>
  	  	  	{/* now, you will change the password (receive new password )*/

  	  	  		Receive_Password( &saved_password );
    23e2:	ce 01       	movw	r24, r28
    23e4:	8e 57       	subi	r24, 0x7E	; 126
    23e6:	9f 4f       	sbci	r25, 0xFF	; 255
    23e8:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <Receive_Password>
  	  	  		Write_Password(&saved_password);
    23ec:	ce 01       	movw	r24, r28
    23ee:	8e 57       	subi	r24, 0x7E	; 126
    23f0:	9f 4f       	sbci	r25, 0xFF	; 255
    23f2:	0e 94 34 06 	call	0xc68	; 0xc68 <Write_Password>
  	    	 saved_password_value = Matching_Password( &enter_password , &saved_password);

  	     	 UART_sendByte(saved_password_value); //send the check_value  to the first MC using uart
  	  		 _delay_ms(500);

  	  		 while (saved_password_value==0)/*the old password is correct*/
    23f6:	fe 01       	movw	r30, r28
    23f8:	ee 58       	subi	r30, 0x8E	; 142
    23fa:	ff 4f       	sbci	r31, 0xFF	; 255
    23fc:	80 81       	ld	r24, Z
    23fe:	88 23       	and	r24, r24
    2400:	09 f4       	brne	.+2      	; 0x2404 <main+0xbf2>
    2402:	56 cf       	rjmp	.-340    	; 0x22b0 <main+0xa9e>
    2404:	29 cc       	rjmp	.-1966   	; 0x1c58 <main+0x446>

00002406 <__vector_11>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
    2406:	1f 92       	push	r1
    2408:	0f 92       	push	r0
    240a:	0f b6       	in	r0, 0x3f	; 63
    240c:	0f 92       	push	r0
    240e:	11 24       	eor	r1, r1
    2410:	2f 93       	push	r18
    2412:	3f 93       	push	r19
    2414:	4f 93       	push	r20
    2416:	5f 93       	push	r21
    2418:	6f 93       	push	r22
    241a:	7f 93       	push	r23
    241c:	8f 93       	push	r24
    241e:	9f 93       	push	r25
    2420:	af 93       	push	r26
    2422:	bf 93       	push	r27
    2424:	ef 93       	push	r30
    2426:	ff 93       	push	r31
    2428:	df 93       	push	r29
    242a:	cf 93       	push	r28
    242c:	cd b7       	in	r28, 0x3d	; 61
    242e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2430:	80 91 69 00 	lds	r24, 0x0069
    2434:	90 91 6a 00 	lds	r25, 0x006A
    2438:	00 97       	sbiw	r24, 0x00	; 0
    243a:	29 f0       	breq	.+10     	; 0x2446 <__vector_11+0x40>
	{
		/* Call the Call Back function in the application after get init NORMAL value */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    243c:	e0 91 69 00 	lds	r30, 0x0069
    2440:	f0 91 6a 00 	lds	r31, 0x006A
    2444:	09 95       	icall
	}
}
    2446:	cf 91       	pop	r28
    2448:	df 91       	pop	r29
    244a:	ff 91       	pop	r31
    244c:	ef 91       	pop	r30
    244e:	bf 91       	pop	r27
    2450:	af 91       	pop	r26
    2452:	9f 91       	pop	r25
    2454:	8f 91       	pop	r24
    2456:	7f 91       	pop	r23
    2458:	6f 91       	pop	r22
    245a:	5f 91       	pop	r21
    245c:	4f 91       	pop	r20
    245e:	3f 91       	pop	r19
    2460:	2f 91       	pop	r18
    2462:	0f 90       	pop	r0
    2464:	0f be       	out	0x3f, r0	; 63
    2466:	0f 90       	pop	r0
    2468:	1f 90       	pop	r1
    246a:	18 95       	reti

0000246c <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    246c:	1f 92       	push	r1
    246e:	0f 92       	push	r0
    2470:	0f b6       	in	r0, 0x3f	; 63
    2472:	0f 92       	push	r0
    2474:	11 24       	eor	r1, r1
    2476:	2f 93       	push	r18
    2478:	3f 93       	push	r19
    247a:	4f 93       	push	r20
    247c:	5f 93       	push	r21
    247e:	6f 93       	push	r22
    2480:	7f 93       	push	r23
    2482:	8f 93       	push	r24
    2484:	9f 93       	push	r25
    2486:	af 93       	push	r26
    2488:	bf 93       	push	r27
    248a:	ef 93       	push	r30
    248c:	ff 93       	push	r31
    248e:	df 93       	push	r29
    2490:	cf 93       	push	r28
    2492:	cd b7       	in	r28, 0x3d	; 61
    2494:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2496:	80 91 69 00 	lds	r24, 0x0069
    249a:	90 91 6a 00 	lds	r25, 0x006A
    249e:	00 97       	sbiw	r24, 0x00	; 0
    24a0:	29 f0       	breq	.+10     	; 0x24ac <__vector_10+0x40>
	{
		/* Call the Call Back function in the application after get CTC value  */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    24a2:	e0 91 69 00 	lds	r30, 0x0069
    24a6:	f0 91 6a 00 	lds	r31, 0x006A
    24aa:	09 95       	icall
	}
}
    24ac:	cf 91       	pop	r28
    24ae:	df 91       	pop	r29
    24b0:	ff 91       	pop	r31
    24b2:	ef 91       	pop	r30
    24b4:	bf 91       	pop	r27
    24b6:	af 91       	pop	r26
    24b8:	9f 91       	pop	r25
    24ba:	8f 91       	pop	r24
    24bc:	7f 91       	pop	r23
    24be:	6f 91       	pop	r22
    24c0:	5f 91       	pop	r21
    24c2:	4f 91       	pop	r20
    24c4:	3f 91       	pop	r19
    24c6:	2f 91       	pop	r18
    24c8:	0f 90       	pop	r0
    24ca:	0f be       	out	0x3f, r0	; 63
    24cc:	0f 90       	pop	r0
    24ce:	1f 90       	pop	r1
    24d0:	18 95       	reti

000024d2 <Timer_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void Timer_init(const Timer_ConfigType * Config_Ptr)
{
    24d2:	df 93       	push	r29
    24d4:	cf 93       	push	r28
    24d6:	00 d0       	rcall	.+0      	; 0x24d8 <Timer_init+0x6>
    24d8:	cd b7       	in	r28, 0x3d	; 61
    24da:	de b7       	in	r29, 0x3e	; 62
    24dc:	9a 83       	std	Y+2, r25	; 0x02
    24de:	89 83       	std	Y+1, r24	; 0x01
	SREG  |= (1<<7);    //Enable global interrupts in MC by setting the I-Bit.
    24e0:	af e5       	ldi	r26, 0x5F	; 95
    24e2:	b0 e0       	ldi	r27, 0x00	; 0
    24e4:	ef e5       	ldi	r30, 0x5F	; 95
    24e6:	f0 e0       	ldi	r31, 0x00	; 0
    24e8:	80 81       	ld	r24, Z
    24ea:	80 68       	ori	r24, 0x80	; 128
    24ec:	8c 93       	st	X, r24

	if (Config_Ptr->mode ==NORMAL)
    24ee:	e9 81       	ldd	r30, Y+1	; 0x01
    24f0:	fa 81       	ldd	r31, Y+2	; 0x02
    24f2:	81 81       	ldd	r24, Z+1	; 0x01
    24f4:	88 23       	and	r24, r24
    24f6:	09 f5       	brne	.+66     	; 0x253a <Timer_init+0x68>
	{
		TCNT0 =  (Config_Ptr->init_NORMAL_value); // Set Timer initial value
    24f8:	a2 e5       	ldi	r26, 0x52	; 82
    24fa:	b0 e0       	ldi	r27, 0x00	; 0
    24fc:	e9 81       	ldd	r30, Y+1	; 0x01
    24fe:	fa 81       	ldd	r31, Y+2	; 0x02
    2500:	82 81       	ldd	r24, Z+2	; 0x02
    2502:	8c 93       	st	X, r24

		TIMSK |= (1<<TOIE0); // Enable Timer0 Overflow Interrupt
    2504:	a9 e5       	ldi	r26, 0x59	; 89
    2506:	b0 e0       	ldi	r27, 0x00	; 0
    2508:	e9 e5       	ldi	r30, 0x59	; 89
    250a:	f0 e0       	ldi	r31, 0x00	; 0
    250c:	80 81       	ld	r24, Z
    250e:	81 60       	ori	r24, 0x01	; 1
    2510:	8c 93       	st	X, r24

		TCCR0 |= (1<<FOC0); //1. Non PWM mode FOC0=1
    2512:	a3 e5       	ldi	r26, 0x53	; 83
    2514:	b0 e0       	ldi	r27, 0x00	; 0
    2516:	e3 e5       	ldi	r30, 0x53	; 83
    2518:	f0 e0       	ldi	r31, 0x00	; 0
    251a:	80 81       	ld	r24, Z
    251c:	80 68       	ori	r24, 0x80	; 128
    251e:	8c 93       	st	X, r24
		/*
		* insert the required clock value in the first three bits (CS00, CS01 and C02)
		* of TCCR0 Register
		*/

		TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->clock);
    2520:	a3 e5       	ldi	r26, 0x53	; 83
    2522:	b0 e0       	ldi	r27, 0x00	; 0
    2524:	e3 e5       	ldi	r30, 0x53	; 83
    2526:	f0 e0       	ldi	r31, 0x00	; 0
    2528:	80 81       	ld	r24, Z
    252a:	98 2f       	mov	r25, r24
    252c:	98 7f       	andi	r25, 0xF8	; 248
    252e:	e9 81       	ldd	r30, Y+1	; 0x01
    2530:	fa 81       	ldd	r31, Y+2	; 0x02
    2532:	80 81       	ld	r24, Z
    2534:	89 2b       	or	r24, r25
    2536:	8c 93       	st	X, r24
    2538:	32 c0       	rjmp	.+100    	; 0x259e <Timer_init+0xcc>

	}

	else if(Config_Ptr->mode == CTC)
    253a:	e9 81       	ldd	r30, Y+1	; 0x01
    253c:	fa 81       	ldd	r31, Y+2	; 0x02
    253e:	81 81       	ldd	r24, Z+1	; 0x01
    2540:	81 30       	cpi	r24, 0x01	; 1
    2542:	69 f5       	brne	.+90     	; 0x259e <Timer_init+0xcc>
		{
		TCNT0 =  (Config_Ptr->init_NORMAL_value); // Set Timer initial value
    2544:	a2 e5       	ldi	r26, 0x52	; 82
    2546:	b0 e0       	ldi	r27, 0x00	; 0
    2548:	e9 81       	ldd	r30, Y+1	; 0x01
    254a:	fa 81       	ldd	r31, Y+2	; 0x02
    254c:	82 81       	ldd	r24, Z+2	; 0x02
    254e:	8c 93       	st	X, r24

		OCR0  = (Config_Ptr->CTC_value); // Set Compare Value
    2550:	ac e5       	ldi	r26, 0x5C	; 92
    2552:	b0 e0       	ldi	r27, 0x00	; 0
    2554:	e9 81       	ldd	r30, Y+1	; 0x01
    2556:	fa 81       	ldd	r31, Y+2	; 0x02
    2558:	83 81       	ldd	r24, Z+3	; 0x03
    255a:	8c 93       	st	X, r24

		TIMSK |= (1<<OCIE0); // Enable Timer0 Compare Interrupt
    255c:	a9 e5       	ldi	r26, 0x59	; 89
    255e:	b0 e0       	ldi	r27, 0x00	; 0
    2560:	e9 e5       	ldi	r30, 0x59	; 89
    2562:	f0 e0       	ldi	r31, 0x00	; 0
    2564:	80 81       	ld	r24, Z
    2566:	82 60       	ori	r24, 0x02	; 2
    2568:	8c 93       	st	X, r24

		TCCR0 |= (1<<FOC0); //1. Non PWM mode FOC0=1
    256a:	a3 e5       	ldi	r26, 0x53	; 83
    256c:	b0 e0       	ldi	r27, 0x00	; 0
    256e:	e3 e5       	ldi	r30, 0x53	; 83
    2570:	f0 e0       	ldi	r31, 0x00	; 0
    2572:	80 81       	ld	r24, Z
    2574:	80 68       	ori	r24, 0x80	; 128
    2576:	8c 93       	st	X, r24
		/*
		 * insert the required mode in the Two bits number 3 and 6  (WGM01 and WGM00)
		 * of TCCR0 Register to be CTC mode
		 */

		TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->clock);
    2578:	a3 e5       	ldi	r26, 0x53	; 83
    257a:	b0 e0       	ldi	r27, 0x00	; 0
    257c:	e3 e5       	ldi	r30, 0x53	; 83
    257e:	f0 e0       	ldi	r31, 0x00	; 0
    2580:	80 81       	ld	r24, Z
    2582:	98 2f       	mov	r25, r24
    2584:	98 7f       	andi	r25, 0xF8	; 248
    2586:	e9 81       	ldd	r30, Y+1	; 0x01
    2588:	fa 81       	ldd	r31, Y+2	; 0x02
    258a:	80 81       	ld	r24, Z
    258c:	89 2b       	or	r24, r25
    258e:	8c 93       	st	X, r24
		 * insert the required mode in the Two bits number 3 and 6  (WGM01 and WGM00)
		 * of TCCR0 Register to be CTC mode
		 */


		TCCR0 |= (1<<WGM01);
    2590:	a3 e5       	ldi	r26, 0x53	; 83
    2592:	b0 e0       	ldi	r27, 0x00	; 0
    2594:	e3 e5       	ldi	r30, 0x53	; 83
    2596:	f0 e0       	ldi	r31, 0x00	; 0
    2598:	80 81       	ld	r24, Z
    259a:	88 60       	ori	r24, 0x08	; 8
    259c:	8c 93       	st	X, r24
		}
}
    259e:	0f 90       	pop	r0
    25a0:	0f 90       	pop	r0
    25a2:	cf 91       	pop	r28
    25a4:	df 91       	pop	r29
    25a6:	08 95       	ret

000025a8 <Timer_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void Timer_setCallBack(void(*a_ptr)(void))
{
    25a8:	df 93       	push	r29
    25aa:	cf 93       	push	r28
    25ac:	00 d0       	rcall	.+0      	; 0x25ae <Timer_setCallBack+0x6>
    25ae:	cd b7       	in	r28, 0x3d	; 61
    25b0:	de b7       	in	r29, 0x3e	; 62
    25b2:	9a 83       	std	Y+2, r25	; 0x02
    25b4:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    25b6:	89 81       	ldd	r24, Y+1	; 0x01
    25b8:	9a 81       	ldd	r25, Y+2	; 0x02
    25ba:	90 93 6a 00 	sts	0x006A, r25
    25be:	80 93 69 00 	sts	0x0069, r24
}
    25c2:	0f 90       	pop	r0
    25c4:	0f 90       	pop	r0
    25c6:	cf 91       	pop	r28
    25c8:	df 91       	pop	r29
    25ca:	08 95       	ret

000025cc <EEPROM_init>:
 *******************************************************************************/
#include "i2c.h"
#include "external_eeprom.h"

void EEPROM_init(void)
{
    25cc:	df 93       	push	r29
    25ce:	cf 93       	push	r28
    25d0:	cd b7       	in	r28, 0x3d	; 61
    25d2:	de b7       	in	r29, 0x3e	; 62
	/* just initialize the I2C(TWI) module inside the MC */
	TWI_init();
    25d4:	0e 94 90 13 	call	0x2720	; 0x2720 <TWI_init>
}
    25d8:	cf 91       	pop	r28
    25da:	df 91       	pop	r29
    25dc:	08 95       	ret

000025de <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    25de:	df 93       	push	r29
    25e0:	cf 93       	push	r28
    25e2:	00 d0       	rcall	.+0      	; 0x25e4 <EEPROM_writeByte+0x6>
    25e4:	00 d0       	rcall	.+0      	; 0x25e6 <EEPROM_writeByte+0x8>
    25e6:	cd b7       	in	r28, 0x3d	; 61
    25e8:	de b7       	in	r29, 0x3e	; 62
    25ea:	9a 83       	std	Y+2, r25	; 0x02
    25ec:	89 83       	std	Y+1, r24	; 0x01
    25ee:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    25f0:	0e 94 a6 13 	call	0x274c	; 0x274c <TWI_start>
    if (TWI_getStatus() != TW_START)
    25f4:	0e 94 fe 13 	call	0x27fc	; 0x27fc <TWI_getStatus>
    25f8:	88 30       	cpi	r24, 0x08	; 8
    25fa:	11 f0       	breq	.+4      	; 0x2600 <EEPROM_writeByte+0x22>
        return ERROR;
    25fc:	1c 82       	std	Y+4, r1	; 0x04
    25fe:	28 c0       	rjmp	.+80     	; 0x2650 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    2600:	89 81       	ldd	r24, Y+1	; 0x01
    2602:	9a 81       	ldd	r25, Y+2	; 0x02
    2604:	80 70       	andi	r24, 0x00	; 0
    2606:	97 70       	andi	r25, 0x07	; 7
    2608:	88 0f       	add	r24, r24
    260a:	89 2f       	mov	r24, r25
    260c:	88 1f       	adc	r24, r24
    260e:	99 0b       	sbc	r25, r25
    2610:	91 95       	neg	r25
    2612:	80 6a       	ori	r24, 0xA0	; 160
    2614:	0e 94 c1 13 	call	0x2782	; 0x2782 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    2618:	0e 94 fe 13 	call	0x27fc	; 0x27fc <TWI_getStatus>
    261c:	88 31       	cpi	r24, 0x18	; 24
    261e:	11 f0       	breq	.+4      	; 0x2624 <EEPROM_writeByte+0x46>
        return ERROR; 
    2620:	1c 82       	std	Y+4, r1	; 0x04
    2622:	16 c0       	rjmp	.+44     	; 0x2650 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    2624:	89 81       	ldd	r24, Y+1	; 0x01
    2626:	0e 94 c1 13 	call	0x2782	; 0x2782 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    262a:	0e 94 fe 13 	call	0x27fc	; 0x27fc <TWI_getStatus>
    262e:	88 32       	cpi	r24, 0x28	; 40
    2630:	11 f0       	breq	.+4      	; 0x2636 <EEPROM_writeByte+0x58>
        return ERROR;
    2632:	1c 82       	std	Y+4, r1	; 0x04
    2634:	0d c0       	rjmp	.+26     	; 0x2650 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_write(u8data);
    2636:	8b 81       	ldd	r24, Y+3	; 0x03
    2638:	0e 94 c1 13 	call	0x2782	; 0x2782 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    263c:	0e 94 fe 13 	call	0x27fc	; 0x27fc <TWI_getStatus>
    2640:	88 32       	cpi	r24, 0x28	; 40
    2642:	11 f0       	breq	.+4      	; 0x2648 <EEPROM_writeByte+0x6a>
        return ERROR;
    2644:	1c 82       	std	Y+4, r1	; 0x04
    2646:	04 c0       	rjmp	.+8      	; 0x2650 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    2648:	0e 94 b6 13 	call	0x276c	; 0x276c <TWI_stop>
	
    return SUCCESS;
    264c:	81 e0       	ldi	r24, 0x01	; 1
    264e:	8c 83       	std	Y+4, r24	; 0x04
    2650:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2652:	0f 90       	pop	r0
    2654:	0f 90       	pop	r0
    2656:	0f 90       	pop	r0
    2658:	0f 90       	pop	r0
    265a:	cf 91       	pop	r28
    265c:	df 91       	pop	r29
    265e:	08 95       	ret

00002660 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    2660:	df 93       	push	r29
    2662:	cf 93       	push	r28
    2664:	00 d0       	rcall	.+0      	; 0x2666 <EEPROM_readByte+0x6>
    2666:	00 d0       	rcall	.+0      	; 0x2668 <EEPROM_readByte+0x8>
    2668:	0f 92       	push	r0
    266a:	cd b7       	in	r28, 0x3d	; 61
    266c:	de b7       	in	r29, 0x3e	; 62
    266e:	9a 83       	std	Y+2, r25	; 0x02
    2670:	89 83       	std	Y+1, r24	; 0x01
    2672:	7c 83       	std	Y+4, r23	; 0x04
    2674:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    2676:	0e 94 a6 13 	call	0x274c	; 0x274c <TWI_start>
    if (TWI_getStatus() != TW_START)
    267a:	0e 94 fe 13 	call	0x27fc	; 0x27fc <TWI_getStatus>
    267e:	88 30       	cpi	r24, 0x08	; 8
    2680:	11 f0       	breq	.+4      	; 0x2686 <EEPROM_readByte+0x26>
        return ERROR;
    2682:	1d 82       	std	Y+5, r1	; 0x05
    2684:	44 c0       	rjmp	.+136    	; 0x270e <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    2686:	89 81       	ldd	r24, Y+1	; 0x01
    2688:	9a 81       	ldd	r25, Y+2	; 0x02
    268a:	80 70       	andi	r24, 0x00	; 0
    268c:	97 70       	andi	r25, 0x07	; 7
    268e:	88 0f       	add	r24, r24
    2690:	89 2f       	mov	r24, r25
    2692:	88 1f       	adc	r24, r24
    2694:	99 0b       	sbc	r25, r25
    2696:	91 95       	neg	r25
    2698:	80 6a       	ori	r24, 0xA0	; 160
    269a:	0e 94 c1 13 	call	0x2782	; 0x2782 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    269e:	0e 94 fe 13 	call	0x27fc	; 0x27fc <TWI_getStatus>
    26a2:	88 31       	cpi	r24, 0x18	; 24
    26a4:	11 f0       	breq	.+4      	; 0x26aa <EEPROM_readByte+0x4a>
        return ERROR;
    26a6:	1d 82       	std	Y+5, r1	; 0x05
    26a8:	32 c0       	rjmp	.+100    	; 0x270e <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    26aa:	89 81       	ldd	r24, Y+1	; 0x01
    26ac:	0e 94 c1 13 	call	0x2782	; 0x2782 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    26b0:	0e 94 fe 13 	call	0x27fc	; 0x27fc <TWI_getStatus>
    26b4:	88 32       	cpi	r24, 0x28	; 40
    26b6:	11 f0       	breq	.+4      	; 0x26bc <EEPROM_readByte+0x5c>
        return ERROR;
    26b8:	1d 82       	std	Y+5, r1	; 0x05
    26ba:	29 c0       	rjmp	.+82     	; 0x270e <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    26bc:	0e 94 a6 13 	call	0x274c	; 0x274c <TWI_start>
    if (TWI_getStatus() != TW_REP_START)
    26c0:	0e 94 fe 13 	call	0x27fc	; 0x27fc <TWI_getStatus>
    26c4:	80 31       	cpi	r24, 0x10	; 16
    26c6:	11 f0       	breq	.+4      	; 0x26cc <EEPROM_readByte+0x6c>
        return ERROR;
    26c8:	1d 82       	std	Y+5, r1	; 0x05
    26ca:	21 c0       	rjmp	.+66     	; 0x270e <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    26cc:	89 81       	ldd	r24, Y+1	; 0x01
    26ce:	9a 81       	ldd	r25, Y+2	; 0x02
    26d0:	80 70       	andi	r24, 0x00	; 0
    26d2:	97 70       	andi	r25, 0x07	; 7
    26d4:	88 0f       	add	r24, r24
    26d6:	89 2f       	mov	r24, r25
    26d8:	88 1f       	adc	r24, r24
    26da:	99 0b       	sbc	r25, r25
    26dc:	91 95       	neg	r25
    26de:	81 6a       	ori	r24, 0xA1	; 161
    26e0:	0e 94 c1 13 	call	0x2782	; 0x2782 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_R_ACK)
    26e4:	0e 94 fe 13 	call	0x27fc	; 0x27fc <TWI_getStatus>
    26e8:	80 34       	cpi	r24, 0x40	; 64
    26ea:	11 f0       	breq	.+4      	; 0x26f0 <EEPROM_readByte+0x90>
        return ERROR;
    26ec:	1d 82       	std	Y+5, r1	; 0x05
    26ee:	0f c0       	rjmp	.+30     	; 0x270e <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readWithNACK();
    26f0:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <TWI_readWithNACK>
    26f4:	eb 81       	ldd	r30, Y+3	; 0x03
    26f6:	fc 81       	ldd	r31, Y+4	; 0x04
    26f8:	80 83       	st	Z, r24
    if (TWI_getStatus() != TW_MR_DATA_NACK)
    26fa:	0e 94 fe 13 	call	0x27fc	; 0x27fc <TWI_getStatus>
    26fe:	88 35       	cpi	r24, 0x58	; 88
    2700:	11 f0       	breq	.+4      	; 0x2706 <EEPROM_readByte+0xa6>
        return ERROR;
    2702:	1d 82       	std	Y+5, r1	; 0x05
    2704:	04 c0       	rjmp	.+8      	; 0x270e <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    2706:	0e 94 b6 13 	call	0x276c	; 0x276c <TWI_stop>
    return SUCCESS;
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	8d 83       	std	Y+5, r24	; 0x05
    270e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2710:	0f 90       	pop	r0
    2712:	0f 90       	pop	r0
    2714:	0f 90       	pop	r0
    2716:	0f 90       	pop	r0
    2718:	0f 90       	pop	r0
    271a:	cf 91       	pop	r28
    271c:	df 91       	pop	r29
    271e:	08 95       	ret

00002720 <TWI_init>:
 *******************************************************************************/
 
#include "i2c.h"

void TWI_init(void)
{
    2720:	df 93       	push	r29
    2722:	cf 93       	push	r28
    2724:	cd b7       	in	r28, 0x3d	; 61
    2726:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
    2728:	e0 e2       	ldi	r30, 0x20	; 32
    272a:	f0 e0       	ldi	r31, 0x00	; 0
    272c:	82 e0       	ldi	r24, 0x02	; 2
    272e:	80 83       	st	Z, r24
	TWSR = 0x00;
    2730:	e1 e2       	ldi	r30, 0x21	; 33
    2732:	f0 e0       	ldi	r31, 0x00	; 0
    2734:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :) 
    2736:	e2 e2       	ldi	r30, 0x22	; 34
    2738:	f0 e0       	ldi	r31, 0x00	; 0
    273a:	82 e0       	ldi	r24, 0x02	; 2
    273c:	80 83       	st	Z, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    273e:	e6 e5       	ldi	r30, 0x56	; 86
    2740:	f0 e0       	ldi	r31, 0x00	; 0
    2742:	84 e0       	ldi	r24, 0x04	; 4
    2744:	80 83       	st	Z, r24
}
    2746:	cf 91       	pop	r28
    2748:	df 91       	pop	r29
    274a:	08 95       	ret

0000274c <TWI_start>:

void TWI_start(void)
{
    274c:	df 93       	push	r29
    274e:	cf 93       	push	r28
    2750:	cd b7       	in	r28, 0x3d	; 61
    2752:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2754:	e6 e5       	ldi	r30, 0x56	; 86
    2756:	f0 e0       	ldi	r31, 0x00	; 0
    2758:	84 ea       	ldi	r24, 0xA4	; 164
    275a:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    275c:	e6 e5       	ldi	r30, 0x56	; 86
    275e:	f0 e0       	ldi	r31, 0x00	; 0
    2760:	80 81       	ld	r24, Z
    2762:	88 23       	and	r24, r24
    2764:	dc f7       	brge	.-10     	; 0x275c <TWI_start+0x10>
}
    2766:	cf 91       	pop	r28
    2768:	df 91       	pop	r29
    276a:	08 95       	ret

0000276c <TWI_stop>:

void TWI_stop(void)
{
    276c:	df 93       	push	r29
    276e:	cf 93       	push	r28
    2770:	cd b7       	in	r28, 0x3d	; 61
    2772:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2774:	e6 e5       	ldi	r30, 0x56	; 86
    2776:	f0 e0       	ldi	r31, 0x00	; 0
    2778:	84 e9       	ldi	r24, 0x94	; 148
    277a:	80 83       	st	Z, r24
}
    277c:	cf 91       	pop	r28
    277e:	df 91       	pop	r29
    2780:	08 95       	ret

00002782 <TWI_write>:

void TWI_write(uint8 data)
{
    2782:	df 93       	push	r29
    2784:	cf 93       	push	r28
    2786:	0f 92       	push	r0
    2788:	cd b7       	in	r28, 0x3d	; 61
    278a:	de b7       	in	r29, 0x3e	; 62
    278c:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    278e:	e3 e2       	ldi	r30, 0x23	; 35
    2790:	f0 e0       	ldi	r31, 0x00	; 0
    2792:	89 81       	ldd	r24, Y+1	; 0x01
    2794:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    2796:	e6 e5       	ldi	r30, 0x56	; 86
    2798:	f0 e0       	ldi	r31, 0x00	; 0
    279a:	84 e8       	ldi	r24, 0x84	; 132
    279c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    279e:	e6 e5       	ldi	r30, 0x56	; 86
    27a0:	f0 e0       	ldi	r31, 0x00	; 0
    27a2:	80 81       	ld	r24, Z
    27a4:	88 23       	and	r24, r24
    27a6:	dc f7       	brge	.-10     	; 0x279e <TWI_write+0x1c>
}
    27a8:	0f 90       	pop	r0
    27aa:	cf 91       	pop	r28
    27ac:	df 91       	pop	r29
    27ae:	08 95       	ret

000027b0 <TWI_readWithACK>:

uint8 TWI_readWithACK(void)
{
    27b0:	df 93       	push	r29
    27b2:	cf 93       	push	r28
    27b4:	cd b7       	in	r28, 0x3d	; 61
    27b6:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    27b8:	e6 e5       	ldi	r30, 0x56	; 86
    27ba:	f0 e0       	ldi	r31, 0x00	; 0
    27bc:	84 ec       	ldi	r24, 0xC4	; 196
    27be:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    27c0:	e6 e5       	ldi	r30, 0x56	; 86
    27c2:	f0 e0       	ldi	r31, 0x00	; 0
    27c4:	80 81       	ld	r24, Z
    27c6:	88 23       	and	r24, r24
    27c8:	dc f7       	brge	.-10     	; 0x27c0 <TWI_readWithACK+0x10>
    /* Read Data */
    return TWDR;
    27ca:	e3 e2       	ldi	r30, 0x23	; 35
    27cc:	f0 e0       	ldi	r31, 0x00	; 0
    27ce:	80 81       	ld	r24, Z
}
    27d0:	cf 91       	pop	r28
    27d2:	df 91       	pop	r29
    27d4:	08 95       	ret

000027d6 <TWI_readWithNACK>:

uint8 TWI_readWithNACK(void)
{
    27d6:	df 93       	push	r29
    27d8:	cf 93       	push	r28
    27da:	cd b7       	in	r28, 0x3d	; 61
    27dc:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    27de:	e6 e5       	ldi	r30, 0x56	; 86
    27e0:	f0 e0       	ldi	r31, 0x00	; 0
    27e2:	84 e8       	ldi	r24, 0x84	; 132
    27e4:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    27e6:	e6 e5       	ldi	r30, 0x56	; 86
    27e8:	f0 e0       	ldi	r31, 0x00	; 0
    27ea:	80 81       	ld	r24, Z
    27ec:	88 23       	and	r24, r24
    27ee:	dc f7       	brge	.-10     	; 0x27e6 <TWI_readWithNACK+0x10>
    /* Read Data */
    return TWDR;
    27f0:	e3 e2       	ldi	r30, 0x23	; 35
    27f2:	f0 e0       	ldi	r31, 0x00	; 0
    27f4:	80 81       	ld	r24, Z
}
    27f6:	cf 91       	pop	r28
    27f8:	df 91       	pop	r29
    27fa:	08 95       	ret

000027fc <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    27fc:	df 93       	push	r29
    27fe:	cf 93       	push	r28
    2800:	0f 92       	push	r0
    2802:	cd b7       	in	r28, 0x3d	; 61
    2804:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    2806:	e1 e2       	ldi	r30, 0x21	; 33
    2808:	f0 e0       	ldi	r31, 0x00	; 0
    280a:	80 81       	ld	r24, Z
    280c:	88 7f       	andi	r24, 0xF8	; 248
    280e:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2810:	89 81       	ldd	r24, Y+1	; 0x01
}
    2812:	0f 90       	pop	r0
    2814:	cf 91       	pop	r28
    2816:	df 91       	pop	r29
    2818:	08 95       	ret

0000281a <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    281a:	df 93       	push	r29
    281c:	cf 93       	push	r28
    281e:	cd b7       	in	r28, 0x3d	; 61
    2820:	de b7       	in	r29, 0x3e	; 62
	LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
    2822:	ea e3       	ldi	r30, 0x3A	; 58
    2824:	f0 e0       	ldi	r31, 0x00	; 0
    2826:	8f ef       	ldi	r24, 0xFF	; 255
    2828:	80 83       	st	Z, r24
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    282a:	a1 e3       	ldi	r26, 0x31	; 49
    282c:	b0 e0       	ldi	r27, 0x00	; 0
    282e:	e1 e3       	ldi	r30, 0x31	; 49
    2830:	f0 e0       	ldi	r31, 0x00	; 0
    2832:	80 81       	ld	r24, Z
    2834:	80 67       	ori	r24, 0x70	; 112
    2836:	8c 93       	st	X, r24
	
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    2838:	88 e3       	ldi	r24, 0x38	; 56
    283a:	0e 94 28 14 	call	0x2850	; 0x2850 <LCD_sendCommand>
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    283e:	8c e0       	ldi	r24, 0x0C	; 12
    2840:	0e 94 28 14 	call	0x2850	; 0x2850 <LCD_sendCommand>
	
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    2844:	81 e0       	ldi	r24, 0x01	; 1
    2846:	0e 94 28 14 	call	0x2850	; 0x2850 <LCD_sendCommand>
}
    284a:	cf 91       	pop	r28
    284c:	df 91       	pop	r29
    284e:	08 95       	ret

00002850 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    2850:	df 93       	push	r29
    2852:	cf 93       	push	r28
    2854:	cd b7       	in	r28, 0x3d	; 61
    2856:	de b7       	in	r29, 0x3e	; 62
    2858:	e9 97       	sbiw	r28, 0x39	; 57
    285a:	0f b6       	in	r0, 0x3f	; 63
    285c:	f8 94       	cli
    285e:	de bf       	out	0x3e, r29	; 62
    2860:	0f be       	out	0x3f, r0	; 63
    2862:	cd bf       	out	0x3d, r28	; 61
    2864:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    2866:	a2 e3       	ldi	r26, 0x32	; 50
    2868:	b0 e0       	ldi	r27, 0x00	; 0
    286a:	e2 e3       	ldi	r30, 0x32	; 50
    286c:	f0 e0       	ldi	r31, 0x00	; 0
    286e:	80 81       	ld	r24, Z
    2870:	8f 7e       	andi	r24, 0xEF	; 239
    2872:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    2874:	a2 e3       	ldi	r26, 0x32	; 50
    2876:	b0 e0       	ldi	r27, 0x00	; 0
    2878:	e2 e3       	ldi	r30, 0x32	; 50
    287a:	f0 e0       	ldi	r31, 0x00	; 0
    287c:	80 81       	ld	r24, Z
    287e:	8f 7d       	andi	r24, 0xDF	; 223
    2880:	8c 93       	st	X, r24
    2882:	80 e0       	ldi	r24, 0x00	; 0
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	a0 e8       	ldi	r26, 0x80	; 128
    2888:	bf e3       	ldi	r27, 0x3F	; 63
    288a:	8d ab       	std	Y+53, r24	; 0x35
    288c:	9e ab       	std	Y+54, r25	; 0x36
    288e:	af ab       	std	Y+55, r26	; 0x37
    2890:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2892:	6d a9       	ldd	r22, Y+53	; 0x35
    2894:	7e a9       	ldd	r23, Y+54	; 0x36
    2896:	8f a9       	ldd	r24, Y+55	; 0x37
    2898:	98 ad       	ldd	r25, Y+56	; 0x38
    289a:	20 e0       	ldi	r18, 0x00	; 0
    289c:	30 e0       	ldi	r19, 0x00	; 0
    289e:	4a ef       	ldi	r20, 0xFA	; 250
    28a0:	54 e4       	ldi	r21, 0x44	; 68
    28a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a6:	dc 01       	movw	r26, r24
    28a8:	cb 01       	movw	r24, r22
    28aa:	89 ab       	std	Y+49, r24	; 0x31
    28ac:	9a ab       	std	Y+50, r25	; 0x32
    28ae:	ab ab       	std	Y+51, r26	; 0x33
    28b0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    28b2:	69 a9       	ldd	r22, Y+49	; 0x31
    28b4:	7a a9       	ldd	r23, Y+50	; 0x32
    28b6:	8b a9       	ldd	r24, Y+51	; 0x33
    28b8:	9c a9       	ldd	r25, Y+52	; 0x34
    28ba:	20 e0       	ldi	r18, 0x00	; 0
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	40 e8       	ldi	r20, 0x80	; 128
    28c0:	5f e3       	ldi	r21, 0x3F	; 63
    28c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28c6:	88 23       	and	r24, r24
    28c8:	2c f4       	brge	.+10     	; 0x28d4 <LCD_sendCommand+0x84>
		__ticks = 1;
    28ca:	81 e0       	ldi	r24, 0x01	; 1
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	98 ab       	std	Y+48, r25	; 0x30
    28d0:	8f a7       	std	Y+47, r24	; 0x2f
    28d2:	3f c0       	rjmp	.+126    	; 0x2952 <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    28d4:	69 a9       	ldd	r22, Y+49	; 0x31
    28d6:	7a a9       	ldd	r23, Y+50	; 0x32
    28d8:	8b a9       	ldd	r24, Y+51	; 0x33
    28da:	9c a9       	ldd	r25, Y+52	; 0x34
    28dc:	20 e0       	ldi	r18, 0x00	; 0
    28de:	3f ef       	ldi	r19, 0xFF	; 255
    28e0:	4f e7       	ldi	r20, 0x7F	; 127
    28e2:	57 e4       	ldi	r21, 0x47	; 71
    28e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28e8:	18 16       	cp	r1, r24
    28ea:	4c f5       	brge	.+82     	; 0x293e <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ec:	6d a9       	ldd	r22, Y+53	; 0x35
    28ee:	7e a9       	ldd	r23, Y+54	; 0x36
    28f0:	8f a9       	ldd	r24, Y+55	; 0x37
    28f2:	98 ad       	ldd	r25, Y+56	; 0x38
    28f4:	20 e0       	ldi	r18, 0x00	; 0
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	40 e2       	ldi	r20, 0x20	; 32
    28fa:	51 e4       	ldi	r21, 0x41	; 65
    28fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2900:	dc 01       	movw	r26, r24
    2902:	cb 01       	movw	r24, r22
    2904:	bc 01       	movw	r22, r24
    2906:	cd 01       	movw	r24, r26
    2908:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    290c:	dc 01       	movw	r26, r24
    290e:	cb 01       	movw	r24, r22
    2910:	98 ab       	std	Y+48, r25	; 0x30
    2912:	8f a7       	std	Y+47, r24	; 0x2f
    2914:	0f c0       	rjmp	.+30     	; 0x2934 <LCD_sendCommand+0xe4>
    2916:	88 ec       	ldi	r24, 0xC8	; 200
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	9e a7       	std	Y+46, r25	; 0x2e
    291c:	8d a7       	std	Y+45, r24	; 0x2d
    291e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2920:	9e a5       	ldd	r25, Y+46	; 0x2e
    2922:	01 97       	sbiw	r24, 0x01	; 1
    2924:	f1 f7       	brne	.-4      	; 0x2922 <LCD_sendCommand+0xd2>
    2926:	9e a7       	std	Y+46, r25	; 0x2e
    2928:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    292a:	8f a5       	ldd	r24, Y+47	; 0x2f
    292c:	98 a9       	ldd	r25, Y+48	; 0x30
    292e:	01 97       	sbiw	r24, 0x01	; 1
    2930:	98 ab       	std	Y+48, r25	; 0x30
    2932:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2934:	8f a5       	ldd	r24, Y+47	; 0x2f
    2936:	98 a9       	ldd	r25, Y+48	; 0x30
    2938:	00 97       	sbiw	r24, 0x00	; 0
    293a:	69 f7       	brne	.-38     	; 0x2916 <LCD_sendCommand+0xc6>
    293c:	14 c0       	rjmp	.+40     	; 0x2966 <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    293e:	69 a9       	ldd	r22, Y+49	; 0x31
    2940:	7a a9       	ldd	r23, Y+50	; 0x32
    2942:	8b a9       	ldd	r24, Y+51	; 0x33
    2944:	9c a9       	ldd	r25, Y+52	; 0x34
    2946:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    294a:	dc 01       	movw	r26, r24
    294c:	cb 01       	movw	r24, r22
    294e:	98 ab       	std	Y+48, r25	; 0x30
    2950:	8f a7       	std	Y+47, r24	; 0x2f
    2952:	8f a5       	ldd	r24, Y+47	; 0x2f
    2954:	98 a9       	ldd	r25, Y+48	; 0x30
    2956:	9c a7       	std	Y+44, r25	; 0x2c
    2958:	8b a7       	std	Y+43, r24	; 0x2b
    295a:	8b a5       	ldd	r24, Y+43	; 0x2b
    295c:	9c a5       	ldd	r25, Y+44	; 0x2c
    295e:	01 97       	sbiw	r24, 0x01	; 1
    2960:	f1 f7       	brne	.-4      	; 0x295e <LCD_sendCommand+0x10e>
    2962:	9c a7       	std	Y+44, r25	; 0x2c
    2964:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    2966:	a2 e3       	ldi	r26, 0x32	; 50
    2968:	b0 e0       	ldi	r27, 0x00	; 0
    296a:	e2 e3       	ldi	r30, 0x32	; 50
    296c:	f0 e0       	ldi	r31, 0x00	; 0
    296e:	80 81       	ld	r24, Z
    2970:	80 64       	ori	r24, 0x40	; 64
    2972:	8c 93       	st	X, r24
    2974:	80 e0       	ldi	r24, 0x00	; 0
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	a0 e8       	ldi	r26, 0x80	; 128
    297a:	bf e3       	ldi	r27, 0x3F	; 63
    297c:	8f a3       	std	Y+39, r24	; 0x27
    297e:	98 a7       	std	Y+40, r25	; 0x28
    2980:	a9 a7       	std	Y+41, r26	; 0x29
    2982:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2984:	6f a1       	ldd	r22, Y+39	; 0x27
    2986:	78 a5       	ldd	r23, Y+40	; 0x28
    2988:	89 a5       	ldd	r24, Y+41	; 0x29
    298a:	9a a5       	ldd	r25, Y+42	; 0x2a
    298c:	20 e0       	ldi	r18, 0x00	; 0
    298e:	30 e0       	ldi	r19, 0x00	; 0
    2990:	4a ef       	ldi	r20, 0xFA	; 250
    2992:	54 e4       	ldi	r21, 0x44	; 68
    2994:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2998:	dc 01       	movw	r26, r24
    299a:	cb 01       	movw	r24, r22
    299c:	8b a3       	std	Y+35, r24	; 0x23
    299e:	9c a3       	std	Y+36, r25	; 0x24
    29a0:	ad a3       	std	Y+37, r26	; 0x25
    29a2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    29a4:	6b a1       	ldd	r22, Y+35	; 0x23
    29a6:	7c a1       	ldd	r23, Y+36	; 0x24
    29a8:	8d a1       	ldd	r24, Y+37	; 0x25
    29aa:	9e a1       	ldd	r25, Y+38	; 0x26
    29ac:	20 e0       	ldi	r18, 0x00	; 0
    29ae:	30 e0       	ldi	r19, 0x00	; 0
    29b0:	40 e8       	ldi	r20, 0x80	; 128
    29b2:	5f e3       	ldi	r21, 0x3F	; 63
    29b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29b8:	88 23       	and	r24, r24
    29ba:	2c f4       	brge	.+10     	; 0x29c6 <LCD_sendCommand+0x176>
		__ticks = 1;
    29bc:	81 e0       	ldi	r24, 0x01	; 1
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	9a a3       	std	Y+34, r25	; 0x22
    29c2:	89 a3       	std	Y+33, r24	; 0x21
    29c4:	3f c0       	rjmp	.+126    	; 0x2a44 <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    29c6:	6b a1       	ldd	r22, Y+35	; 0x23
    29c8:	7c a1       	ldd	r23, Y+36	; 0x24
    29ca:	8d a1       	ldd	r24, Y+37	; 0x25
    29cc:	9e a1       	ldd	r25, Y+38	; 0x26
    29ce:	20 e0       	ldi	r18, 0x00	; 0
    29d0:	3f ef       	ldi	r19, 0xFF	; 255
    29d2:	4f e7       	ldi	r20, 0x7F	; 127
    29d4:	57 e4       	ldi	r21, 0x47	; 71
    29d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29da:	18 16       	cp	r1, r24
    29dc:	4c f5       	brge	.+82     	; 0x2a30 <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29de:	6f a1       	ldd	r22, Y+39	; 0x27
    29e0:	78 a5       	ldd	r23, Y+40	; 0x28
    29e2:	89 a5       	ldd	r24, Y+41	; 0x29
    29e4:	9a a5       	ldd	r25, Y+42	; 0x2a
    29e6:	20 e0       	ldi	r18, 0x00	; 0
    29e8:	30 e0       	ldi	r19, 0x00	; 0
    29ea:	40 e2       	ldi	r20, 0x20	; 32
    29ec:	51 e4       	ldi	r21, 0x41	; 65
    29ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29f2:	dc 01       	movw	r26, r24
    29f4:	cb 01       	movw	r24, r22
    29f6:	bc 01       	movw	r22, r24
    29f8:	cd 01       	movw	r24, r26
    29fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29fe:	dc 01       	movw	r26, r24
    2a00:	cb 01       	movw	r24, r22
    2a02:	9a a3       	std	Y+34, r25	; 0x22
    2a04:	89 a3       	std	Y+33, r24	; 0x21
    2a06:	0f c0       	rjmp	.+30     	; 0x2a26 <LCD_sendCommand+0x1d6>
    2a08:	88 ec       	ldi	r24, 0xC8	; 200
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	98 a3       	std	Y+32, r25	; 0x20
    2a0e:	8f 8f       	std	Y+31, r24	; 0x1f
    2a10:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a12:	98 a1       	ldd	r25, Y+32	; 0x20
    2a14:	01 97       	sbiw	r24, 0x01	; 1
    2a16:	f1 f7       	brne	.-4      	; 0x2a14 <LCD_sendCommand+0x1c4>
    2a18:	98 a3       	std	Y+32, r25	; 0x20
    2a1a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a1c:	89 a1       	ldd	r24, Y+33	; 0x21
    2a1e:	9a a1       	ldd	r25, Y+34	; 0x22
    2a20:	01 97       	sbiw	r24, 0x01	; 1
    2a22:	9a a3       	std	Y+34, r25	; 0x22
    2a24:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a26:	89 a1       	ldd	r24, Y+33	; 0x21
    2a28:	9a a1       	ldd	r25, Y+34	; 0x22
    2a2a:	00 97       	sbiw	r24, 0x00	; 0
    2a2c:	69 f7       	brne	.-38     	; 0x2a08 <LCD_sendCommand+0x1b8>
    2a2e:	14 c0       	rjmp	.+40     	; 0x2a58 <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a30:	6b a1       	ldd	r22, Y+35	; 0x23
    2a32:	7c a1       	ldd	r23, Y+36	; 0x24
    2a34:	8d a1       	ldd	r24, Y+37	; 0x25
    2a36:	9e a1       	ldd	r25, Y+38	; 0x26
    2a38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a3c:	dc 01       	movw	r26, r24
    2a3e:	cb 01       	movw	r24, r22
    2a40:	9a a3       	std	Y+34, r25	; 0x22
    2a42:	89 a3       	std	Y+33, r24	; 0x21
    2a44:	89 a1       	ldd	r24, Y+33	; 0x21
    2a46:	9a a1       	ldd	r25, Y+34	; 0x22
    2a48:	9e 8f       	std	Y+30, r25	; 0x1e
    2a4a:	8d 8f       	std	Y+29, r24	; 0x1d
    2a4c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a4e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a50:	01 97       	sbiw	r24, 0x01	; 1
    2a52:	f1 f7       	brne	.-4      	; 0x2a50 <LCD_sendCommand+0x200>
    2a54:	9e 8f       	std	Y+30, r25	; 0x1e
    2a56:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    2a58:	eb e3       	ldi	r30, 0x3B	; 59
    2a5a:	f0 e0       	ldi	r31, 0x00	; 0
    2a5c:	89 ad       	ldd	r24, Y+57	; 0x39
    2a5e:	80 83       	st	Z, r24
    2a60:	80 e0       	ldi	r24, 0x00	; 0
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	a0 e8       	ldi	r26, 0x80	; 128
    2a66:	bf e3       	ldi	r27, 0x3F	; 63
    2a68:	89 8f       	std	Y+25, r24	; 0x19
    2a6a:	9a 8f       	std	Y+26, r25	; 0x1a
    2a6c:	ab 8f       	std	Y+27, r26	; 0x1b
    2a6e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a70:	69 8d       	ldd	r22, Y+25	; 0x19
    2a72:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a74:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a76:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a78:	20 e0       	ldi	r18, 0x00	; 0
    2a7a:	30 e0       	ldi	r19, 0x00	; 0
    2a7c:	4a ef       	ldi	r20, 0xFA	; 250
    2a7e:	54 e4       	ldi	r21, 0x44	; 68
    2a80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a84:	dc 01       	movw	r26, r24
    2a86:	cb 01       	movw	r24, r22
    2a88:	8d 8b       	std	Y+21, r24	; 0x15
    2a8a:	9e 8b       	std	Y+22, r25	; 0x16
    2a8c:	af 8b       	std	Y+23, r26	; 0x17
    2a8e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a90:	6d 89       	ldd	r22, Y+21	; 0x15
    2a92:	7e 89       	ldd	r23, Y+22	; 0x16
    2a94:	8f 89       	ldd	r24, Y+23	; 0x17
    2a96:	98 8d       	ldd	r25, Y+24	; 0x18
    2a98:	20 e0       	ldi	r18, 0x00	; 0
    2a9a:	30 e0       	ldi	r19, 0x00	; 0
    2a9c:	40 e8       	ldi	r20, 0x80	; 128
    2a9e:	5f e3       	ldi	r21, 0x3F	; 63
    2aa0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2aa4:	88 23       	and	r24, r24
    2aa6:	2c f4       	brge	.+10     	; 0x2ab2 <LCD_sendCommand+0x262>
		__ticks = 1;
    2aa8:	81 e0       	ldi	r24, 0x01	; 1
    2aaa:	90 e0       	ldi	r25, 0x00	; 0
    2aac:	9c 8b       	std	Y+20, r25	; 0x14
    2aae:	8b 8b       	std	Y+19, r24	; 0x13
    2ab0:	3f c0       	rjmp	.+126    	; 0x2b30 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    2ab2:	6d 89       	ldd	r22, Y+21	; 0x15
    2ab4:	7e 89       	ldd	r23, Y+22	; 0x16
    2ab6:	8f 89       	ldd	r24, Y+23	; 0x17
    2ab8:	98 8d       	ldd	r25, Y+24	; 0x18
    2aba:	20 e0       	ldi	r18, 0x00	; 0
    2abc:	3f ef       	ldi	r19, 0xFF	; 255
    2abe:	4f e7       	ldi	r20, 0x7F	; 127
    2ac0:	57 e4       	ldi	r21, 0x47	; 71
    2ac2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ac6:	18 16       	cp	r1, r24
    2ac8:	4c f5       	brge	.+82     	; 0x2b1c <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aca:	69 8d       	ldd	r22, Y+25	; 0x19
    2acc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ace:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ad0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ad2:	20 e0       	ldi	r18, 0x00	; 0
    2ad4:	30 e0       	ldi	r19, 0x00	; 0
    2ad6:	40 e2       	ldi	r20, 0x20	; 32
    2ad8:	51 e4       	ldi	r21, 0x41	; 65
    2ada:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ade:	dc 01       	movw	r26, r24
    2ae0:	cb 01       	movw	r24, r22
    2ae2:	bc 01       	movw	r22, r24
    2ae4:	cd 01       	movw	r24, r26
    2ae6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aea:	dc 01       	movw	r26, r24
    2aec:	cb 01       	movw	r24, r22
    2aee:	9c 8b       	std	Y+20, r25	; 0x14
    2af0:	8b 8b       	std	Y+19, r24	; 0x13
    2af2:	0f c0       	rjmp	.+30     	; 0x2b12 <LCD_sendCommand+0x2c2>
    2af4:	88 ec       	ldi	r24, 0xC8	; 200
    2af6:	90 e0       	ldi	r25, 0x00	; 0
    2af8:	9a 8b       	std	Y+18, r25	; 0x12
    2afa:	89 8b       	std	Y+17, r24	; 0x11
    2afc:	89 89       	ldd	r24, Y+17	; 0x11
    2afe:	9a 89       	ldd	r25, Y+18	; 0x12
    2b00:	01 97       	sbiw	r24, 0x01	; 1
    2b02:	f1 f7       	brne	.-4      	; 0x2b00 <LCD_sendCommand+0x2b0>
    2b04:	9a 8b       	std	Y+18, r25	; 0x12
    2b06:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b08:	8b 89       	ldd	r24, Y+19	; 0x13
    2b0a:	9c 89       	ldd	r25, Y+20	; 0x14
    2b0c:	01 97       	sbiw	r24, 0x01	; 1
    2b0e:	9c 8b       	std	Y+20, r25	; 0x14
    2b10:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b12:	8b 89       	ldd	r24, Y+19	; 0x13
    2b14:	9c 89       	ldd	r25, Y+20	; 0x14
    2b16:	00 97       	sbiw	r24, 0x00	; 0
    2b18:	69 f7       	brne	.-38     	; 0x2af4 <LCD_sendCommand+0x2a4>
    2b1a:	14 c0       	rjmp	.+40     	; 0x2b44 <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b1c:	6d 89       	ldd	r22, Y+21	; 0x15
    2b1e:	7e 89       	ldd	r23, Y+22	; 0x16
    2b20:	8f 89       	ldd	r24, Y+23	; 0x17
    2b22:	98 8d       	ldd	r25, Y+24	; 0x18
    2b24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b28:	dc 01       	movw	r26, r24
    2b2a:	cb 01       	movw	r24, r22
    2b2c:	9c 8b       	std	Y+20, r25	; 0x14
    2b2e:	8b 8b       	std	Y+19, r24	; 0x13
    2b30:	8b 89       	ldd	r24, Y+19	; 0x13
    2b32:	9c 89       	ldd	r25, Y+20	; 0x14
    2b34:	98 8b       	std	Y+16, r25	; 0x10
    2b36:	8f 87       	std	Y+15, r24	; 0x0f
    2b38:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b3a:	98 89       	ldd	r25, Y+16	; 0x10
    2b3c:	01 97       	sbiw	r24, 0x01	; 1
    2b3e:	f1 f7       	brne	.-4      	; 0x2b3c <LCD_sendCommand+0x2ec>
    2b40:	98 8b       	std	Y+16, r25	; 0x10
    2b42:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2b44:	a2 e3       	ldi	r26, 0x32	; 50
    2b46:	b0 e0       	ldi	r27, 0x00	; 0
    2b48:	e2 e3       	ldi	r30, 0x32	; 50
    2b4a:	f0 e0       	ldi	r31, 0x00	; 0
    2b4c:	80 81       	ld	r24, Z
    2b4e:	8f 7b       	andi	r24, 0xBF	; 191
    2b50:	8c 93       	st	X, r24
    2b52:	80 e0       	ldi	r24, 0x00	; 0
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	a0 e8       	ldi	r26, 0x80	; 128
    2b58:	bf e3       	ldi	r27, 0x3F	; 63
    2b5a:	8b 87       	std	Y+11, r24	; 0x0b
    2b5c:	9c 87       	std	Y+12, r25	; 0x0c
    2b5e:	ad 87       	std	Y+13, r26	; 0x0d
    2b60:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b62:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b64:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b66:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b68:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b6a:	20 e0       	ldi	r18, 0x00	; 0
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	4a ef       	ldi	r20, 0xFA	; 250
    2b70:	54 e4       	ldi	r21, 0x44	; 68
    2b72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b76:	dc 01       	movw	r26, r24
    2b78:	cb 01       	movw	r24, r22
    2b7a:	8f 83       	std	Y+7, r24	; 0x07
    2b7c:	98 87       	std	Y+8, r25	; 0x08
    2b7e:	a9 87       	std	Y+9, r26	; 0x09
    2b80:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b82:	6f 81       	ldd	r22, Y+7	; 0x07
    2b84:	78 85       	ldd	r23, Y+8	; 0x08
    2b86:	89 85       	ldd	r24, Y+9	; 0x09
    2b88:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b8a:	20 e0       	ldi	r18, 0x00	; 0
    2b8c:	30 e0       	ldi	r19, 0x00	; 0
    2b8e:	40 e8       	ldi	r20, 0x80	; 128
    2b90:	5f e3       	ldi	r21, 0x3F	; 63
    2b92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b96:	88 23       	and	r24, r24
    2b98:	2c f4       	brge	.+10     	; 0x2ba4 <LCD_sendCommand+0x354>
		__ticks = 1;
    2b9a:	81 e0       	ldi	r24, 0x01	; 1
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	9e 83       	std	Y+6, r25	; 0x06
    2ba0:	8d 83       	std	Y+5, r24	; 0x05
    2ba2:	3f c0       	rjmp	.+126    	; 0x2c22 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    2ba4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ba6:	78 85       	ldd	r23, Y+8	; 0x08
    2ba8:	89 85       	ldd	r24, Y+9	; 0x09
    2baa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bac:	20 e0       	ldi	r18, 0x00	; 0
    2bae:	3f ef       	ldi	r19, 0xFF	; 255
    2bb0:	4f e7       	ldi	r20, 0x7F	; 127
    2bb2:	57 e4       	ldi	r21, 0x47	; 71
    2bb4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bb8:	18 16       	cp	r1, r24
    2bba:	4c f5       	brge	.+82     	; 0x2c0e <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bc4:	20 e0       	ldi	r18, 0x00	; 0
    2bc6:	30 e0       	ldi	r19, 0x00	; 0
    2bc8:	40 e2       	ldi	r20, 0x20	; 32
    2bca:	51 e4       	ldi	r21, 0x41	; 65
    2bcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd0:	dc 01       	movw	r26, r24
    2bd2:	cb 01       	movw	r24, r22
    2bd4:	bc 01       	movw	r22, r24
    2bd6:	cd 01       	movw	r24, r26
    2bd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bdc:	dc 01       	movw	r26, r24
    2bde:	cb 01       	movw	r24, r22
    2be0:	9e 83       	std	Y+6, r25	; 0x06
    2be2:	8d 83       	std	Y+5, r24	; 0x05
    2be4:	0f c0       	rjmp	.+30     	; 0x2c04 <LCD_sendCommand+0x3b4>
    2be6:	88 ec       	ldi	r24, 0xC8	; 200
    2be8:	90 e0       	ldi	r25, 0x00	; 0
    2bea:	9c 83       	std	Y+4, r25	; 0x04
    2bec:	8b 83       	std	Y+3, r24	; 0x03
    2bee:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf0:	9c 81       	ldd	r25, Y+4	; 0x04
    2bf2:	01 97       	sbiw	r24, 0x01	; 1
    2bf4:	f1 f7       	brne	.-4      	; 0x2bf2 <LCD_sendCommand+0x3a2>
    2bf6:	9c 83       	std	Y+4, r25	; 0x04
    2bf8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bfa:	8d 81       	ldd	r24, Y+5	; 0x05
    2bfc:	9e 81       	ldd	r25, Y+6	; 0x06
    2bfe:	01 97       	sbiw	r24, 0x01	; 1
    2c00:	9e 83       	std	Y+6, r25	; 0x06
    2c02:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c04:	8d 81       	ldd	r24, Y+5	; 0x05
    2c06:	9e 81       	ldd	r25, Y+6	; 0x06
    2c08:	00 97       	sbiw	r24, 0x00	; 0
    2c0a:	69 f7       	brne	.-38     	; 0x2be6 <LCD_sendCommand+0x396>
    2c0c:	14 c0       	rjmp	.+40     	; 0x2c36 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c0e:	6f 81       	ldd	r22, Y+7	; 0x07
    2c10:	78 85       	ldd	r23, Y+8	; 0x08
    2c12:	89 85       	ldd	r24, Y+9	; 0x09
    2c14:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c1a:	dc 01       	movw	r26, r24
    2c1c:	cb 01       	movw	r24, r22
    2c1e:	9e 83       	std	Y+6, r25	; 0x06
    2c20:	8d 83       	std	Y+5, r24	; 0x05
    2c22:	8d 81       	ldd	r24, Y+5	; 0x05
    2c24:	9e 81       	ldd	r25, Y+6	; 0x06
    2c26:	9a 83       	std	Y+2, r25	; 0x02
    2c28:	89 83       	std	Y+1, r24	; 0x01
    2c2a:	89 81       	ldd	r24, Y+1	; 0x01
    2c2c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c2e:	01 97       	sbiw	r24, 0x01	; 1
    2c30:	f1 f7       	brne	.-4      	; 0x2c2e <LCD_sendCommand+0x3de>
    2c32:	9a 83       	std	Y+2, r25	; 0x02
    2c34:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2c36:	e9 96       	adiw	r28, 0x39	; 57
    2c38:	0f b6       	in	r0, 0x3f	; 63
    2c3a:	f8 94       	cli
    2c3c:	de bf       	out	0x3e, r29	; 62
    2c3e:	0f be       	out	0x3f, r0	; 63
    2c40:	cd bf       	out	0x3d, r28	; 61
    2c42:	cf 91       	pop	r28
    2c44:	df 91       	pop	r29
    2c46:	08 95       	ret

00002c48 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    2c48:	df 93       	push	r29
    2c4a:	cf 93       	push	r28
    2c4c:	cd b7       	in	r28, 0x3d	; 61
    2c4e:	de b7       	in	r29, 0x3e	; 62
    2c50:	e9 97       	sbiw	r28, 0x39	; 57
    2c52:	0f b6       	in	r0, 0x3f	; 63
    2c54:	f8 94       	cli
    2c56:	de bf       	out	0x3e, r29	; 62
    2c58:	0f be       	out	0x3f, r0	; 63
    2c5a:	cd bf       	out	0x3d, r28	; 61
    2c5c:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    2c5e:	a2 e3       	ldi	r26, 0x32	; 50
    2c60:	b0 e0       	ldi	r27, 0x00	; 0
    2c62:	e2 e3       	ldi	r30, 0x32	; 50
    2c64:	f0 e0       	ldi	r31, 0x00	; 0
    2c66:	80 81       	ld	r24, Z
    2c68:	80 61       	ori	r24, 0x10	; 16
    2c6a:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    2c6c:	a2 e3       	ldi	r26, 0x32	; 50
    2c6e:	b0 e0       	ldi	r27, 0x00	; 0
    2c70:	e2 e3       	ldi	r30, 0x32	; 50
    2c72:	f0 e0       	ldi	r31, 0x00	; 0
    2c74:	80 81       	ld	r24, Z
    2c76:	8f 7d       	andi	r24, 0xDF	; 223
    2c78:	8c 93       	st	X, r24
    2c7a:	80 e0       	ldi	r24, 0x00	; 0
    2c7c:	90 e0       	ldi	r25, 0x00	; 0
    2c7e:	a0 e8       	ldi	r26, 0x80	; 128
    2c80:	bf e3       	ldi	r27, 0x3F	; 63
    2c82:	8d ab       	std	Y+53, r24	; 0x35
    2c84:	9e ab       	std	Y+54, r25	; 0x36
    2c86:	af ab       	std	Y+55, r26	; 0x37
    2c88:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c8a:	6d a9       	ldd	r22, Y+53	; 0x35
    2c8c:	7e a9       	ldd	r23, Y+54	; 0x36
    2c8e:	8f a9       	ldd	r24, Y+55	; 0x37
    2c90:	98 ad       	ldd	r25, Y+56	; 0x38
    2c92:	20 e0       	ldi	r18, 0x00	; 0
    2c94:	30 e0       	ldi	r19, 0x00	; 0
    2c96:	4a ef       	ldi	r20, 0xFA	; 250
    2c98:	54 e4       	ldi	r21, 0x44	; 68
    2c9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c9e:	dc 01       	movw	r26, r24
    2ca0:	cb 01       	movw	r24, r22
    2ca2:	89 ab       	std	Y+49, r24	; 0x31
    2ca4:	9a ab       	std	Y+50, r25	; 0x32
    2ca6:	ab ab       	std	Y+51, r26	; 0x33
    2ca8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2caa:	69 a9       	ldd	r22, Y+49	; 0x31
    2cac:	7a a9       	ldd	r23, Y+50	; 0x32
    2cae:	8b a9       	ldd	r24, Y+51	; 0x33
    2cb0:	9c a9       	ldd	r25, Y+52	; 0x34
    2cb2:	20 e0       	ldi	r18, 0x00	; 0
    2cb4:	30 e0       	ldi	r19, 0x00	; 0
    2cb6:	40 e8       	ldi	r20, 0x80	; 128
    2cb8:	5f e3       	ldi	r21, 0x3F	; 63
    2cba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cbe:	88 23       	and	r24, r24
    2cc0:	2c f4       	brge	.+10     	; 0x2ccc <LCD_displayCharacter+0x84>
		__ticks = 1;
    2cc2:	81 e0       	ldi	r24, 0x01	; 1
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	98 ab       	std	Y+48, r25	; 0x30
    2cc8:	8f a7       	std	Y+47, r24	; 0x2f
    2cca:	3f c0       	rjmp	.+126    	; 0x2d4a <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    2ccc:	69 a9       	ldd	r22, Y+49	; 0x31
    2cce:	7a a9       	ldd	r23, Y+50	; 0x32
    2cd0:	8b a9       	ldd	r24, Y+51	; 0x33
    2cd2:	9c a9       	ldd	r25, Y+52	; 0x34
    2cd4:	20 e0       	ldi	r18, 0x00	; 0
    2cd6:	3f ef       	ldi	r19, 0xFF	; 255
    2cd8:	4f e7       	ldi	r20, 0x7F	; 127
    2cda:	57 e4       	ldi	r21, 0x47	; 71
    2cdc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ce0:	18 16       	cp	r1, r24
    2ce2:	4c f5       	brge	.+82     	; 0x2d36 <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ce4:	6d a9       	ldd	r22, Y+53	; 0x35
    2ce6:	7e a9       	ldd	r23, Y+54	; 0x36
    2ce8:	8f a9       	ldd	r24, Y+55	; 0x37
    2cea:	98 ad       	ldd	r25, Y+56	; 0x38
    2cec:	20 e0       	ldi	r18, 0x00	; 0
    2cee:	30 e0       	ldi	r19, 0x00	; 0
    2cf0:	40 e2       	ldi	r20, 0x20	; 32
    2cf2:	51 e4       	ldi	r21, 0x41	; 65
    2cf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cf8:	dc 01       	movw	r26, r24
    2cfa:	cb 01       	movw	r24, r22
    2cfc:	bc 01       	movw	r22, r24
    2cfe:	cd 01       	movw	r24, r26
    2d00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d04:	dc 01       	movw	r26, r24
    2d06:	cb 01       	movw	r24, r22
    2d08:	98 ab       	std	Y+48, r25	; 0x30
    2d0a:	8f a7       	std	Y+47, r24	; 0x2f
    2d0c:	0f c0       	rjmp	.+30     	; 0x2d2c <LCD_displayCharacter+0xe4>
    2d0e:	88 ec       	ldi	r24, 0xC8	; 200
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	9e a7       	std	Y+46, r25	; 0x2e
    2d14:	8d a7       	std	Y+45, r24	; 0x2d
    2d16:	8d a5       	ldd	r24, Y+45	; 0x2d
    2d18:	9e a5       	ldd	r25, Y+46	; 0x2e
    2d1a:	01 97       	sbiw	r24, 0x01	; 1
    2d1c:	f1 f7       	brne	.-4      	; 0x2d1a <LCD_displayCharacter+0xd2>
    2d1e:	9e a7       	std	Y+46, r25	; 0x2e
    2d20:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d22:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d24:	98 a9       	ldd	r25, Y+48	; 0x30
    2d26:	01 97       	sbiw	r24, 0x01	; 1
    2d28:	98 ab       	std	Y+48, r25	; 0x30
    2d2a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d2c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d2e:	98 a9       	ldd	r25, Y+48	; 0x30
    2d30:	00 97       	sbiw	r24, 0x00	; 0
    2d32:	69 f7       	brne	.-38     	; 0x2d0e <LCD_displayCharacter+0xc6>
    2d34:	14 c0       	rjmp	.+40     	; 0x2d5e <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d36:	69 a9       	ldd	r22, Y+49	; 0x31
    2d38:	7a a9       	ldd	r23, Y+50	; 0x32
    2d3a:	8b a9       	ldd	r24, Y+51	; 0x33
    2d3c:	9c a9       	ldd	r25, Y+52	; 0x34
    2d3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d42:	dc 01       	movw	r26, r24
    2d44:	cb 01       	movw	r24, r22
    2d46:	98 ab       	std	Y+48, r25	; 0x30
    2d48:	8f a7       	std	Y+47, r24	; 0x2f
    2d4a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d4c:	98 a9       	ldd	r25, Y+48	; 0x30
    2d4e:	9c a7       	std	Y+44, r25	; 0x2c
    2d50:	8b a7       	std	Y+43, r24	; 0x2b
    2d52:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d54:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d56:	01 97       	sbiw	r24, 0x01	; 1
    2d58:	f1 f7       	brne	.-4      	; 0x2d56 <LCD_displayCharacter+0x10e>
    2d5a:	9c a7       	std	Y+44, r25	; 0x2c
    2d5c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    2d5e:	a2 e3       	ldi	r26, 0x32	; 50
    2d60:	b0 e0       	ldi	r27, 0x00	; 0
    2d62:	e2 e3       	ldi	r30, 0x32	; 50
    2d64:	f0 e0       	ldi	r31, 0x00	; 0
    2d66:	80 81       	ld	r24, Z
    2d68:	80 64       	ori	r24, 0x40	; 64
    2d6a:	8c 93       	st	X, r24
    2d6c:	80 e0       	ldi	r24, 0x00	; 0
    2d6e:	90 e0       	ldi	r25, 0x00	; 0
    2d70:	a0 e8       	ldi	r26, 0x80	; 128
    2d72:	bf e3       	ldi	r27, 0x3F	; 63
    2d74:	8f a3       	std	Y+39, r24	; 0x27
    2d76:	98 a7       	std	Y+40, r25	; 0x28
    2d78:	a9 a7       	std	Y+41, r26	; 0x29
    2d7a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d7c:	6f a1       	ldd	r22, Y+39	; 0x27
    2d7e:	78 a5       	ldd	r23, Y+40	; 0x28
    2d80:	89 a5       	ldd	r24, Y+41	; 0x29
    2d82:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d84:	20 e0       	ldi	r18, 0x00	; 0
    2d86:	30 e0       	ldi	r19, 0x00	; 0
    2d88:	4a ef       	ldi	r20, 0xFA	; 250
    2d8a:	54 e4       	ldi	r21, 0x44	; 68
    2d8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d90:	dc 01       	movw	r26, r24
    2d92:	cb 01       	movw	r24, r22
    2d94:	8b a3       	std	Y+35, r24	; 0x23
    2d96:	9c a3       	std	Y+36, r25	; 0x24
    2d98:	ad a3       	std	Y+37, r26	; 0x25
    2d9a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d9c:	6b a1       	ldd	r22, Y+35	; 0x23
    2d9e:	7c a1       	ldd	r23, Y+36	; 0x24
    2da0:	8d a1       	ldd	r24, Y+37	; 0x25
    2da2:	9e a1       	ldd	r25, Y+38	; 0x26
    2da4:	20 e0       	ldi	r18, 0x00	; 0
    2da6:	30 e0       	ldi	r19, 0x00	; 0
    2da8:	40 e8       	ldi	r20, 0x80	; 128
    2daa:	5f e3       	ldi	r21, 0x3F	; 63
    2dac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2db0:	88 23       	and	r24, r24
    2db2:	2c f4       	brge	.+10     	; 0x2dbe <LCD_displayCharacter+0x176>
		__ticks = 1;
    2db4:	81 e0       	ldi	r24, 0x01	; 1
    2db6:	90 e0       	ldi	r25, 0x00	; 0
    2db8:	9a a3       	std	Y+34, r25	; 0x22
    2dba:	89 a3       	std	Y+33, r24	; 0x21
    2dbc:	3f c0       	rjmp	.+126    	; 0x2e3c <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    2dbe:	6b a1       	ldd	r22, Y+35	; 0x23
    2dc0:	7c a1       	ldd	r23, Y+36	; 0x24
    2dc2:	8d a1       	ldd	r24, Y+37	; 0x25
    2dc4:	9e a1       	ldd	r25, Y+38	; 0x26
    2dc6:	20 e0       	ldi	r18, 0x00	; 0
    2dc8:	3f ef       	ldi	r19, 0xFF	; 255
    2dca:	4f e7       	ldi	r20, 0x7F	; 127
    2dcc:	57 e4       	ldi	r21, 0x47	; 71
    2dce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dd2:	18 16       	cp	r1, r24
    2dd4:	4c f5       	brge	.+82     	; 0x2e28 <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dd6:	6f a1       	ldd	r22, Y+39	; 0x27
    2dd8:	78 a5       	ldd	r23, Y+40	; 0x28
    2dda:	89 a5       	ldd	r24, Y+41	; 0x29
    2ddc:	9a a5       	ldd	r25, Y+42	; 0x2a
    2dde:	20 e0       	ldi	r18, 0x00	; 0
    2de0:	30 e0       	ldi	r19, 0x00	; 0
    2de2:	40 e2       	ldi	r20, 0x20	; 32
    2de4:	51 e4       	ldi	r21, 0x41	; 65
    2de6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dea:	dc 01       	movw	r26, r24
    2dec:	cb 01       	movw	r24, r22
    2dee:	bc 01       	movw	r22, r24
    2df0:	cd 01       	movw	r24, r26
    2df2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2df6:	dc 01       	movw	r26, r24
    2df8:	cb 01       	movw	r24, r22
    2dfa:	9a a3       	std	Y+34, r25	; 0x22
    2dfc:	89 a3       	std	Y+33, r24	; 0x21
    2dfe:	0f c0       	rjmp	.+30     	; 0x2e1e <LCD_displayCharacter+0x1d6>
    2e00:	88 ec       	ldi	r24, 0xC8	; 200
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	98 a3       	std	Y+32, r25	; 0x20
    2e06:	8f 8f       	std	Y+31, r24	; 0x1f
    2e08:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e0a:	98 a1       	ldd	r25, Y+32	; 0x20
    2e0c:	01 97       	sbiw	r24, 0x01	; 1
    2e0e:	f1 f7       	brne	.-4      	; 0x2e0c <LCD_displayCharacter+0x1c4>
    2e10:	98 a3       	std	Y+32, r25	; 0x20
    2e12:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e14:	89 a1       	ldd	r24, Y+33	; 0x21
    2e16:	9a a1       	ldd	r25, Y+34	; 0x22
    2e18:	01 97       	sbiw	r24, 0x01	; 1
    2e1a:	9a a3       	std	Y+34, r25	; 0x22
    2e1c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e1e:	89 a1       	ldd	r24, Y+33	; 0x21
    2e20:	9a a1       	ldd	r25, Y+34	; 0x22
    2e22:	00 97       	sbiw	r24, 0x00	; 0
    2e24:	69 f7       	brne	.-38     	; 0x2e00 <LCD_displayCharacter+0x1b8>
    2e26:	14 c0       	rjmp	.+40     	; 0x2e50 <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e28:	6b a1       	ldd	r22, Y+35	; 0x23
    2e2a:	7c a1       	ldd	r23, Y+36	; 0x24
    2e2c:	8d a1       	ldd	r24, Y+37	; 0x25
    2e2e:	9e a1       	ldd	r25, Y+38	; 0x26
    2e30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e34:	dc 01       	movw	r26, r24
    2e36:	cb 01       	movw	r24, r22
    2e38:	9a a3       	std	Y+34, r25	; 0x22
    2e3a:	89 a3       	std	Y+33, r24	; 0x21
    2e3c:	89 a1       	ldd	r24, Y+33	; 0x21
    2e3e:	9a a1       	ldd	r25, Y+34	; 0x22
    2e40:	9e 8f       	std	Y+30, r25	; 0x1e
    2e42:	8d 8f       	std	Y+29, r24	; 0x1d
    2e44:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e46:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e48:	01 97       	sbiw	r24, 0x01	; 1
    2e4a:	f1 f7       	brne	.-4      	; 0x2e48 <LCD_displayCharacter+0x200>
    2e4c:	9e 8f       	std	Y+30, r25	; 0x1e
    2e4e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = data; /* out the required data char to the data bus D0 --> D7 */
    2e50:	eb e3       	ldi	r30, 0x3B	; 59
    2e52:	f0 e0       	ldi	r31, 0x00	; 0
    2e54:	89 ad       	ldd	r24, Y+57	; 0x39
    2e56:	80 83       	st	Z, r24
    2e58:	80 e0       	ldi	r24, 0x00	; 0
    2e5a:	90 e0       	ldi	r25, 0x00	; 0
    2e5c:	a0 e8       	ldi	r26, 0x80	; 128
    2e5e:	bf e3       	ldi	r27, 0x3F	; 63
    2e60:	89 8f       	std	Y+25, r24	; 0x19
    2e62:	9a 8f       	std	Y+26, r25	; 0x1a
    2e64:	ab 8f       	std	Y+27, r26	; 0x1b
    2e66:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e68:	69 8d       	ldd	r22, Y+25	; 0x19
    2e6a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e6e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e70:	20 e0       	ldi	r18, 0x00	; 0
    2e72:	30 e0       	ldi	r19, 0x00	; 0
    2e74:	4a ef       	ldi	r20, 0xFA	; 250
    2e76:	54 e4       	ldi	r21, 0x44	; 68
    2e78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e7c:	dc 01       	movw	r26, r24
    2e7e:	cb 01       	movw	r24, r22
    2e80:	8d 8b       	std	Y+21, r24	; 0x15
    2e82:	9e 8b       	std	Y+22, r25	; 0x16
    2e84:	af 8b       	std	Y+23, r26	; 0x17
    2e86:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e88:	6d 89       	ldd	r22, Y+21	; 0x15
    2e8a:	7e 89       	ldd	r23, Y+22	; 0x16
    2e8c:	8f 89       	ldd	r24, Y+23	; 0x17
    2e8e:	98 8d       	ldd	r25, Y+24	; 0x18
    2e90:	20 e0       	ldi	r18, 0x00	; 0
    2e92:	30 e0       	ldi	r19, 0x00	; 0
    2e94:	40 e8       	ldi	r20, 0x80	; 128
    2e96:	5f e3       	ldi	r21, 0x3F	; 63
    2e98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e9c:	88 23       	and	r24, r24
    2e9e:	2c f4       	brge	.+10     	; 0x2eaa <LCD_displayCharacter+0x262>
		__ticks = 1;
    2ea0:	81 e0       	ldi	r24, 0x01	; 1
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	9c 8b       	std	Y+20, r25	; 0x14
    2ea6:	8b 8b       	std	Y+19, r24	; 0x13
    2ea8:	3f c0       	rjmp	.+126    	; 0x2f28 <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    2eaa:	6d 89       	ldd	r22, Y+21	; 0x15
    2eac:	7e 89       	ldd	r23, Y+22	; 0x16
    2eae:	8f 89       	ldd	r24, Y+23	; 0x17
    2eb0:	98 8d       	ldd	r25, Y+24	; 0x18
    2eb2:	20 e0       	ldi	r18, 0x00	; 0
    2eb4:	3f ef       	ldi	r19, 0xFF	; 255
    2eb6:	4f e7       	ldi	r20, 0x7F	; 127
    2eb8:	57 e4       	ldi	r21, 0x47	; 71
    2eba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ebe:	18 16       	cp	r1, r24
    2ec0:	4c f5       	brge	.+82     	; 0x2f14 <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ec2:	69 8d       	ldd	r22, Y+25	; 0x19
    2ec4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ec6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ec8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2eca:	20 e0       	ldi	r18, 0x00	; 0
    2ecc:	30 e0       	ldi	r19, 0x00	; 0
    2ece:	40 e2       	ldi	r20, 0x20	; 32
    2ed0:	51 e4       	ldi	r21, 0x41	; 65
    2ed2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ed6:	dc 01       	movw	r26, r24
    2ed8:	cb 01       	movw	r24, r22
    2eda:	bc 01       	movw	r22, r24
    2edc:	cd 01       	movw	r24, r26
    2ede:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ee2:	dc 01       	movw	r26, r24
    2ee4:	cb 01       	movw	r24, r22
    2ee6:	9c 8b       	std	Y+20, r25	; 0x14
    2ee8:	8b 8b       	std	Y+19, r24	; 0x13
    2eea:	0f c0       	rjmp	.+30     	; 0x2f0a <LCD_displayCharacter+0x2c2>
    2eec:	88 ec       	ldi	r24, 0xC8	; 200
    2eee:	90 e0       	ldi	r25, 0x00	; 0
    2ef0:	9a 8b       	std	Y+18, r25	; 0x12
    2ef2:	89 8b       	std	Y+17, r24	; 0x11
    2ef4:	89 89       	ldd	r24, Y+17	; 0x11
    2ef6:	9a 89       	ldd	r25, Y+18	; 0x12
    2ef8:	01 97       	sbiw	r24, 0x01	; 1
    2efa:	f1 f7       	brne	.-4      	; 0x2ef8 <LCD_displayCharacter+0x2b0>
    2efc:	9a 8b       	std	Y+18, r25	; 0x12
    2efe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f00:	8b 89       	ldd	r24, Y+19	; 0x13
    2f02:	9c 89       	ldd	r25, Y+20	; 0x14
    2f04:	01 97       	sbiw	r24, 0x01	; 1
    2f06:	9c 8b       	std	Y+20, r25	; 0x14
    2f08:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f0a:	8b 89       	ldd	r24, Y+19	; 0x13
    2f0c:	9c 89       	ldd	r25, Y+20	; 0x14
    2f0e:	00 97       	sbiw	r24, 0x00	; 0
    2f10:	69 f7       	brne	.-38     	; 0x2eec <LCD_displayCharacter+0x2a4>
    2f12:	14 c0       	rjmp	.+40     	; 0x2f3c <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f14:	6d 89       	ldd	r22, Y+21	; 0x15
    2f16:	7e 89       	ldd	r23, Y+22	; 0x16
    2f18:	8f 89       	ldd	r24, Y+23	; 0x17
    2f1a:	98 8d       	ldd	r25, Y+24	; 0x18
    2f1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f20:	dc 01       	movw	r26, r24
    2f22:	cb 01       	movw	r24, r22
    2f24:	9c 8b       	std	Y+20, r25	; 0x14
    2f26:	8b 8b       	std	Y+19, r24	; 0x13
    2f28:	8b 89       	ldd	r24, Y+19	; 0x13
    2f2a:	9c 89       	ldd	r25, Y+20	; 0x14
    2f2c:	98 8b       	std	Y+16, r25	; 0x10
    2f2e:	8f 87       	std	Y+15, r24	; 0x0f
    2f30:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f32:	98 89       	ldd	r25, Y+16	; 0x10
    2f34:	01 97       	sbiw	r24, 0x01	; 1
    2f36:	f1 f7       	brne	.-4      	; 0x2f34 <LCD_displayCharacter+0x2ec>
    2f38:	98 8b       	std	Y+16, r25	; 0x10
    2f3a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2f3c:	a2 e3       	ldi	r26, 0x32	; 50
    2f3e:	b0 e0       	ldi	r27, 0x00	; 0
    2f40:	e2 e3       	ldi	r30, 0x32	; 50
    2f42:	f0 e0       	ldi	r31, 0x00	; 0
    2f44:	80 81       	ld	r24, Z
    2f46:	8f 7b       	andi	r24, 0xBF	; 191
    2f48:	8c 93       	st	X, r24
    2f4a:	80 e0       	ldi	r24, 0x00	; 0
    2f4c:	90 e0       	ldi	r25, 0x00	; 0
    2f4e:	a0 e8       	ldi	r26, 0x80	; 128
    2f50:	bf e3       	ldi	r27, 0x3F	; 63
    2f52:	8b 87       	std	Y+11, r24	; 0x0b
    2f54:	9c 87       	std	Y+12, r25	; 0x0c
    2f56:	ad 87       	std	Y+13, r26	; 0x0d
    2f58:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f60:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f62:	20 e0       	ldi	r18, 0x00	; 0
    2f64:	30 e0       	ldi	r19, 0x00	; 0
    2f66:	4a ef       	ldi	r20, 0xFA	; 250
    2f68:	54 e4       	ldi	r21, 0x44	; 68
    2f6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f6e:	dc 01       	movw	r26, r24
    2f70:	cb 01       	movw	r24, r22
    2f72:	8f 83       	std	Y+7, r24	; 0x07
    2f74:	98 87       	std	Y+8, r25	; 0x08
    2f76:	a9 87       	std	Y+9, r26	; 0x09
    2f78:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f7a:	6f 81       	ldd	r22, Y+7	; 0x07
    2f7c:	78 85       	ldd	r23, Y+8	; 0x08
    2f7e:	89 85       	ldd	r24, Y+9	; 0x09
    2f80:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f82:	20 e0       	ldi	r18, 0x00	; 0
    2f84:	30 e0       	ldi	r19, 0x00	; 0
    2f86:	40 e8       	ldi	r20, 0x80	; 128
    2f88:	5f e3       	ldi	r21, 0x3F	; 63
    2f8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f8e:	88 23       	and	r24, r24
    2f90:	2c f4       	brge	.+10     	; 0x2f9c <LCD_displayCharacter+0x354>
		__ticks = 1;
    2f92:	81 e0       	ldi	r24, 0x01	; 1
    2f94:	90 e0       	ldi	r25, 0x00	; 0
    2f96:	9e 83       	std	Y+6, r25	; 0x06
    2f98:	8d 83       	std	Y+5, r24	; 0x05
    2f9a:	3f c0       	rjmp	.+126    	; 0x301a <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    2f9c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f9e:	78 85       	ldd	r23, Y+8	; 0x08
    2fa0:	89 85       	ldd	r24, Y+9	; 0x09
    2fa2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fa4:	20 e0       	ldi	r18, 0x00	; 0
    2fa6:	3f ef       	ldi	r19, 0xFF	; 255
    2fa8:	4f e7       	ldi	r20, 0x7F	; 127
    2faa:	57 e4       	ldi	r21, 0x47	; 71
    2fac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fb0:	18 16       	cp	r1, r24
    2fb2:	4c f5       	brge	.+82     	; 0x3006 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fb4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fb6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fba:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fbc:	20 e0       	ldi	r18, 0x00	; 0
    2fbe:	30 e0       	ldi	r19, 0x00	; 0
    2fc0:	40 e2       	ldi	r20, 0x20	; 32
    2fc2:	51 e4       	ldi	r21, 0x41	; 65
    2fc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc8:	dc 01       	movw	r26, r24
    2fca:	cb 01       	movw	r24, r22
    2fcc:	bc 01       	movw	r22, r24
    2fce:	cd 01       	movw	r24, r26
    2fd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd4:	dc 01       	movw	r26, r24
    2fd6:	cb 01       	movw	r24, r22
    2fd8:	9e 83       	std	Y+6, r25	; 0x06
    2fda:	8d 83       	std	Y+5, r24	; 0x05
    2fdc:	0f c0       	rjmp	.+30     	; 0x2ffc <LCD_displayCharacter+0x3b4>
    2fde:	88 ec       	ldi	r24, 0xC8	; 200
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	9c 83       	std	Y+4, r25	; 0x04
    2fe4:	8b 83       	std	Y+3, r24	; 0x03
    2fe6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe8:	9c 81       	ldd	r25, Y+4	; 0x04
    2fea:	01 97       	sbiw	r24, 0x01	; 1
    2fec:	f1 f7       	brne	.-4      	; 0x2fea <LCD_displayCharacter+0x3a2>
    2fee:	9c 83       	std	Y+4, r25	; 0x04
    2ff0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ff2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ff4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ff6:	01 97       	sbiw	r24, 0x01	; 1
    2ff8:	9e 83       	std	Y+6, r25	; 0x06
    2ffa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ffc:	8d 81       	ldd	r24, Y+5	; 0x05
    2ffe:	9e 81       	ldd	r25, Y+6	; 0x06
    3000:	00 97       	sbiw	r24, 0x00	; 0
    3002:	69 f7       	brne	.-38     	; 0x2fde <LCD_displayCharacter+0x396>
    3004:	14 c0       	rjmp	.+40     	; 0x302e <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3006:	6f 81       	ldd	r22, Y+7	; 0x07
    3008:	78 85       	ldd	r23, Y+8	; 0x08
    300a:	89 85       	ldd	r24, Y+9	; 0x09
    300c:	9a 85       	ldd	r25, Y+10	; 0x0a
    300e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3012:	dc 01       	movw	r26, r24
    3014:	cb 01       	movw	r24, r22
    3016:	9e 83       	std	Y+6, r25	; 0x06
    3018:	8d 83       	std	Y+5, r24	; 0x05
    301a:	8d 81       	ldd	r24, Y+5	; 0x05
    301c:	9e 81       	ldd	r25, Y+6	; 0x06
    301e:	9a 83       	std	Y+2, r25	; 0x02
    3020:	89 83       	std	Y+1, r24	; 0x01
    3022:	89 81       	ldd	r24, Y+1	; 0x01
    3024:	9a 81       	ldd	r25, Y+2	; 0x02
    3026:	01 97       	sbiw	r24, 0x01	; 1
    3028:	f1 f7       	brne	.-4      	; 0x3026 <LCD_displayCharacter+0x3de>
    302a:	9a 83       	std	Y+2, r25	; 0x02
    302c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */	
}
    302e:	e9 96       	adiw	r28, 0x39	; 57
    3030:	0f b6       	in	r0, 0x3f	; 63
    3032:	f8 94       	cli
    3034:	de bf       	out	0x3e, r29	; 62
    3036:	0f be       	out	0x3f, r0	; 63
    3038:	cd bf       	out	0x3d, r28	; 61
    303a:	cf 91       	pop	r28
    303c:	df 91       	pop	r29
    303e:	08 95       	ret

00003040 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    3040:	df 93       	push	r29
    3042:	cf 93       	push	r28
    3044:	00 d0       	rcall	.+0      	; 0x3046 <LCD_displayString+0x6>
    3046:	0f 92       	push	r0
    3048:	cd b7       	in	r28, 0x3d	; 61
    304a:	de b7       	in	r29, 0x3e	; 62
    304c:	9b 83       	std	Y+3, r25	; 0x03
    304e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3050:	19 82       	std	Y+1, r1	; 0x01
    3052:	0e c0       	rjmp	.+28     	; 0x3070 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    3054:	89 81       	ldd	r24, Y+1	; 0x01
    3056:	28 2f       	mov	r18, r24
    3058:	30 e0       	ldi	r19, 0x00	; 0
    305a:	8a 81       	ldd	r24, Y+2	; 0x02
    305c:	9b 81       	ldd	r25, Y+3	; 0x03
    305e:	fc 01       	movw	r30, r24
    3060:	e2 0f       	add	r30, r18
    3062:	f3 1f       	adc	r31, r19
    3064:	80 81       	ld	r24, Z
    3066:	0e 94 24 16 	call	0x2c48	; 0x2c48 <LCD_displayCharacter>
		i++;
    306a:	89 81       	ldd	r24, Y+1	; 0x01
    306c:	8f 5f       	subi	r24, 0xFF	; 255
    306e:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    3070:	89 81       	ldd	r24, Y+1	; 0x01
    3072:	28 2f       	mov	r18, r24
    3074:	30 e0       	ldi	r19, 0x00	; 0
    3076:	8a 81       	ldd	r24, Y+2	; 0x02
    3078:	9b 81       	ldd	r25, Y+3	; 0x03
    307a:	fc 01       	movw	r30, r24
    307c:	e2 0f       	add	r30, r18
    307e:	f3 1f       	adc	r31, r19
    3080:	80 81       	ld	r24, Z
    3082:	88 23       	and	r24, r24
    3084:	39 f7       	brne	.-50     	; 0x3054 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    3086:	0f 90       	pop	r0
    3088:	0f 90       	pop	r0
    308a:	0f 90       	pop	r0
    308c:	cf 91       	pop	r28
    308e:	df 91       	pop	r29
    3090:	08 95       	ret

00003092 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    3092:	df 93       	push	r29
    3094:	cf 93       	push	r28
    3096:	00 d0       	rcall	.+0      	; 0x3098 <LCD_goToRowColumn+0x6>
    3098:	00 d0       	rcall	.+0      	; 0x309a <LCD_goToRowColumn+0x8>
    309a:	0f 92       	push	r0
    309c:	cd b7       	in	r28, 0x3d	; 61
    309e:	de b7       	in	r29, 0x3e	; 62
    30a0:	8a 83       	std	Y+2, r24	; 0x02
    30a2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    30a4:	8a 81       	ldd	r24, Y+2	; 0x02
    30a6:	28 2f       	mov	r18, r24
    30a8:	30 e0       	ldi	r19, 0x00	; 0
    30aa:	3d 83       	std	Y+5, r19	; 0x05
    30ac:	2c 83       	std	Y+4, r18	; 0x04
    30ae:	8c 81       	ldd	r24, Y+4	; 0x04
    30b0:	9d 81       	ldd	r25, Y+5	; 0x05
    30b2:	81 30       	cpi	r24, 0x01	; 1
    30b4:	91 05       	cpc	r25, r1
    30b6:	c1 f0       	breq	.+48     	; 0x30e8 <LCD_goToRowColumn+0x56>
    30b8:	2c 81       	ldd	r18, Y+4	; 0x04
    30ba:	3d 81       	ldd	r19, Y+5	; 0x05
    30bc:	22 30       	cpi	r18, 0x02	; 2
    30be:	31 05       	cpc	r19, r1
    30c0:	2c f4       	brge	.+10     	; 0x30cc <LCD_goToRowColumn+0x3a>
    30c2:	8c 81       	ldd	r24, Y+4	; 0x04
    30c4:	9d 81       	ldd	r25, Y+5	; 0x05
    30c6:	00 97       	sbiw	r24, 0x00	; 0
    30c8:	61 f0       	breq	.+24     	; 0x30e2 <LCD_goToRowColumn+0x50>
    30ca:	19 c0       	rjmp	.+50     	; 0x30fe <LCD_goToRowColumn+0x6c>
    30cc:	2c 81       	ldd	r18, Y+4	; 0x04
    30ce:	3d 81       	ldd	r19, Y+5	; 0x05
    30d0:	22 30       	cpi	r18, 0x02	; 2
    30d2:	31 05       	cpc	r19, r1
    30d4:	69 f0       	breq	.+26     	; 0x30f0 <LCD_goToRowColumn+0x5e>
    30d6:	8c 81       	ldd	r24, Y+4	; 0x04
    30d8:	9d 81       	ldd	r25, Y+5	; 0x05
    30da:	83 30       	cpi	r24, 0x03	; 3
    30dc:	91 05       	cpc	r25, r1
    30de:	61 f0       	breq	.+24     	; 0x30f8 <LCD_goToRowColumn+0x66>
    30e0:	0e c0       	rjmp	.+28     	; 0x30fe <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    30e2:	8b 81       	ldd	r24, Y+3	; 0x03
    30e4:	89 83       	std	Y+1, r24	; 0x01
    30e6:	0b c0       	rjmp	.+22     	; 0x30fe <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    30e8:	8b 81       	ldd	r24, Y+3	; 0x03
    30ea:	80 5c       	subi	r24, 0xC0	; 192
    30ec:	89 83       	std	Y+1, r24	; 0x01
    30ee:	07 c0       	rjmp	.+14     	; 0x30fe <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    30f0:	8b 81       	ldd	r24, Y+3	; 0x03
    30f2:	80 5f       	subi	r24, 0xF0	; 240
    30f4:	89 83       	std	Y+1, r24	; 0x01
    30f6:	03 c0       	rjmp	.+6      	; 0x30fe <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    30f8:	8b 81       	ldd	r24, Y+3	; 0x03
    30fa:	80 5b       	subi	r24, 0xB0	; 176
    30fc:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    30fe:	89 81       	ldd	r24, Y+1	; 0x01
    3100:	80 68       	ori	r24, 0x80	; 128
    3102:	0e 94 28 14 	call	0x2850	; 0x2850 <LCD_sendCommand>
}
    3106:	0f 90       	pop	r0
    3108:	0f 90       	pop	r0
    310a:	0f 90       	pop	r0
    310c:	0f 90       	pop	r0
    310e:	0f 90       	pop	r0
    3110:	cf 91       	pop	r28
    3112:	df 91       	pop	r29
    3114:	08 95       	ret

00003116 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3116:	df 93       	push	r29
    3118:	cf 93       	push	r28
    311a:	00 d0       	rcall	.+0      	; 0x311c <LCD_displayStringRowColumn+0x6>
    311c:	00 d0       	rcall	.+0      	; 0x311e <LCD_displayStringRowColumn+0x8>
    311e:	cd b7       	in	r28, 0x3d	; 61
    3120:	de b7       	in	r29, 0x3e	; 62
    3122:	89 83       	std	Y+1, r24	; 0x01
    3124:	6a 83       	std	Y+2, r22	; 0x02
    3126:	5c 83       	std	Y+4, r21	; 0x04
    3128:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    312a:	89 81       	ldd	r24, Y+1	; 0x01
    312c:	6a 81       	ldd	r22, Y+2	; 0x02
    312e:	0e 94 49 18 	call	0x3092	; 0x3092 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    3132:	8b 81       	ldd	r24, Y+3	; 0x03
    3134:	9c 81       	ldd	r25, Y+4	; 0x04
    3136:	0e 94 20 18 	call	0x3040	; 0x3040 <LCD_displayString>
}
    313a:	0f 90       	pop	r0
    313c:	0f 90       	pop	r0
    313e:	0f 90       	pop	r0
    3140:	0f 90       	pop	r0
    3142:	cf 91       	pop	r28
    3144:	df 91       	pop	r29
    3146:	08 95       	ret

00003148 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    3148:	df 93       	push	r29
    314a:	cf 93       	push	r28
    314c:	cd b7       	in	r28, 0x3d	; 61
    314e:	de b7       	in	r29, 0x3e	; 62
    3150:	62 97       	sbiw	r28, 0x12	; 18
    3152:	0f b6       	in	r0, 0x3f	; 63
    3154:	f8 94       	cli
    3156:	de bf       	out	0x3e, r29	; 62
    3158:	0f be       	out	0x3f, r0	; 63
    315a:	cd bf       	out	0x3d, r28	; 61
    315c:	9a 8b       	std	Y+18, r25	; 0x12
    315e:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    3160:	89 89       	ldd	r24, Y+17	; 0x11
    3162:	9a 89       	ldd	r25, Y+18	; 0x12
    3164:	9e 01       	movw	r18, r28
    3166:	2f 5f       	subi	r18, 0xFF	; 255
    3168:	3f 4f       	sbci	r19, 0xFF	; 255
    316a:	b9 01       	movw	r22, r18
    316c:	4a e0       	ldi	r20, 0x0A	; 10
    316e:	50 e0       	ldi	r21, 0x00	; 0
    3170:	0e 94 16 1a 	call	0x342c	; 0x342c <itoa>
   LCD_displayString(buff);
    3174:	ce 01       	movw	r24, r28
    3176:	01 96       	adiw	r24, 0x01	; 1
    3178:	0e 94 20 18 	call	0x3040	; 0x3040 <LCD_displayString>
}
    317c:	62 96       	adiw	r28, 0x12	; 18
    317e:	0f b6       	in	r0, 0x3f	; 63
    3180:	f8 94       	cli
    3182:	de bf       	out	0x3e, r29	; 62
    3184:	0f be       	out	0x3f, r0	; 63
    3186:	cd bf       	out	0x3d, r28	; 61
    3188:	cf 91       	pop	r28
    318a:	df 91       	pop	r29
    318c:	08 95       	ret

0000318e <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    318e:	df 93       	push	r29
    3190:	cf 93       	push	r28
    3192:	cd b7       	in	r28, 0x3d	; 61
    3194:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    3196:	81 e0       	ldi	r24, 0x01	; 1
    3198:	0e 94 28 14 	call	0x2850	; 0x2850 <LCD_sendCommand>
}
    319c:	cf 91       	pop	r28
    319e:	df 91       	pop	r29
    31a0:	08 95       	ret

000031a2 <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(const  UART_ConfigType * Config_Ptr)
{
    31a2:	df 93       	push	r29
    31a4:	cf 93       	push	r28
    31a6:	00 d0       	rcall	.+0      	; 0x31a8 <UART_init+0x6>
    31a8:	cd b7       	in	r28, 0x3d	; 61
    31aa:	de b7       	in	r29, 0x3e	; 62
    31ac:	9a 83       	std	Y+2, r25	; 0x02
    31ae:	89 83       	std	Y+1, r24	; 0x01
	/* U2X = 1 for double transmission speed */
	UCSRA =(UCSRC &0XFD )|((Config_Ptr->  OPERATION_MODE )<<1);
    31b0:	ab e2       	ldi	r26, 0x2B	; 43
    31b2:	b0 e0       	ldi	r27, 0x00	; 0
    31b4:	e0 e4       	ldi	r30, 0x40	; 64
    31b6:	f0 e0       	ldi	r31, 0x00	; 0
    31b8:	80 81       	ld	r24, Z
    31ba:	28 2f       	mov	r18, r24
    31bc:	2d 7f       	andi	r18, 0xFD	; 253
    31be:	e9 81       	ldd	r30, Y+1	; 0x01
    31c0:	fa 81       	ldd	r31, Y+2	; 0x02
    31c2:	83 81       	ldd	r24, Z+3	; 0x03
    31c4:	88 2f       	mov	r24, r24
    31c6:	90 e0       	ldi	r25, 0x00	; 0
    31c8:	88 0f       	add	r24, r24
    31ca:	99 1f       	adc	r25, r25
    31cc:	82 2b       	or	r24, r18
    31ce:	8c 93       	st	X, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    31d0:	ea e2       	ldi	r30, 0x2A	; 42
    31d2:	f0 e0       	ldi	r31, 0x00	; 0
    31d4:	88 e1       	ldi	r24, 0x18	; 24
    31d6:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    31d8:	e0 e4       	ldi	r30, 0x40	; 64
    31da:	f0 e0       	ldi	r31, 0x00	; 0
    31dc:	86 e8       	ldi	r24, 0x86	; 134
    31de:	80 83       	st	Z, r24
	UCSRC=(UCSRC &0XFB )|((Config_Ptr-> STOP_BIT)<<3);
    31e0:	a0 e4       	ldi	r26, 0x40	; 64
    31e2:	b0 e0       	ldi	r27, 0x00	; 0
    31e4:	e0 e4       	ldi	r30, 0x40	; 64
    31e6:	f0 e0       	ldi	r31, 0x00	; 0
    31e8:	80 81       	ld	r24, Z
    31ea:	28 2f       	mov	r18, r24
    31ec:	2b 7f       	andi	r18, 0xFB	; 251
    31ee:	e9 81       	ldd	r30, Y+1	; 0x01
    31f0:	fa 81       	ldd	r31, Y+2	; 0x02
    31f2:	80 81       	ld	r24, Z
    31f4:	88 2f       	mov	r24, r24
    31f6:	90 e0       	ldi	r25, 0x00	; 0
    31f8:	88 0f       	add	r24, r24
    31fa:	99 1f       	adc	r25, r25
    31fc:	88 0f       	add	r24, r24
    31fe:	99 1f       	adc	r25, r25
    3200:	88 0f       	add	r24, r24
    3202:	99 1f       	adc	r25, r25
    3204:	82 2b       	or	r24, r18
    3206:	8c 93       	st	X, r24
	UCSRC=(UCSRC &0XDF )|((Config_Ptr-> MODE)<<6);
    3208:	a0 e4       	ldi	r26, 0x40	; 64
    320a:	b0 e0       	ldi	r27, 0x00	; 0
    320c:	e0 e4       	ldi	r30, 0x40	; 64
    320e:	f0 e0       	ldi	r31, 0x00	; 0
    3210:	80 81       	ld	r24, Z
    3212:	28 2f       	mov	r18, r24
    3214:	2f 7d       	andi	r18, 0xDF	; 223
    3216:	e9 81       	ldd	r30, Y+1	; 0x01
    3218:	fa 81       	ldd	r31, Y+2	; 0x02
    321a:	81 81       	ldd	r24, Z+1	; 0x01
    321c:	88 2f       	mov	r24, r24
    321e:	90 e0       	ldi	r25, 0x00	; 0
    3220:	00 24       	eor	r0, r0
    3222:	96 95       	lsr	r25
    3224:	87 95       	ror	r24
    3226:	07 94       	ror	r0
    3228:	96 95       	lsr	r25
    322a:	87 95       	ror	r24
    322c:	07 94       	ror	r0
    322e:	98 2f       	mov	r25, r24
    3230:	80 2d       	mov	r24, r0
    3232:	82 2b       	or	r24, r18
    3234:	8c 93       	st	X, r24
	UCSRC=(UCSRC &0XE7 )|((Config_Ptr-> PARITY_MODE)<<4);
    3236:	a0 e4       	ldi	r26, 0x40	; 64
    3238:	b0 e0       	ldi	r27, 0x00	; 0
    323a:	e0 e4       	ldi	r30, 0x40	; 64
    323c:	f0 e0       	ldi	r31, 0x00	; 0
    323e:	80 81       	ld	r24, Z
    3240:	28 2f       	mov	r18, r24
    3242:	27 7e       	andi	r18, 0xE7	; 231
    3244:	e9 81       	ldd	r30, Y+1	; 0x01
    3246:	fa 81       	ldd	r31, Y+2	; 0x02
    3248:	82 81       	ldd	r24, Z+2	; 0x02
    324a:	88 2f       	mov	r24, r24
    324c:	90 e0       	ldi	r25, 0x00	; 0
    324e:	82 95       	swap	r24
    3250:	92 95       	swap	r25
    3252:	90 7f       	andi	r25, 0xF0	; 240
    3254:	98 27       	eor	r25, r24
    3256:	80 7f       	andi	r24, 0xF0	; 240
    3258:	98 27       	eor	r25, r24
    325a:	82 2b       	or	r24, r18
    325c:	8c 93       	st	X, r24
	



	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
if (	Config_Ptr->  OPERATION_MODE==ASYNCHRONOUS_DOUBLE_SPEED_MODE){
    325e:	e9 81       	ldd	r30, Y+1	; 0x01
    3260:	fa 81       	ldd	r31, Y+2	; 0x02
    3262:	83 81       	ldd	r24, Z+3	; 0x03
    3264:	81 30       	cpi	r24, 0x01	; 1
    3266:	41 f4       	brne	.+16     	; 0x3278 <UART_init+0xd6>
	UBRRH = BAUD_PRESCALE2>>8;
    3268:	e0 e4       	ldi	r30, 0x40	; 64
    326a:	f0 e0       	ldi	r31, 0x00	; 0
    326c:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE2;}
    326e:	e9 e2       	ldi	r30, 0x29	; 41
    3270:	f0 e0       	ldi	r31, 0x00	; 0
    3272:	87 e6       	ldi	r24, 0x67	; 103
    3274:	80 83       	st	Z, r24
    3276:	0c c0       	rjmp	.+24     	; 0x3290 <UART_init+0xee>
else if (	Config_Ptr->  OPERATION_MODE==ASYNCHRONOUS_NORMAL_MODE){
    3278:	e9 81       	ldd	r30, Y+1	; 0x01
    327a:	fa 81       	ldd	r31, Y+2	; 0x02
    327c:	83 81       	ldd	r24, Z+3	; 0x03
    327e:	88 23       	and	r24, r24
    3280:	39 f4       	brne	.+14     	; 0x3290 <UART_init+0xee>
	UBRRH = BAUD_PRESCALE1>>8;
    3282:	e0 e4       	ldi	r30, 0x40	; 64
    3284:	f0 e0       	ldi	r31, 0x00	; 0
    3286:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE1;}
    3288:	e9 e2       	ldi	r30, 0x29	; 41
    328a:	f0 e0       	ldi	r31, 0x00	; 0
    328c:	83 e3       	ldi	r24, 0x33	; 51
    328e:	80 83       	st	Z, r24
}
    3290:	0f 90       	pop	r0
    3292:	0f 90       	pop	r0
    3294:	cf 91       	pop	r28
    3296:	df 91       	pop	r29
    3298:	08 95       	ret

0000329a <UART_sendByte>:
	
void UART_sendByte(const uint8 data)
{
    329a:	df 93       	push	r29
    329c:	cf 93       	push	r28
    329e:	0f 92       	push	r0
    32a0:	cd b7       	in	r28, 0x3d	; 61
    32a2:	de b7       	in	r29, 0x3e	; 62
    32a4:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    32a6:	eb e2       	ldi	r30, 0x2B	; 43
    32a8:	f0 e0       	ldi	r31, 0x00	; 0
    32aa:	80 81       	ld	r24, Z
    32ac:	88 2f       	mov	r24, r24
    32ae:	90 e0       	ldi	r25, 0x00	; 0
    32b0:	80 72       	andi	r24, 0x20	; 32
    32b2:	90 70       	andi	r25, 0x00	; 0
    32b4:	00 97       	sbiw	r24, 0x00	; 0
    32b6:	b9 f3       	breq	.-18     	; 0x32a6 <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
    32b8:	ec e2       	ldi	r30, 0x2C	; 44
    32ba:	f0 e0       	ldi	r31, 0x00	; 0
    32bc:	89 81       	ldd	r24, Y+1	; 0x01
    32be:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/	
}
    32c0:	0f 90       	pop	r0
    32c2:	cf 91       	pop	r28
    32c4:	df 91       	pop	r29
    32c6:	08 95       	ret

000032c8 <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    32c8:	df 93       	push	r29
    32ca:	cf 93       	push	r28
    32cc:	cd b7       	in	r28, 0x3d	; 61
    32ce:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    32d0:	eb e2       	ldi	r30, 0x2B	; 43
    32d2:	f0 e0       	ldi	r31, 0x00	; 0
    32d4:	80 81       	ld	r24, Z
    32d6:	88 23       	and	r24, r24
    32d8:	dc f7       	brge	.-10     	; 0x32d0 <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
    32da:	ec e2       	ldi	r30, 0x2C	; 44
    32dc:	f0 e0       	ldi	r31, 0x00	; 0
    32de:	80 81       	ld	r24, Z
}
    32e0:	cf 91       	pop	r28
    32e2:	df 91       	pop	r29
    32e4:	08 95       	ret

000032e6 <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    32e6:	df 93       	push	r29
    32e8:	cf 93       	push	r28
    32ea:	00 d0       	rcall	.+0      	; 0x32ec <UART_sendString+0x6>
    32ec:	0f 92       	push	r0
    32ee:	cd b7       	in	r28, 0x3d	; 61
    32f0:	de b7       	in	r29, 0x3e	; 62
    32f2:	9b 83       	std	Y+3, r25	; 0x03
    32f4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    32f6:	19 82       	std	Y+1, r1	; 0x01
    32f8:	0e c0       	rjmp	.+28     	; 0x3316 <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    32fa:	89 81       	ldd	r24, Y+1	; 0x01
    32fc:	28 2f       	mov	r18, r24
    32fe:	30 e0       	ldi	r19, 0x00	; 0
    3300:	8a 81       	ldd	r24, Y+2	; 0x02
    3302:	9b 81       	ldd	r25, Y+3	; 0x03
    3304:	fc 01       	movw	r30, r24
    3306:	e2 0f       	add	r30, r18
    3308:	f3 1f       	adc	r31, r19
    330a:	80 81       	ld	r24, Z
    330c:	0e 94 4d 19 	call	0x329a	; 0x329a <UART_sendByte>
		i++;
    3310:	89 81       	ldd	r24, Y+1	; 0x01
    3312:	8f 5f       	subi	r24, 0xFF	; 255
    3314:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    3316:	89 81       	ldd	r24, Y+1	; 0x01
    3318:	28 2f       	mov	r18, r24
    331a:	30 e0       	ldi	r19, 0x00	; 0
    331c:	8a 81       	ldd	r24, Y+2	; 0x02
    331e:	9b 81       	ldd	r25, Y+3	; 0x03
    3320:	fc 01       	movw	r30, r24
    3322:	e2 0f       	add	r30, r18
    3324:	f3 1f       	adc	r31, r19
    3326:	80 81       	ld	r24, Z
    3328:	88 23       	and	r24, r24
    332a:	39 f7       	brne	.-50     	; 0x32fa <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    332c:	0f 90       	pop	r0
    332e:	0f 90       	pop	r0
    3330:	0f 90       	pop	r0
    3332:	cf 91       	pop	r28
    3334:	df 91       	pop	r29
    3336:	08 95       	ret

00003338 <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    3338:	0f 93       	push	r16
    333a:	1f 93       	push	r17
    333c:	df 93       	push	r29
    333e:	cf 93       	push	r28
    3340:	00 d0       	rcall	.+0      	; 0x3342 <UART_receiveString+0xa>
    3342:	0f 92       	push	r0
    3344:	cd b7       	in	r28, 0x3d	; 61
    3346:	de b7       	in	r29, 0x3e	; 62
    3348:	9b 83       	std	Y+3, r25	; 0x03
    334a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    334c:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    334e:	89 81       	ldd	r24, Y+1	; 0x01
    3350:	28 2f       	mov	r18, r24
    3352:	30 e0       	ldi	r19, 0x00	; 0
    3354:	8a 81       	ldd	r24, Y+2	; 0x02
    3356:	9b 81       	ldd	r25, Y+3	; 0x03
    3358:	8c 01       	movw	r16, r24
    335a:	02 0f       	add	r16, r18
    335c:	13 1f       	adc	r17, r19
    335e:	0e 94 64 19 	call	0x32c8	; 0x32c8 <UART_recieveByte>
    3362:	f8 01       	movw	r30, r16
    3364:	80 83       	st	Z, r24
    3366:	0f c0       	rjmp	.+30     	; 0x3386 <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    3368:	89 81       	ldd	r24, Y+1	; 0x01
    336a:	8f 5f       	subi	r24, 0xFF	; 255
    336c:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    336e:	89 81       	ldd	r24, Y+1	; 0x01
    3370:	28 2f       	mov	r18, r24
    3372:	30 e0       	ldi	r19, 0x00	; 0
    3374:	8a 81       	ldd	r24, Y+2	; 0x02
    3376:	9b 81       	ldd	r25, Y+3	; 0x03
    3378:	8c 01       	movw	r16, r24
    337a:	02 0f       	add	r16, r18
    337c:	13 1f       	adc	r17, r19
    337e:	0e 94 64 19 	call	0x32c8	; 0x32c8 <UART_recieveByte>
    3382:	f8 01       	movw	r30, r16
    3384:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    3386:	89 81       	ldd	r24, Y+1	; 0x01
    3388:	28 2f       	mov	r18, r24
    338a:	30 e0       	ldi	r19, 0x00	; 0
    338c:	8a 81       	ldd	r24, Y+2	; 0x02
    338e:	9b 81       	ldd	r25, Y+3	; 0x03
    3390:	fc 01       	movw	r30, r24
    3392:	e2 0f       	add	r30, r18
    3394:	f3 1f       	adc	r31, r19
    3396:	80 81       	ld	r24, Z
    3398:	83 32       	cpi	r24, 0x23	; 35
    339a:	31 f7       	brne	.-52     	; 0x3368 <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    339c:	89 81       	ldd	r24, Y+1	; 0x01
    339e:	28 2f       	mov	r18, r24
    33a0:	30 e0       	ldi	r19, 0x00	; 0
    33a2:	8a 81       	ldd	r24, Y+2	; 0x02
    33a4:	9b 81       	ldd	r25, Y+3	; 0x03
    33a6:	fc 01       	movw	r30, r24
    33a8:	e2 0f       	add	r30, r18
    33aa:	f3 1f       	adc	r31, r19
    33ac:	10 82       	st	Z, r1
}
    33ae:	0f 90       	pop	r0
    33b0:	0f 90       	pop	r0
    33b2:	0f 90       	pop	r0
    33b4:	cf 91       	pop	r28
    33b6:	df 91       	pop	r29
    33b8:	1f 91       	pop	r17
    33ba:	0f 91       	pop	r16
    33bc:	08 95       	ret

000033be <__prologue_saves__>:
    33be:	2f 92       	push	r2
    33c0:	3f 92       	push	r3
    33c2:	4f 92       	push	r4
    33c4:	5f 92       	push	r5
    33c6:	6f 92       	push	r6
    33c8:	7f 92       	push	r7
    33ca:	8f 92       	push	r8
    33cc:	9f 92       	push	r9
    33ce:	af 92       	push	r10
    33d0:	bf 92       	push	r11
    33d2:	cf 92       	push	r12
    33d4:	df 92       	push	r13
    33d6:	ef 92       	push	r14
    33d8:	ff 92       	push	r15
    33da:	0f 93       	push	r16
    33dc:	1f 93       	push	r17
    33de:	cf 93       	push	r28
    33e0:	df 93       	push	r29
    33e2:	cd b7       	in	r28, 0x3d	; 61
    33e4:	de b7       	in	r29, 0x3e	; 62
    33e6:	ca 1b       	sub	r28, r26
    33e8:	db 0b       	sbc	r29, r27
    33ea:	0f b6       	in	r0, 0x3f	; 63
    33ec:	f8 94       	cli
    33ee:	de bf       	out	0x3e, r29	; 62
    33f0:	0f be       	out	0x3f, r0	; 63
    33f2:	cd bf       	out	0x3d, r28	; 61
    33f4:	09 94       	ijmp

000033f6 <__epilogue_restores__>:
    33f6:	2a 88       	ldd	r2, Y+18	; 0x12
    33f8:	39 88       	ldd	r3, Y+17	; 0x11
    33fa:	48 88       	ldd	r4, Y+16	; 0x10
    33fc:	5f 84       	ldd	r5, Y+15	; 0x0f
    33fe:	6e 84       	ldd	r6, Y+14	; 0x0e
    3400:	7d 84       	ldd	r7, Y+13	; 0x0d
    3402:	8c 84       	ldd	r8, Y+12	; 0x0c
    3404:	9b 84       	ldd	r9, Y+11	; 0x0b
    3406:	aa 84       	ldd	r10, Y+10	; 0x0a
    3408:	b9 84       	ldd	r11, Y+9	; 0x09
    340a:	c8 84       	ldd	r12, Y+8	; 0x08
    340c:	df 80       	ldd	r13, Y+7	; 0x07
    340e:	ee 80       	ldd	r14, Y+6	; 0x06
    3410:	fd 80       	ldd	r15, Y+5	; 0x05
    3412:	0c 81       	ldd	r16, Y+4	; 0x04
    3414:	1b 81       	ldd	r17, Y+3	; 0x03
    3416:	aa 81       	ldd	r26, Y+2	; 0x02
    3418:	b9 81       	ldd	r27, Y+1	; 0x01
    341a:	ce 0f       	add	r28, r30
    341c:	d1 1d       	adc	r29, r1
    341e:	0f b6       	in	r0, 0x3f	; 63
    3420:	f8 94       	cli
    3422:	de bf       	out	0x3e, r29	; 62
    3424:	0f be       	out	0x3f, r0	; 63
    3426:	cd bf       	out	0x3d, r28	; 61
    3428:	ed 01       	movw	r28, r26
    342a:	08 95       	ret

0000342c <itoa>:
    342c:	fb 01       	movw	r30, r22
    342e:	9f 01       	movw	r18, r30
    3430:	e8 94       	clt
    3432:	42 30       	cpi	r20, 0x02	; 2
    3434:	c4 f0       	brlt	.+48     	; 0x3466 <itoa+0x3a>
    3436:	45 32       	cpi	r20, 0x25	; 37
    3438:	b4 f4       	brge	.+44     	; 0x3466 <itoa+0x3a>
    343a:	4a 30       	cpi	r20, 0x0A	; 10
    343c:	29 f4       	brne	.+10     	; 0x3448 <itoa+0x1c>
    343e:	97 fb       	bst	r25, 7
    3440:	1e f4       	brtc	.+6      	; 0x3448 <itoa+0x1c>
    3442:	90 95       	com	r25
    3444:	81 95       	neg	r24
    3446:	9f 4f       	sbci	r25, 0xFF	; 255
    3448:	64 2f       	mov	r22, r20
    344a:	77 27       	eor	r23, r23
    344c:	0e 94 47 1a 	call	0x348e	; 0x348e <__udivmodhi4>
    3450:	80 5d       	subi	r24, 0xD0	; 208
    3452:	8a 33       	cpi	r24, 0x3A	; 58
    3454:	0c f0       	brlt	.+2      	; 0x3458 <itoa+0x2c>
    3456:	89 5d       	subi	r24, 0xD9	; 217
    3458:	81 93       	st	Z+, r24
    345a:	cb 01       	movw	r24, r22
    345c:	00 97       	sbiw	r24, 0x00	; 0
    345e:	a1 f7       	brne	.-24     	; 0x3448 <itoa+0x1c>
    3460:	16 f4       	brtc	.+4      	; 0x3466 <itoa+0x3a>
    3462:	5d e2       	ldi	r21, 0x2D	; 45
    3464:	51 93       	st	Z+, r21
    3466:	10 82       	st	Z, r1
    3468:	c9 01       	movw	r24, r18
    346a:	0c 94 37 1a 	jmp	0x346e	; 0x346e <strrev>

0000346e <strrev>:
    346e:	dc 01       	movw	r26, r24
    3470:	fc 01       	movw	r30, r24
    3472:	67 2f       	mov	r22, r23
    3474:	71 91       	ld	r23, Z+
    3476:	77 23       	and	r23, r23
    3478:	e1 f7       	brne	.-8      	; 0x3472 <strrev+0x4>
    347a:	32 97       	sbiw	r30, 0x02	; 2
    347c:	04 c0       	rjmp	.+8      	; 0x3486 <strrev+0x18>
    347e:	7c 91       	ld	r23, X
    3480:	6d 93       	st	X+, r22
    3482:	70 83       	st	Z, r23
    3484:	62 91       	ld	r22, -Z
    3486:	ae 17       	cp	r26, r30
    3488:	bf 07       	cpc	r27, r31
    348a:	c8 f3       	brcs	.-14     	; 0x347e <strrev+0x10>
    348c:	08 95       	ret

0000348e <__udivmodhi4>:
    348e:	aa 1b       	sub	r26, r26
    3490:	bb 1b       	sub	r27, r27
    3492:	51 e1       	ldi	r21, 0x11	; 17
    3494:	07 c0       	rjmp	.+14     	; 0x34a4 <__udivmodhi4_ep>

00003496 <__udivmodhi4_loop>:
    3496:	aa 1f       	adc	r26, r26
    3498:	bb 1f       	adc	r27, r27
    349a:	a6 17       	cp	r26, r22
    349c:	b7 07       	cpc	r27, r23
    349e:	10 f0       	brcs	.+4      	; 0x34a4 <__udivmodhi4_ep>
    34a0:	a6 1b       	sub	r26, r22
    34a2:	b7 0b       	sbc	r27, r23

000034a4 <__udivmodhi4_ep>:
    34a4:	88 1f       	adc	r24, r24
    34a6:	99 1f       	adc	r25, r25
    34a8:	5a 95       	dec	r21
    34aa:	a9 f7       	brne	.-22     	; 0x3496 <__udivmodhi4_loop>
    34ac:	80 95       	com	r24
    34ae:	90 95       	com	r25
    34b0:	bc 01       	movw	r22, r24
    34b2:	cd 01       	movw	r24, r26
    34b4:	08 95       	ret

000034b6 <_exit>:
    34b6:	f8 94       	cli

000034b8 <__stop_program>:
    34b8:	ff cf       	rjmp	.-2      	; 0x34b8 <__stop_program>
