
MC_1_.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000044be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000130  00800060  000044be  00004552  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800190  00800190  00004682  2**0
                  ALLOC
  3 .stab         00003588  00000000  00000000  00004684  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fb9  00000000  00000000  00007c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008bc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008d05  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008e75  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000aabe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b9a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c758  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c8b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000cb45  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d313  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 61 1a 	jmp	0x34c2	; 0x34c2 <__vector_10>
      2c:	0c 94 2e 1a 	jmp	0x345c	; 0x345c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee eb       	ldi	r30, 0xBE	; 190
      68:	f4 e4       	ldi	r31, 0x44	; 68
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e9       	ldi	r26, 0x90	; 144
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 39       	cpi	r26, 0x92	; 146
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 32 17 	call	0x2e64	; 0x2e64 <main>
      8a:	0c 94 5d 22 	jmp	0x44ba	; 0x44ba <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e1 21 	jmp	0x43c2	; 0x43c2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e8       	ldi	r26, 0x87	; 135
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 fd 21 	jmp	0x43fa	; 0x43fa <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ed 21 	jmp	0x43da	; 0x43da <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 09 22 	jmp	0x4412	; 0x4412 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ed 21 	jmp	0x43da	; 0x43da <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 09 22 	jmp	0x4412	; 0x4412 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e1 21 	jmp	0x43c2	; 0x43c2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 e8       	ldi	r24, 0x87	; 135
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 fd 21 	jmp	0x43fa	; 0x43fa <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ed 21 	jmp	0x43da	; 0x43da <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 09 22 	jmp	0x4412	; 0x4412 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ed 21 	jmp	0x43da	; 0x43da <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 09 22 	jmp	0x4412	; 0x4412 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ed 21 	jmp	0x43da	; 0x43da <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 09 22 	jmp	0x4412	; 0x4412 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f1 21 	jmp	0x43e2	; 0x43e2 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 0d 22 	jmp	0x441a	; 0x441a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Enter_Send_Password>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void  Enter_Send_Password()
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	64 97       	sbiw	r28, 0x14	; 20
     b54:	0f b6       	in	r0, 0x3f	; 63
     b56:	f8 94       	cli
     b58:	de bf       	out	0x3e, r29	; 62
     b5a:	0f be       	out	0x3f, r0	; 63
     b5c:	cd bf       	out	0x3d, r28	; 61
	uint8 password[5];
	uint8 i;


	LCD_goToRowColumn(1,0);
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	60 e0       	ldi	r22, 0x00	; 0
     b62:	0e 94 4b 20 	call	0x4096	; 0x4096 <LCD_goToRowColumn>

	for(i=0;i<5;i++)
     b66:	1f 86       	std	Y+15, r1	; 0x0f
     b68:	b0 c0       	rjmp	.+352    	; 0xcca <Enter_Send_Password+0x184>

	{
		password[i] = KeyPad_getPressedKey(); //get the pressed key
     b6a:	8f 85       	ldd	r24, Y+15	; 0x0f
     b6c:	08 2f       	mov	r16, r24
     b6e:	10 e0       	ldi	r17, 0x00	; 0
     b70:	0e 94 11 1b 	call	0x3622	; 0x3622 <KeyPad_getPressedKey>
     b74:	28 2f       	mov	r18, r24
     b76:	ce 01       	movw	r24, r28
     b78:	40 96       	adiw	r24, 0x10	; 16
     b7a:	fc 01       	movw	r30, r24
     b7c:	e0 0f       	add	r30, r16
     b7e:	f1 1f       	adc	r31, r17
     b80:	20 83       	st	Z, r18

		if((password[i] <= 9) && (password[i] >= 0))
     b82:	8f 85       	ldd	r24, Y+15	; 0x0f
     b84:	28 2f       	mov	r18, r24
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	ce 01       	movw	r24, r28
     b8a:	40 96       	adiw	r24, 0x10	; 16
     b8c:	fc 01       	movw	r30, r24
     b8e:	e2 0f       	add	r30, r18
     b90:	f3 1f       	adc	r31, r19
     b92:	80 81       	ld	r24, Z
     b94:	8a 30       	cpi	r24, 0x0A	; 10
     b96:	70 f4       	brcc	.+28     	; 0xbb4 <Enter_Send_Password+0x6e>
		{
			LCD_intgerToString(password[i]); /* display the pressed keypad switch */
     b98:	8f 85       	ldd	r24, Y+15	; 0x0f
     b9a:	28 2f       	mov	r18, r24
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	ce 01       	movw	r24, r28
     ba0:	40 96       	adiw	r24, 0x10	; 16
     ba2:	fc 01       	movw	r30, r24
     ba4:	e2 0f       	add	r30, r18
     ba6:	f3 1f       	adc	r31, r19
     ba8:	80 81       	ld	r24, Z
     baa:	88 2f       	mov	r24, r24
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	0e 94 a6 20 	call	0x414c	; 0x414c <LCD_intgerToString>
     bb2:	0b c0       	rjmp	.+22     	; 0xbca <Enter_Send_Password+0x84>
		}
		else
		{
				LCD_displayCharacter(password[i]); /* display the pressed keypad switch */
     bb4:	8f 85       	ldd	r24, Y+15	; 0x0f
     bb6:	28 2f       	mov	r18, r24
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	ce 01       	movw	r24, r28
     bbc:	40 96       	adiw	r24, 0x10	; 16
     bbe:	fc 01       	movw	r30, r24
     bc0:	e2 0f       	add	r30, r18
     bc2:	f3 1f       	adc	r31, r19
     bc4:	80 81       	ld	r24, Z
     bc6:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <LCD_displayCharacter>
		}

		/* printf("%c", '*');*/

		UART_sendByte(password[i]); //send the pressed key to the second MC using uart
     bca:	8f 85       	ldd	r24, Y+15	; 0x0f
     bcc:	28 2f       	mov	r18, r24
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	ce 01       	movw	r24, r28
     bd2:	40 96       	adiw	r24, 0x10	; 16
     bd4:	fc 01       	movw	r30, r24
     bd6:	e2 0f       	add	r30, r18
     bd8:	f3 1f       	adc	r31, r19
     bda:	80 81       	ld	r24, Z
     bdc:	0e 94 4f 21 	call	0x429e	; 0x429e <UART_sendByte>
     be0:	80 e0       	ldi	r24, 0x00	; 0
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	aa ef       	ldi	r26, 0xFA	; 250
     be6:	b3 e4       	ldi	r27, 0x43	; 67
     be8:	8b 87       	std	Y+11, r24	; 0x0b
     bea:	9c 87       	std	Y+12, r25	; 0x0c
     bec:	ad 87       	std	Y+13, r26	; 0x0d
     bee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bf0:	6b 85       	ldd	r22, Y+11	; 0x0b
     bf2:	7c 85       	ldd	r23, Y+12	; 0x0c
     bf4:	8d 85       	ldd	r24, Y+13	; 0x0d
     bf6:	9e 85       	ldd	r25, Y+14	; 0x0e
     bf8:	20 e0       	ldi	r18, 0x00	; 0
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	4a ef       	ldi	r20, 0xFA	; 250
     bfe:	54 e4       	ldi	r21, 0x44	; 68
     c00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c04:	dc 01       	movw	r26, r24
     c06:	cb 01       	movw	r24, r22
     c08:	8f 83       	std	Y+7, r24	; 0x07
     c0a:	98 87       	std	Y+8, r25	; 0x08
     c0c:	a9 87       	std	Y+9, r26	; 0x09
     c0e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c10:	6f 81       	ldd	r22, Y+7	; 0x07
     c12:	78 85       	ldd	r23, Y+8	; 0x08
     c14:	89 85       	ldd	r24, Y+9	; 0x09
     c16:	9a 85       	ldd	r25, Y+10	; 0x0a
     c18:	20 e0       	ldi	r18, 0x00	; 0
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	40 e8       	ldi	r20, 0x80	; 128
     c1e:	5f e3       	ldi	r21, 0x3F	; 63
     c20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c24:	88 23       	and	r24, r24
     c26:	2c f4       	brge	.+10     	; 0xc32 <Enter_Send_Password+0xec>
		__ticks = 1;
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	9e 83       	std	Y+6, r25	; 0x06
     c2e:	8d 83       	std	Y+5, r24	; 0x05
     c30:	3f c0       	rjmp	.+126    	; 0xcb0 <Enter_Send_Password+0x16a>
	else if (__tmp > 65535)
     c32:	6f 81       	ldd	r22, Y+7	; 0x07
     c34:	78 85       	ldd	r23, Y+8	; 0x08
     c36:	89 85       	ldd	r24, Y+9	; 0x09
     c38:	9a 85       	ldd	r25, Y+10	; 0x0a
     c3a:	20 e0       	ldi	r18, 0x00	; 0
     c3c:	3f ef       	ldi	r19, 0xFF	; 255
     c3e:	4f e7       	ldi	r20, 0x7F	; 127
     c40:	57 e4       	ldi	r21, 0x47	; 71
     c42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c46:	18 16       	cp	r1, r24
     c48:	4c f5       	brge	.+82     	; 0xc9c <Enter_Send_Password+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c4a:	6b 85       	ldd	r22, Y+11	; 0x0b
     c4c:	7c 85       	ldd	r23, Y+12	; 0x0c
     c4e:	8d 85       	ldd	r24, Y+13	; 0x0d
     c50:	9e 85       	ldd	r25, Y+14	; 0x0e
     c52:	20 e0       	ldi	r18, 0x00	; 0
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	40 e2       	ldi	r20, 0x20	; 32
     c58:	51 e4       	ldi	r21, 0x41	; 65
     c5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c5e:	dc 01       	movw	r26, r24
     c60:	cb 01       	movw	r24, r22
     c62:	bc 01       	movw	r22, r24
     c64:	cd 01       	movw	r24, r26
     c66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c6a:	dc 01       	movw	r26, r24
     c6c:	cb 01       	movw	r24, r22
     c6e:	9e 83       	std	Y+6, r25	; 0x06
     c70:	8d 83       	std	Y+5, r24	; 0x05
     c72:	0f c0       	rjmp	.+30     	; 0xc92 <Enter_Send_Password+0x14c>
     c74:	88 ec       	ldi	r24, 0xC8	; 200
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	9c 83       	std	Y+4, r25	; 0x04
     c7a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c7c:	8b 81       	ldd	r24, Y+3	; 0x03
     c7e:	9c 81       	ldd	r25, Y+4	; 0x04
     c80:	01 97       	sbiw	r24, 0x01	; 1
     c82:	f1 f7       	brne	.-4      	; 0xc80 <Enter_Send_Password+0x13a>
     c84:	9c 83       	std	Y+4, r25	; 0x04
     c86:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c88:	8d 81       	ldd	r24, Y+5	; 0x05
     c8a:	9e 81       	ldd	r25, Y+6	; 0x06
     c8c:	01 97       	sbiw	r24, 0x01	; 1
     c8e:	9e 83       	std	Y+6, r25	; 0x06
     c90:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c92:	8d 81       	ldd	r24, Y+5	; 0x05
     c94:	9e 81       	ldd	r25, Y+6	; 0x06
     c96:	00 97       	sbiw	r24, 0x00	; 0
     c98:	69 f7       	brne	.-38     	; 0xc74 <Enter_Send_Password+0x12e>
     c9a:	14 c0       	rjmp	.+40     	; 0xcc4 <Enter_Send_Password+0x17e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c9c:	6f 81       	ldd	r22, Y+7	; 0x07
     c9e:	78 85       	ldd	r23, Y+8	; 0x08
     ca0:	89 85       	ldd	r24, Y+9	; 0x09
     ca2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ca4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ca8:	dc 01       	movw	r26, r24
     caa:	cb 01       	movw	r24, r22
     cac:	9e 83       	std	Y+6, r25	; 0x06
     cae:	8d 83       	std	Y+5, r24	; 0x05
     cb0:	8d 81       	ldd	r24, Y+5	; 0x05
     cb2:	9e 81       	ldd	r25, Y+6	; 0x06
     cb4:	9a 83       	std	Y+2, r25	; 0x02
     cb6:	89 83       	std	Y+1, r24	; 0x01
     cb8:	89 81       	ldd	r24, Y+1	; 0x01
     cba:	9a 81       	ldd	r25, Y+2	; 0x02
     cbc:	01 97       	sbiw	r24, 0x01	; 1
     cbe:	f1 f7       	brne	.-4      	; 0xcbc <Enter_Send_Password+0x176>
     cc0:	9a 83       	std	Y+2, r25	; 0x02
     cc2:	89 83       	std	Y+1, r24	; 0x01
	uint8 i;


	LCD_goToRowColumn(1,0);

	for(i=0;i<5;i++)
     cc4:	8f 85       	ldd	r24, Y+15	; 0x0f
     cc6:	8f 5f       	subi	r24, 0xFF	; 255
     cc8:	8f 87       	std	Y+15, r24	; 0x0f
     cca:	8f 85       	ldd	r24, Y+15	; 0x0f
     ccc:	85 30       	cpi	r24, 0x05	; 5
     cce:	08 f4       	brcc	.+2      	; 0xcd2 <Enter_Send_Password+0x18c>
     cd0:	4c cf       	rjmp	.-360    	; 0xb6a <Enter_Send_Password+0x24>
		UART_sendByte(password[i]); //send the pressed key to the second MC using uart
		_delay_ms(500);

	}

}
     cd2:	64 96       	adiw	r28, 0x14	; 20
     cd4:	0f b6       	in	r0, 0x3f	; 63
     cd6:	f8 94       	cli
     cd8:	de bf       	out	0x3e, r29	; 62
     cda:	0f be       	out	0x3f, r0	; 63
     cdc:	cd bf       	out	0x3d, r28	; 61
     cde:	cf 91       	pop	r28
     ce0:	df 91       	pop	r29
     ce2:	1f 91       	pop	r17
     ce4:	0f 91       	pop	r16
     ce6:	08 95       	ret

00000ce8 <Enter_confirm_Password>:

void Enter_confirm_Password()
{
     ce8:	0f 93       	push	r16
     cea:	1f 93       	push	r17
     cec:	df 93       	push	r29
     cee:	cf 93       	push	r28
     cf0:	cd b7       	in	r28, 0x3d	; 61
     cf2:	de b7       	in	r29, 0x3e	; 62
     cf4:	c2 56       	subi	r28, 0x62	; 98
     cf6:	d0 40       	sbci	r29, 0x00	; 0
     cf8:	0f b6       	in	r0, 0x3f	; 63
     cfa:	f8 94       	cli
     cfc:	de bf       	out	0x3e, r29	; 62
     cfe:	0f be       	out	0x3f, r0	; 63
     d00:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen(); /* clear the LCD display */
     d02:	0e 94 c9 20 	call	0x4192	; 0x4192 <LCD_clearScreen>
     d06:	fe 01       	movw	r30, r28
     d08:	e1 5a       	subi	r30, 0xA1	; 161
     d0a:	ff 4f       	sbci	r31, 0xFF	; 255
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	a8 e4       	ldi	r26, 0x48	; 72
     d12:	b3 e4       	ldi	r27, 0x43	; 67
     d14:	80 83       	st	Z, r24
     d16:	91 83       	std	Z+1, r25	; 0x01
     d18:	a2 83       	std	Z+2, r26	; 0x02
     d1a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d1c:	8e 01       	movw	r16, r28
     d1e:	05 5a       	subi	r16, 0xA5	; 165
     d20:	1f 4f       	sbci	r17, 0xFF	; 255
     d22:	fe 01       	movw	r30, r28
     d24:	e1 5a       	subi	r30, 0xA1	; 161
     d26:	ff 4f       	sbci	r31, 0xFF	; 255
     d28:	60 81       	ld	r22, Z
     d2a:	71 81       	ldd	r23, Z+1	; 0x01
     d2c:	82 81       	ldd	r24, Z+2	; 0x02
     d2e:	93 81       	ldd	r25, Z+3	; 0x03
     d30:	20 e0       	ldi	r18, 0x00	; 0
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	4a ef       	ldi	r20, 0xFA	; 250
     d36:	54 e4       	ldi	r21, 0x44	; 68
     d38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d3c:	dc 01       	movw	r26, r24
     d3e:	cb 01       	movw	r24, r22
     d40:	f8 01       	movw	r30, r16
     d42:	80 83       	st	Z, r24
     d44:	91 83       	std	Z+1, r25	; 0x01
     d46:	a2 83       	std	Z+2, r26	; 0x02
     d48:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d4a:	fe 01       	movw	r30, r28
     d4c:	e5 5a       	subi	r30, 0xA5	; 165
     d4e:	ff 4f       	sbci	r31, 0xFF	; 255
     d50:	60 81       	ld	r22, Z
     d52:	71 81       	ldd	r23, Z+1	; 0x01
     d54:	82 81       	ldd	r24, Z+2	; 0x02
     d56:	93 81       	ldd	r25, Z+3	; 0x03
     d58:	20 e0       	ldi	r18, 0x00	; 0
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	40 e8       	ldi	r20, 0x80	; 128
     d5e:	5f e3       	ldi	r21, 0x3F	; 63
     d60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d64:	88 23       	and	r24, r24
     d66:	44 f4       	brge	.+16     	; 0xd78 <Enter_confirm_Password+0x90>
		__ticks = 1;
     d68:	fe 01       	movw	r30, r28
     d6a:	e7 5a       	subi	r30, 0xA7	; 167
     d6c:	ff 4f       	sbci	r31, 0xFF	; 255
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	91 83       	std	Z+1, r25	; 0x01
     d74:	80 83       	st	Z, r24
     d76:	64 c0       	rjmp	.+200    	; 0xe40 <Enter_confirm_Password+0x158>
	else if (__tmp > 65535)
     d78:	fe 01       	movw	r30, r28
     d7a:	e5 5a       	subi	r30, 0xA5	; 165
     d7c:	ff 4f       	sbci	r31, 0xFF	; 255
     d7e:	60 81       	ld	r22, Z
     d80:	71 81       	ldd	r23, Z+1	; 0x01
     d82:	82 81       	ldd	r24, Z+2	; 0x02
     d84:	93 81       	ldd	r25, Z+3	; 0x03
     d86:	20 e0       	ldi	r18, 0x00	; 0
     d88:	3f ef       	ldi	r19, 0xFF	; 255
     d8a:	4f e7       	ldi	r20, 0x7F	; 127
     d8c:	57 e4       	ldi	r21, 0x47	; 71
     d8e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d92:	18 16       	cp	r1, r24
     d94:	0c f0       	brlt	.+2      	; 0xd98 <Enter_confirm_Password+0xb0>
     d96:	43 c0       	rjmp	.+134    	; 0xe1e <Enter_confirm_Password+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d98:	fe 01       	movw	r30, r28
     d9a:	e1 5a       	subi	r30, 0xA1	; 161
     d9c:	ff 4f       	sbci	r31, 0xFF	; 255
     d9e:	60 81       	ld	r22, Z
     da0:	71 81       	ldd	r23, Z+1	; 0x01
     da2:	82 81       	ldd	r24, Z+2	; 0x02
     da4:	93 81       	ldd	r25, Z+3	; 0x03
     da6:	20 e0       	ldi	r18, 0x00	; 0
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	40 e2       	ldi	r20, 0x20	; 32
     dac:	51 e4       	ldi	r21, 0x41	; 65
     dae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     db2:	dc 01       	movw	r26, r24
     db4:	cb 01       	movw	r24, r22
     db6:	8e 01       	movw	r16, r28
     db8:	07 5a       	subi	r16, 0xA7	; 167
     dba:	1f 4f       	sbci	r17, 0xFF	; 255
     dbc:	bc 01       	movw	r22, r24
     dbe:	cd 01       	movw	r24, r26
     dc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dc4:	dc 01       	movw	r26, r24
     dc6:	cb 01       	movw	r24, r22
     dc8:	f8 01       	movw	r30, r16
     dca:	91 83       	std	Z+1, r25	; 0x01
     dcc:	80 83       	st	Z, r24
     dce:	1f c0       	rjmp	.+62     	; 0xe0e <Enter_confirm_Password+0x126>
     dd0:	fe 01       	movw	r30, r28
     dd2:	e9 5a       	subi	r30, 0xA9	; 169
     dd4:	ff 4f       	sbci	r31, 0xFF	; 255
     dd6:	88 ec       	ldi	r24, 0xC8	; 200
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	91 83       	std	Z+1, r25	; 0x01
     ddc:	80 83       	st	Z, r24
     dde:	fe 01       	movw	r30, r28
     de0:	e9 5a       	subi	r30, 0xA9	; 169
     de2:	ff 4f       	sbci	r31, 0xFF	; 255
     de4:	80 81       	ld	r24, Z
     de6:	91 81       	ldd	r25, Z+1	; 0x01
     de8:	01 97       	sbiw	r24, 0x01	; 1
     dea:	f1 f7       	brne	.-4      	; 0xde8 <Enter_confirm_Password+0x100>
     dec:	fe 01       	movw	r30, r28
     dee:	e9 5a       	subi	r30, 0xA9	; 169
     df0:	ff 4f       	sbci	r31, 0xFF	; 255
     df2:	91 83       	std	Z+1, r25	; 0x01
     df4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     df6:	de 01       	movw	r26, r28
     df8:	a7 5a       	subi	r26, 0xA7	; 167
     dfa:	bf 4f       	sbci	r27, 0xFF	; 255
     dfc:	fe 01       	movw	r30, r28
     dfe:	e7 5a       	subi	r30, 0xA7	; 167
     e00:	ff 4f       	sbci	r31, 0xFF	; 255
     e02:	80 81       	ld	r24, Z
     e04:	91 81       	ldd	r25, Z+1	; 0x01
     e06:	01 97       	sbiw	r24, 0x01	; 1
     e08:	11 96       	adiw	r26, 0x01	; 1
     e0a:	9c 93       	st	X, r25
     e0c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e0e:	fe 01       	movw	r30, r28
     e10:	e7 5a       	subi	r30, 0xA7	; 167
     e12:	ff 4f       	sbci	r31, 0xFF	; 255
     e14:	80 81       	ld	r24, Z
     e16:	91 81       	ldd	r25, Z+1	; 0x01
     e18:	00 97       	sbiw	r24, 0x00	; 0
     e1a:	d1 f6       	brne	.-76     	; 0xdd0 <Enter_confirm_Password+0xe8>
     e1c:	27 c0       	rjmp	.+78     	; 0xe6c <Enter_confirm_Password+0x184>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e1e:	8e 01       	movw	r16, r28
     e20:	07 5a       	subi	r16, 0xA7	; 167
     e22:	1f 4f       	sbci	r17, 0xFF	; 255
     e24:	fe 01       	movw	r30, r28
     e26:	e5 5a       	subi	r30, 0xA5	; 165
     e28:	ff 4f       	sbci	r31, 0xFF	; 255
     e2a:	60 81       	ld	r22, Z
     e2c:	71 81       	ldd	r23, Z+1	; 0x01
     e2e:	82 81       	ldd	r24, Z+2	; 0x02
     e30:	93 81       	ldd	r25, Z+3	; 0x03
     e32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e36:	dc 01       	movw	r26, r24
     e38:	cb 01       	movw	r24, r22
     e3a:	f8 01       	movw	r30, r16
     e3c:	91 83       	std	Z+1, r25	; 0x01
     e3e:	80 83       	st	Z, r24
     e40:	de 01       	movw	r26, r28
     e42:	ab 5a       	subi	r26, 0xAB	; 171
     e44:	bf 4f       	sbci	r27, 0xFF	; 255
     e46:	fe 01       	movw	r30, r28
     e48:	e7 5a       	subi	r30, 0xA7	; 167
     e4a:	ff 4f       	sbci	r31, 0xFF	; 255
     e4c:	80 81       	ld	r24, Z
     e4e:	91 81       	ldd	r25, Z+1	; 0x01
     e50:	8d 93       	st	X+, r24
     e52:	9c 93       	st	X, r25
     e54:	fe 01       	movw	r30, r28
     e56:	eb 5a       	subi	r30, 0xAB	; 171
     e58:	ff 4f       	sbci	r31, 0xFF	; 255
     e5a:	80 81       	ld	r24, Z
     e5c:	91 81       	ldd	r25, Z+1	; 0x01
     e5e:	01 97       	sbiw	r24, 0x01	; 1
     e60:	f1 f7       	brne	.-4      	; 0xe5e <Enter_confirm_Password+0x176>
     e62:	fe 01       	movw	r30, r28
     e64:	eb 5a       	subi	r30, 0xAB	; 171
     e66:	ff 4f       	sbci	r31, 0xFF	; 255
     e68:	91 83       	std	Z+1, r25	; 0x01
     e6a:	80 83       	st	Z, r24
	_delay_ms(200);

	LCD_displayStringRowColumn(0,0,"Enter password:");
     e6c:	20 e6       	ldi	r18, 0x60	; 96
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	60 e0       	ldi	r22, 0x00	; 0
     e74:	a9 01       	movw	r20, r18
     e76:	0e 94 8d 20 	call	0x411a	; 0x411a <LCD_displayStringRowColumn>
     e7a:	fe 01       	movw	r30, r28
     e7c:	ef 5a       	subi	r30, 0xAF	; 175
     e7e:	ff 4f       	sbci	r31, 0xFF	; 255
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	aa ef       	ldi	r26, 0xFA	; 250
     e86:	b3 e4       	ldi	r27, 0x43	; 67
     e88:	80 83       	st	Z, r24
     e8a:	91 83       	std	Z+1, r25	; 0x01
     e8c:	a2 83       	std	Z+2, r26	; 0x02
     e8e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e90:	8e 01       	movw	r16, r28
     e92:	03 5b       	subi	r16, 0xB3	; 179
     e94:	1f 4f       	sbci	r17, 0xFF	; 255
     e96:	fe 01       	movw	r30, r28
     e98:	ef 5a       	subi	r30, 0xAF	; 175
     e9a:	ff 4f       	sbci	r31, 0xFF	; 255
     e9c:	60 81       	ld	r22, Z
     e9e:	71 81       	ldd	r23, Z+1	; 0x01
     ea0:	82 81       	ldd	r24, Z+2	; 0x02
     ea2:	93 81       	ldd	r25, Z+3	; 0x03
     ea4:	20 e0       	ldi	r18, 0x00	; 0
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	4a ef       	ldi	r20, 0xFA	; 250
     eaa:	54 e4       	ldi	r21, 0x44	; 68
     eac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eb0:	dc 01       	movw	r26, r24
     eb2:	cb 01       	movw	r24, r22
     eb4:	f8 01       	movw	r30, r16
     eb6:	80 83       	st	Z, r24
     eb8:	91 83       	std	Z+1, r25	; 0x01
     eba:	a2 83       	std	Z+2, r26	; 0x02
     ebc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ebe:	fe 01       	movw	r30, r28
     ec0:	e3 5b       	subi	r30, 0xB3	; 179
     ec2:	ff 4f       	sbci	r31, 0xFF	; 255
     ec4:	60 81       	ld	r22, Z
     ec6:	71 81       	ldd	r23, Z+1	; 0x01
     ec8:	82 81       	ldd	r24, Z+2	; 0x02
     eca:	93 81       	ldd	r25, Z+3	; 0x03
     ecc:	20 e0       	ldi	r18, 0x00	; 0
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	40 e8       	ldi	r20, 0x80	; 128
     ed2:	5f e3       	ldi	r21, 0x3F	; 63
     ed4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ed8:	88 23       	and	r24, r24
     eda:	44 f4       	brge	.+16     	; 0xeec <Enter_confirm_Password+0x204>
		__ticks = 1;
     edc:	fe 01       	movw	r30, r28
     ede:	e5 5b       	subi	r30, 0xB5	; 181
     ee0:	ff 4f       	sbci	r31, 0xFF	; 255
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	91 83       	std	Z+1, r25	; 0x01
     ee8:	80 83       	st	Z, r24
     eea:	64 c0       	rjmp	.+200    	; 0xfb4 <Enter_confirm_Password+0x2cc>
	else if (__tmp > 65535)
     eec:	fe 01       	movw	r30, r28
     eee:	e3 5b       	subi	r30, 0xB3	; 179
     ef0:	ff 4f       	sbci	r31, 0xFF	; 255
     ef2:	60 81       	ld	r22, Z
     ef4:	71 81       	ldd	r23, Z+1	; 0x01
     ef6:	82 81       	ldd	r24, Z+2	; 0x02
     ef8:	93 81       	ldd	r25, Z+3	; 0x03
     efa:	20 e0       	ldi	r18, 0x00	; 0
     efc:	3f ef       	ldi	r19, 0xFF	; 255
     efe:	4f e7       	ldi	r20, 0x7F	; 127
     f00:	57 e4       	ldi	r21, 0x47	; 71
     f02:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f06:	18 16       	cp	r1, r24
     f08:	0c f0       	brlt	.+2      	; 0xf0c <Enter_confirm_Password+0x224>
     f0a:	43 c0       	rjmp	.+134    	; 0xf92 <Enter_confirm_Password+0x2aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f0c:	fe 01       	movw	r30, r28
     f0e:	ef 5a       	subi	r30, 0xAF	; 175
     f10:	ff 4f       	sbci	r31, 0xFF	; 255
     f12:	60 81       	ld	r22, Z
     f14:	71 81       	ldd	r23, Z+1	; 0x01
     f16:	82 81       	ldd	r24, Z+2	; 0x02
     f18:	93 81       	ldd	r25, Z+3	; 0x03
     f1a:	20 e0       	ldi	r18, 0x00	; 0
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	40 e2       	ldi	r20, 0x20	; 32
     f20:	51 e4       	ldi	r21, 0x41	; 65
     f22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f26:	dc 01       	movw	r26, r24
     f28:	cb 01       	movw	r24, r22
     f2a:	8e 01       	movw	r16, r28
     f2c:	05 5b       	subi	r16, 0xB5	; 181
     f2e:	1f 4f       	sbci	r17, 0xFF	; 255
     f30:	bc 01       	movw	r22, r24
     f32:	cd 01       	movw	r24, r26
     f34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f38:	dc 01       	movw	r26, r24
     f3a:	cb 01       	movw	r24, r22
     f3c:	f8 01       	movw	r30, r16
     f3e:	91 83       	std	Z+1, r25	; 0x01
     f40:	80 83       	st	Z, r24
     f42:	1f c0       	rjmp	.+62     	; 0xf82 <Enter_confirm_Password+0x29a>
     f44:	fe 01       	movw	r30, r28
     f46:	e7 5b       	subi	r30, 0xB7	; 183
     f48:	ff 4f       	sbci	r31, 0xFF	; 255
     f4a:	88 ec       	ldi	r24, 0xC8	; 200
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	91 83       	std	Z+1, r25	; 0x01
     f50:	80 83       	st	Z, r24
     f52:	fe 01       	movw	r30, r28
     f54:	e7 5b       	subi	r30, 0xB7	; 183
     f56:	ff 4f       	sbci	r31, 0xFF	; 255
     f58:	80 81       	ld	r24, Z
     f5a:	91 81       	ldd	r25, Z+1	; 0x01
     f5c:	01 97       	sbiw	r24, 0x01	; 1
     f5e:	f1 f7       	brne	.-4      	; 0xf5c <Enter_confirm_Password+0x274>
     f60:	fe 01       	movw	r30, r28
     f62:	e7 5b       	subi	r30, 0xB7	; 183
     f64:	ff 4f       	sbci	r31, 0xFF	; 255
     f66:	91 83       	std	Z+1, r25	; 0x01
     f68:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f6a:	de 01       	movw	r26, r28
     f6c:	a5 5b       	subi	r26, 0xB5	; 181
     f6e:	bf 4f       	sbci	r27, 0xFF	; 255
     f70:	fe 01       	movw	r30, r28
     f72:	e5 5b       	subi	r30, 0xB5	; 181
     f74:	ff 4f       	sbci	r31, 0xFF	; 255
     f76:	80 81       	ld	r24, Z
     f78:	91 81       	ldd	r25, Z+1	; 0x01
     f7a:	01 97       	sbiw	r24, 0x01	; 1
     f7c:	11 96       	adiw	r26, 0x01	; 1
     f7e:	9c 93       	st	X, r25
     f80:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f82:	fe 01       	movw	r30, r28
     f84:	e5 5b       	subi	r30, 0xB5	; 181
     f86:	ff 4f       	sbci	r31, 0xFF	; 255
     f88:	80 81       	ld	r24, Z
     f8a:	91 81       	ldd	r25, Z+1	; 0x01
     f8c:	00 97       	sbiw	r24, 0x00	; 0
     f8e:	d1 f6       	brne	.-76     	; 0xf44 <Enter_confirm_Password+0x25c>
     f90:	27 c0       	rjmp	.+78     	; 0xfe0 <Enter_confirm_Password+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f92:	8e 01       	movw	r16, r28
     f94:	05 5b       	subi	r16, 0xB5	; 181
     f96:	1f 4f       	sbci	r17, 0xFF	; 255
     f98:	fe 01       	movw	r30, r28
     f9a:	e3 5b       	subi	r30, 0xB3	; 179
     f9c:	ff 4f       	sbci	r31, 0xFF	; 255
     f9e:	60 81       	ld	r22, Z
     fa0:	71 81       	ldd	r23, Z+1	; 0x01
     fa2:	82 81       	ldd	r24, Z+2	; 0x02
     fa4:	93 81       	ldd	r25, Z+3	; 0x03
     fa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     faa:	dc 01       	movw	r26, r24
     fac:	cb 01       	movw	r24, r22
     fae:	f8 01       	movw	r30, r16
     fb0:	91 83       	std	Z+1, r25	; 0x01
     fb2:	80 83       	st	Z, r24
     fb4:	de 01       	movw	r26, r28
     fb6:	a9 5b       	subi	r26, 0xB9	; 185
     fb8:	bf 4f       	sbci	r27, 0xFF	; 255
     fba:	fe 01       	movw	r30, r28
     fbc:	e5 5b       	subi	r30, 0xB5	; 181
     fbe:	ff 4f       	sbci	r31, 0xFF	; 255
     fc0:	80 81       	ld	r24, Z
     fc2:	91 81       	ldd	r25, Z+1	; 0x01
     fc4:	8d 93       	st	X+, r24
     fc6:	9c 93       	st	X, r25
     fc8:	fe 01       	movw	r30, r28
     fca:	e9 5b       	subi	r30, 0xB9	; 185
     fcc:	ff 4f       	sbci	r31, 0xFF	; 255
     fce:	80 81       	ld	r24, Z
     fd0:	91 81       	ldd	r25, Z+1	; 0x01
     fd2:	01 97       	sbiw	r24, 0x01	; 1
     fd4:	f1 f7       	brne	.-4      	; 0xfd2 <Enter_confirm_Password+0x2ea>
     fd6:	fe 01       	movw	r30, r28
     fd8:	e9 5b       	subi	r30, 0xB9	; 185
     fda:	ff 4f       	sbci	r31, 0xFF	; 255
     fdc:	91 83       	std	Z+1, r25	; 0x01
     fde:	80 83       	st	Z, r24
	_delay_ms(500);

	Enter_Send_Password();
     fe0:	0e 94 a3 05 	call	0xb46	; 0xb46 <Enter_Send_Password>
     fe4:	fe 01       	movw	r30, r28
     fe6:	ed 5b       	subi	r30, 0xBD	; 189
     fe8:	ff 4f       	sbci	r31, 0xFF	; 255
     fea:	80 e0       	ldi	r24, 0x00	; 0
     fec:	90 e8       	ldi	r25, 0x80	; 128
     fee:	ab eb       	ldi	r26, 0xBB	; 187
     ff0:	b4 e4       	ldi	r27, 0x44	; 68
     ff2:	80 83       	st	Z, r24
     ff4:	91 83       	std	Z+1, r25	; 0x01
     ff6:	a2 83       	std	Z+2, r26	; 0x02
     ff8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ffa:	8e 01       	movw	r16, r28
     ffc:	01 5c       	subi	r16, 0xC1	; 193
     ffe:	1f 4f       	sbci	r17, 0xFF	; 255
    1000:	fe 01       	movw	r30, r28
    1002:	ed 5b       	subi	r30, 0xBD	; 189
    1004:	ff 4f       	sbci	r31, 0xFF	; 255
    1006:	60 81       	ld	r22, Z
    1008:	71 81       	ldd	r23, Z+1	; 0x01
    100a:	82 81       	ldd	r24, Z+2	; 0x02
    100c:	93 81       	ldd	r25, Z+3	; 0x03
    100e:	20 e0       	ldi	r18, 0x00	; 0
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	4a ef       	ldi	r20, 0xFA	; 250
    1014:	54 e4       	ldi	r21, 0x44	; 68
    1016:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    101a:	dc 01       	movw	r26, r24
    101c:	cb 01       	movw	r24, r22
    101e:	f8 01       	movw	r30, r16
    1020:	80 83       	st	Z, r24
    1022:	91 83       	std	Z+1, r25	; 0x01
    1024:	a2 83       	std	Z+2, r26	; 0x02
    1026:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1028:	fe 01       	movw	r30, r28
    102a:	ff 96       	adiw	r30, 0x3f	; 63
    102c:	60 81       	ld	r22, Z
    102e:	71 81       	ldd	r23, Z+1	; 0x01
    1030:	82 81       	ldd	r24, Z+2	; 0x02
    1032:	93 81       	ldd	r25, Z+3	; 0x03
    1034:	20 e0       	ldi	r18, 0x00	; 0
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	40 e8       	ldi	r20, 0x80	; 128
    103a:	5f e3       	ldi	r21, 0x3F	; 63
    103c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1040:	88 23       	and	r24, r24
    1042:	2c f4       	brge	.+10     	; 0x104e <Enter_confirm_Password+0x366>
		__ticks = 1;
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	9e af       	std	Y+62, r25	; 0x3e
    104a:	8d af       	std	Y+61, r24	; 0x3d
    104c:	46 c0       	rjmp	.+140    	; 0x10da <Enter_confirm_Password+0x3f2>
	else if (__tmp > 65535)
    104e:	fe 01       	movw	r30, r28
    1050:	ff 96       	adiw	r30, 0x3f	; 63
    1052:	60 81       	ld	r22, Z
    1054:	71 81       	ldd	r23, Z+1	; 0x01
    1056:	82 81       	ldd	r24, Z+2	; 0x02
    1058:	93 81       	ldd	r25, Z+3	; 0x03
    105a:	20 e0       	ldi	r18, 0x00	; 0
    105c:	3f ef       	ldi	r19, 0xFF	; 255
    105e:	4f e7       	ldi	r20, 0x7F	; 127
    1060:	57 e4       	ldi	r21, 0x47	; 71
    1062:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1066:	18 16       	cp	r1, r24
    1068:	64 f5       	brge	.+88     	; 0x10c2 <Enter_confirm_Password+0x3da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    106a:	fe 01       	movw	r30, r28
    106c:	ed 5b       	subi	r30, 0xBD	; 189
    106e:	ff 4f       	sbci	r31, 0xFF	; 255
    1070:	60 81       	ld	r22, Z
    1072:	71 81       	ldd	r23, Z+1	; 0x01
    1074:	82 81       	ldd	r24, Z+2	; 0x02
    1076:	93 81       	ldd	r25, Z+3	; 0x03
    1078:	20 e0       	ldi	r18, 0x00	; 0
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	40 e2       	ldi	r20, 0x20	; 32
    107e:	51 e4       	ldi	r21, 0x41	; 65
    1080:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1084:	dc 01       	movw	r26, r24
    1086:	cb 01       	movw	r24, r22
    1088:	bc 01       	movw	r22, r24
    108a:	cd 01       	movw	r24, r26
    108c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1090:	dc 01       	movw	r26, r24
    1092:	cb 01       	movw	r24, r22
    1094:	9e af       	std	Y+62, r25	; 0x3e
    1096:	8d af       	std	Y+61, r24	; 0x3d
    1098:	0f c0       	rjmp	.+30     	; 0x10b8 <Enter_confirm_Password+0x3d0>
    109a:	88 ec       	ldi	r24, 0xC8	; 200
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	9c af       	std	Y+60, r25	; 0x3c
    10a0:	8b af       	std	Y+59, r24	; 0x3b
    10a2:	8b ad       	ldd	r24, Y+59	; 0x3b
    10a4:	9c ad       	ldd	r25, Y+60	; 0x3c
    10a6:	01 97       	sbiw	r24, 0x01	; 1
    10a8:	f1 f7       	brne	.-4      	; 0x10a6 <Enter_confirm_Password+0x3be>
    10aa:	9c af       	std	Y+60, r25	; 0x3c
    10ac:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10ae:	8d ad       	ldd	r24, Y+61	; 0x3d
    10b0:	9e ad       	ldd	r25, Y+62	; 0x3e
    10b2:	01 97       	sbiw	r24, 0x01	; 1
    10b4:	9e af       	std	Y+62, r25	; 0x3e
    10b6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    10ba:	9e ad       	ldd	r25, Y+62	; 0x3e
    10bc:	00 97       	sbiw	r24, 0x00	; 0
    10be:	69 f7       	brne	.-38     	; 0x109a <Enter_confirm_Password+0x3b2>
    10c0:	16 c0       	rjmp	.+44     	; 0x10ee <Enter_confirm_Password+0x406>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10c2:	fe 01       	movw	r30, r28
    10c4:	ff 96       	adiw	r30, 0x3f	; 63
    10c6:	60 81       	ld	r22, Z
    10c8:	71 81       	ldd	r23, Z+1	; 0x01
    10ca:	82 81       	ldd	r24, Z+2	; 0x02
    10cc:	93 81       	ldd	r25, Z+3	; 0x03
    10ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10d2:	dc 01       	movw	r26, r24
    10d4:	cb 01       	movw	r24, r22
    10d6:	9e af       	std	Y+62, r25	; 0x3e
    10d8:	8d af       	std	Y+61, r24	; 0x3d
    10da:	8d ad       	ldd	r24, Y+61	; 0x3d
    10dc:	9e ad       	ldd	r25, Y+62	; 0x3e
    10de:	9a af       	std	Y+58, r25	; 0x3a
    10e0:	89 af       	std	Y+57, r24	; 0x39
    10e2:	89 ad       	ldd	r24, Y+57	; 0x39
    10e4:	9a ad       	ldd	r25, Y+58	; 0x3a
    10e6:	01 97       	sbiw	r24, 0x01	; 1
    10e8:	f1 f7       	brne	.-4      	; 0x10e6 <Enter_confirm_Password+0x3fe>
    10ea:	9a af       	std	Y+58, r25	; 0x3a
    10ec:	89 af       	std	Y+57, r24	; 0x39

	 _delay_ms(1500);

	LCD_clearScreen(); /* clear the LCD display */
    10ee:	0e 94 c9 20 	call	0x4192	; 0x4192 <LCD_clearScreen>
    10f2:	80 e0       	ldi	r24, 0x00	; 0
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	a8 e4       	ldi	r26, 0x48	; 72
    10f8:	b3 e4       	ldi	r27, 0x43	; 67
    10fa:	8d ab       	std	Y+53, r24	; 0x35
    10fc:	9e ab       	std	Y+54, r25	; 0x36
    10fe:	af ab       	std	Y+55, r26	; 0x37
    1100:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1102:	6d a9       	ldd	r22, Y+53	; 0x35
    1104:	7e a9       	ldd	r23, Y+54	; 0x36
    1106:	8f a9       	ldd	r24, Y+55	; 0x37
    1108:	98 ad       	ldd	r25, Y+56	; 0x38
    110a:	20 e0       	ldi	r18, 0x00	; 0
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	4a ef       	ldi	r20, 0xFA	; 250
    1110:	54 e4       	ldi	r21, 0x44	; 68
    1112:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1116:	dc 01       	movw	r26, r24
    1118:	cb 01       	movw	r24, r22
    111a:	89 ab       	std	Y+49, r24	; 0x31
    111c:	9a ab       	std	Y+50, r25	; 0x32
    111e:	ab ab       	std	Y+51, r26	; 0x33
    1120:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1122:	69 a9       	ldd	r22, Y+49	; 0x31
    1124:	7a a9       	ldd	r23, Y+50	; 0x32
    1126:	8b a9       	ldd	r24, Y+51	; 0x33
    1128:	9c a9       	ldd	r25, Y+52	; 0x34
    112a:	20 e0       	ldi	r18, 0x00	; 0
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	40 e8       	ldi	r20, 0x80	; 128
    1130:	5f e3       	ldi	r21, 0x3F	; 63
    1132:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1136:	88 23       	and	r24, r24
    1138:	2c f4       	brge	.+10     	; 0x1144 <Enter_confirm_Password+0x45c>
		__ticks = 1;
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	98 ab       	std	Y+48, r25	; 0x30
    1140:	8f a7       	std	Y+47, r24	; 0x2f
    1142:	3f c0       	rjmp	.+126    	; 0x11c2 <Enter_confirm_Password+0x4da>
	else if (__tmp > 65535)
    1144:	69 a9       	ldd	r22, Y+49	; 0x31
    1146:	7a a9       	ldd	r23, Y+50	; 0x32
    1148:	8b a9       	ldd	r24, Y+51	; 0x33
    114a:	9c a9       	ldd	r25, Y+52	; 0x34
    114c:	20 e0       	ldi	r18, 0x00	; 0
    114e:	3f ef       	ldi	r19, 0xFF	; 255
    1150:	4f e7       	ldi	r20, 0x7F	; 127
    1152:	57 e4       	ldi	r21, 0x47	; 71
    1154:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1158:	18 16       	cp	r1, r24
    115a:	4c f5       	brge	.+82     	; 0x11ae <Enter_confirm_Password+0x4c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    115c:	6d a9       	ldd	r22, Y+53	; 0x35
    115e:	7e a9       	ldd	r23, Y+54	; 0x36
    1160:	8f a9       	ldd	r24, Y+55	; 0x37
    1162:	98 ad       	ldd	r25, Y+56	; 0x38
    1164:	20 e0       	ldi	r18, 0x00	; 0
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	40 e2       	ldi	r20, 0x20	; 32
    116a:	51 e4       	ldi	r21, 0x41	; 65
    116c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1170:	dc 01       	movw	r26, r24
    1172:	cb 01       	movw	r24, r22
    1174:	bc 01       	movw	r22, r24
    1176:	cd 01       	movw	r24, r26
    1178:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    117c:	dc 01       	movw	r26, r24
    117e:	cb 01       	movw	r24, r22
    1180:	98 ab       	std	Y+48, r25	; 0x30
    1182:	8f a7       	std	Y+47, r24	; 0x2f
    1184:	0f c0       	rjmp	.+30     	; 0x11a4 <Enter_confirm_Password+0x4bc>
    1186:	88 ec       	ldi	r24, 0xC8	; 200
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	9e a7       	std	Y+46, r25	; 0x2e
    118c:	8d a7       	std	Y+45, r24	; 0x2d
    118e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1190:	9e a5       	ldd	r25, Y+46	; 0x2e
    1192:	01 97       	sbiw	r24, 0x01	; 1
    1194:	f1 f7       	brne	.-4      	; 0x1192 <Enter_confirm_Password+0x4aa>
    1196:	9e a7       	std	Y+46, r25	; 0x2e
    1198:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    119a:	8f a5       	ldd	r24, Y+47	; 0x2f
    119c:	98 a9       	ldd	r25, Y+48	; 0x30
    119e:	01 97       	sbiw	r24, 0x01	; 1
    11a0:	98 ab       	std	Y+48, r25	; 0x30
    11a2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    11a6:	98 a9       	ldd	r25, Y+48	; 0x30
    11a8:	00 97       	sbiw	r24, 0x00	; 0
    11aa:	69 f7       	brne	.-38     	; 0x1186 <Enter_confirm_Password+0x49e>
    11ac:	14 c0       	rjmp	.+40     	; 0x11d6 <Enter_confirm_Password+0x4ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11ae:	69 a9       	ldd	r22, Y+49	; 0x31
    11b0:	7a a9       	ldd	r23, Y+50	; 0x32
    11b2:	8b a9       	ldd	r24, Y+51	; 0x33
    11b4:	9c a9       	ldd	r25, Y+52	; 0x34
    11b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ba:	dc 01       	movw	r26, r24
    11bc:	cb 01       	movw	r24, r22
    11be:	98 ab       	std	Y+48, r25	; 0x30
    11c0:	8f a7       	std	Y+47, r24	; 0x2f
    11c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    11c4:	98 a9       	ldd	r25, Y+48	; 0x30
    11c6:	9c a7       	std	Y+44, r25	; 0x2c
    11c8:	8b a7       	std	Y+43, r24	; 0x2b
    11ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    11cc:	9c a5       	ldd	r25, Y+44	; 0x2c
    11ce:	01 97       	sbiw	r24, 0x01	; 1
    11d0:	f1 f7       	brne	.-4      	; 0x11ce <Enter_confirm_Password+0x4e6>
    11d2:	9c a7       	std	Y+44, r25	; 0x2c
    11d4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(200);

	LCD_displayStringRowColumn(0,0,"Confirm password:");
    11d6:	20 e7       	ldi	r18, 0x70	; 112
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	80 e0       	ldi	r24, 0x00	; 0
    11dc:	60 e0       	ldi	r22, 0x00	; 0
    11de:	a9 01       	movw	r20, r18
    11e0:	0e 94 8d 20 	call	0x411a	; 0x411a <LCD_displayStringRowColumn>
    11e4:	80 e0       	ldi	r24, 0x00	; 0
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	aa ef       	ldi	r26, 0xFA	; 250
    11ea:	b3 e4       	ldi	r27, 0x43	; 67
    11ec:	8f a3       	std	Y+39, r24	; 0x27
    11ee:	98 a7       	std	Y+40, r25	; 0x28
    11f0:	a9 a7       	std	Y+41, r26	; 0x29
    11f2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11f4:	6f a1       	ldd	r22, Y+39	; 0x27
    11f6:	78 a5       	ldd	r23, Y+40	; 0x28
    11f8:	89 a5       	ldd	r24, Y+41	; 0x29
    11fa:	9a a5       	ldd	r25, Y+42	; 0x2a
    11fc:	20 e0       	ldi	r18, 0x00	; 0
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	4a ef       	ldi	r20, 0xFA	; 250
    1202:	54 e4       	ldi	r21, 0x44	; 68
    1204:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1208:	dc 01       	movw	r26, r24
    120a:	cb 01       	movw	r24, r22
    120c:	8b a3       	std	Y+35, r24	; 0x23
    120e:	9c a3       	std	Y+36, r25	; 0x24
    1210:	ad a3       	std	Y+37, r26	; 0x25
    1212:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1214:	6b a1       	ldd	r22, Y+35	; 0x23
    1216:	7c a1       	ldd	r23, Y+36	; 0x24
    1218:	8d a1       	ldd	r24, Y+37	; 0x25
    121a:	9e a1       	ldd	r25, Y+38	; 0x26
    121c:	20 e0       	ldi	r18, 0x00	; 0
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	40 e8       	ldi	r20, 0x80	; 128
    1222:	5f e3       	ldi	r21, 0x3F	; 63
    1224:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1228:	88 23       	and	r24, r24
    122a:	2c f4       	brge	.+10     	; 0x1236 <Enter_confirm_Password+0x54e>
		__ticks = 1;
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	9a a3       	std	Y+34, r25	; 0x22
    1232:	89 a3       	std	Y+33, r24	; 0x21
    1234:	3f c0       	rjmp	.+126    	; 0x12b4 <Enter_confirm_Password+0x5cc>
	else if (__tmp > 65535)
    1236:	6b a1       	ldd	r22, Y+35	; 0x23
    1238:	7c a1       	ldd	r23, Y+36	; 0x24
    123a:	8d a1       	ldd	r24, Y+37	; 0x25
    123c:	9e a1       	ldd	r25, Y+38	; 0x26
    123e:	20 e0       	ldi	r18, 0x00	; 0
    1240:	3f ef       	ldi	r19, 0xFF	; 255
    1242:	4f e7       	ldi	r20, 0x7F	; 127
    1244:	57 e4       	ldi	r21, 0x47	; 71
    1246:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    124a:	18 16       	cp	r1, r24
    124c:	4c f5       	brge	.+82     	; 0x12a0 <Enter_confirm_Password+0x5b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    124e:	6f a1       	ldd	r22, Y+39	; 0x27
    1250:	78 a5       	ldd	r23, Y+40	; 0x28
    1252:	89 a5       	ldd	r24, Y+41	; 0x29
    1254:	9a a5       	ldd	r25, Y+42	; 0x2a
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	40 e2       	ldi	r20, 0x20	; 32
    125c:	51 e4       	ldi	r21, 0x41	; 65
    125e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1262:	dc 01       	movw	r26, r24
    1264:	cb 01       	movw	r24, r22
    1266:	bc 01       	movw	r22, r24
    1268:	cd 01       	movw	r24, r26
    126a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    126e:	dc 01       	movw	r26, r24
    1270:	cb 01       	movw	r24, r22
    1272:	9a a3       	std	Y+34, r25	; 0x22
    1274:	89 a3       	std	Y+33, r24	; 0x21
    1276:	0f c0       	rjmp	.+30     	; 0x1296 <Enter_confirm_Password+0x5ae>
    1278:	88 ec       	ldi	r24, 0xC8	; 200
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	98 a3       	std	Y+32, r25	; 0x20
    127e:	8f 8f       	std	Y+31, r24	; 0x1f
    1280:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1282:	98 a1       	ldd	r25, Y+32	; 0x20
    1284:	01 97       	sbiw	r24, 0x01	; 1
    1286:	f1 f7       	brne	.-4      	; 0x1284 <Enter_confirm_Password+0x59c>
    1288:	98 a3       	std	Y+32, r25	; 0x20
    128a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    128c:	89 a1       	ldd	r24, Y+33	; 0x21
    128e:	9a a1       	ldd	r25, Y+34	; 0x22
    1290:	01 97       	sbiw	r24, 0x01	; 1
    1292:	9a a3       	std	Y+34, r25	; 0x22
    1294:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1296:	89 a1       	ldd	r24, Y+33	; 0x21
    1298:	9a a1       	ldd	r25, Y+34	; 0x22
    129a:	00 97       	sbiw	r24, 0x00	; 0
    129c:	69 f7       	brne	.-38     	; 0x1278 <Enter_confirm_Password+0x590>
    129e:	14 c0       	rjmp	.+40     	; 0x12c8 <Enter_confirm_Password+0x5e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12a0:	6b a1       	ldd	r22, Y+35	; 0x23
    12a2:	7c a1       	ldd	r23, Y+36	; 0x24
    12a4:	8d a1       	ldd	r24, Y+37	; 0x25
    12a6:	9e a1       	ldd	r25, Y+38	; 0x26
    12a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ac:	dc 01       	movw	r26, r24
    12ae:	cb 01       	movw	r24, r22
    12b0:	9a a3       	std	Y+34, r25	; 0x22
    12b2:	89 a3       	std	Y+33, r24	; 0x21
    12b4:	89 a1       	ldd	r24, Y+33	; 0x21
    12b6:	9a a1       	ldd	r25, Y+34	; 0x22
    12b8:	9e 8f       	std	Y+30, r25	; 0x1e
    12ba:	8d 8f       	std	Y+29, r24	; 0x1d
    12bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12be:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12c0:	01 97       	sbiw	r24, 0x01	; 1
    12c2:	f1 f7       	brne	.-4      	; 0x12c0 <Enter_confirm_Password+0x5d8>
    12c4:	9e 8f       	std	Y+30, r25	; 0x1e
    12c6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(500);

	Enter_Send_Password();
    12c8:	0e 94 a3 05 	call	0xb46	; 0xb46 <Enter_Send_Password>
    12cc:	80 e0       	ldi	r24, 0x00	; 0
    12ce:	90 e8       	ldi	r25, 0x80	; 128
    12d0:	ab eb       	ldi	r26, 0xBB	; 187
    12d2:	b4 e4       	ldi	r27, 0x44	; 68
    12d4:	89 8f       	std	Y+25, r24	; 0x19
    12d6:	9a 8f       	std	Y+26, r25	; 0x1a
    12d8:	ab 8f       	std	Y+27, r26	; 0x1b
    12da:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12dc:	69 8d       	ldd	r22, Y+25	; 0x19
    12de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	4a ef       	ldi	r20, 0xFA	; 250
    12ea:	54 e4       	ldi	r21, 0x44	; 68
    12ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f0:	dc 01       	movw	r26, r24
    12f2:	cb 01       	movw	r24, r22
    12f4:	8d 8b       	std	Y+21, r24	; 0x15
    12f6:	9e 8b       	std	Y+22, r25	; 0x16
    12f8:	af 8b       	std	Y+23, r26	; 0x17
    12fa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    12fc:	6d 89       	ldd	r22, Y+21	; 0x15
    12fe:	7e 89       	ldd	r23, Y+22	; 0x16
    1300:	8f 89       	ldd	r24, Y+23	; 0x17
    1302:	98 8d       	ldd	r25, Y+24	; 0x18
    1304:	20 e0       	ldi	r18, 0x00	; 0
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	40 e8       	ldi	r20, 0x80	; 128
    130a:	5f e3       	ldi	r21, 0x3F	; 63
    130c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1310:	88 23       	and	r24, r24
    1312:	2c f4       	brge	.+10     	; 0x131e <Enter_confirm_Password+0x636>
		__ticks = 1;
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	9c 8b       	std	Y+20, r25	; 0x14
    131a:	8b 8b       	std	Y+19, r24	; 0x13
    131c:	3f c0       	rjmp	.+126    	; 0x139c <Enter_confirm_Password+0x6b4>
	else if (__tmp > 65535)
    131e:	6d 89       	ldd	r22, Y+21	; 0x15
    1320:	7e 89       	ldd	r23, Y+22	; 0x16
    1322:	8f 89       	ldd	r24, Y+23	; 0x17
    1324:	98 8d       	ldd	r25, Y+24	; 0x18
    1326:	20 e0       	ldi	r18, 0x00	; 0
    1328:	3f ef       	ldi	r19, 0xFF	; 255
    132a:	4f e7       	ldi	r20, 0x7F	; 127
    132c:	57 e4       	ldi	r21, 0x47	; 71
    132e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1332:	18 16       	cp	r1, r24
    1334:	4c f5       	brge	.+82     	; 0x1388 <Enter_confirm_Password+0x6a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1336:	69 8d       	ldd	r22, Y+25	; 0x19
    1338:	7a 8d       	ldd	r23, Y+26	; 0x1a
    133a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    133c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    133e:	20 e0       	ldi	r18, 0x00	; 0
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	40 e2       	ldi	r20, 0x20	; 32
    1344:	51 e4       	ldi	r21, 0x41	; 65
    1346:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    134a:	dc 01       	movw	r26, r24
    134c:	cb 01       	movw	r24, r22
    134e:	bc 01       	movw	r22, r24
    1350:	cd 01       	movw	r24, r26
    1352:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1356:	dc 01       	movw	r26, r24
    1358:	cb 01       	movw	r24, r22
    135a:	9c 8b       	std	Y+20, r25	; 0x14
    135c:	8b 8b       	std	Y+19, r24	; 0x13
    135e:	0f c0       	rjmp	.+30     	; 0x137e <Enter_confirm_Password+0x696>
    1360:	88 ec       	ldi	r24, 0xC8	; 200
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	9a 8b       	std	Y+18, r25	; 0x12
    1366:	89 8b       	std	Y+17, r24	; 0x11
    1368:	89 89       	ldd	r24, Y+17	; 0x11
    136a:	9a 89       	ldd	r25, Y+18	; 0x12
    136c:	01 97       	sbiw	r24, 0x01	; 1
    136e:	f1 f7       	brne	.-4      	; 0x136c <Enter_confirm_Password+0x684>
    1370:	9a 8b       	std	Y+18, r25	; 0x12
    1372:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1374:	8b 89       	ldd	r24, Y+19	; 0x13
    1376:	9c 89       	ldd	r25, Y+20	; 0x14
    1378:	01 97       	sbiw	r24, 0x01	; 1
    137a:	9c 8b       	std	Y+20, r25	; 0x14
    137c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    137e:	8b 89       	ldd	r24, Y+19	; 0x13
    1380:	9c 89       	ldd	r25, Y+20	; 0x14
    1382:	00 97       	sbiw	r24, 0x00	; 0
    1384:	69 f7       	brne	.-38     	; 0x1360 <Enter_confirm_Password+0x678>
    1386:	14 c0       	rjmp	.+40     	; 0x13b0 <Enter_confirm_Password+0x6c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1388:	6d 89       	ldd	r22, Y+21	; 0x15
    138a:	7e 89       	ldd	r23, Y+22	; 0x16
    138c:	8f 89       	ldd	r24, Y+23	; 0x17
    138e:	98 8d       	ldd	r25, Y+24	; 0x18
    1390:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1394:	dc 01       	movw	r26, r24
    1396:	cb 01       	movw	r24, r22
    1398:	9c 8b       	std	Y+20, r25	; 0x14
    139a:	8b 8b       	std	Y+19, r24	; 0x13
    139c:	8b 89       	ldd	r24, Y+19	; 0x13
    139e:	9c 89       	ldd	r25, Y+20	; 0x14
    13a0:	98 8b       	std	Y+16, r25	; 0x10
    13a2:	8f 87       	std	Y+15, r24	; 0x0f
    13a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    13a6:	98 89       	ldd	r25, Y+16	; 0x10
    13a8:	01 97       	sbiw	r24, 0x01	; 1
    13aa:	f1 f7       	brne	.-4      	; 0x13a8 <Enter_confirm_Password+0x6c0>
    13ac:	98 8b       	std	Y+16, r25	; 0x10
    13ae:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1500);

	LCD_clearScreen(); /* clear the LCD display */
    13b0:	0e 94 c9 20 	call	0x4192	; 0x4192 <LCD_clearScreen>
    13b4:	80 e0       	ldi	r24, 0x00	; 0
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	a8 e4       	ldi	r26, 0x48	; 72
    13ba:	b3 e4       	ldi	r27, 0x43	; 67
    13bc:	8b 87       	std	Y+11, r24	; 0x0b
    13be:	9c 87       	std	Y+12, r25	; 0x0c
    13c0:	ad 87       	std	Y+13, r26	; 0x0d
    13c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    13c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    13c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    13cc:	20 e0       	ldi	r18, 0x00	; 0
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	4a ef       	ldi	r20, 0xFA	; 250
    13d2:	54 e4       	ldi	r21, 0x44	; 68
    13d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13d8:	dc 01       	movw	r26, r24
    13da:	cb 01       	movw	r24, r22
    13dc:	8f 83       	std	Y+7, r24	; 0x07
    13de:	98 87       	std	Y+8, r25	; 0x08
    13e0:	a9 87       	std	Y+9, r26	; 0x09
    13e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13e4:	6f 81       	ldd	r22, Y+7	; 0x07
    13e6:	78 85       	ldd	r23, Y+8	; 0x08
    13e8:	89 85       	ldd	r24, Y+9	; 0x09
    13ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ec:	20 e0       	ldi	r18, 0x00	; 0
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	40 e8       	ldi	r20, 0x80	; 128
    13f2:	5f e3       	ldi	r21, 0x3F	; 63
    13f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13f8:	88 23       	and	r24, r24
    13fa:	2c f4       	brge	.+10     	; 0x1406 <Enter_confirm_Password+0x71e>
		__ticks = 1;
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	9e 83       	std	Y+6, r25	; 0x06
    1402:	8d 83       	std	Y+5, r24	; 0x05
    1404:	3f c0       	rjmp	.+126    	; 0x1484 <Enter_confirm_Password+0x79c>
	else if (__tmp > 65535)
    1406:	6f 81       	ldd	r22, Y+7	; 0x07
    1408:	78 85       	ldd	r23, Y+8	; 0x08
    140a:	89 85       	ldd	r24, Y+9	; 0x09
    140c:	9a 85       	ldd	r25, Y+10	; 0x0a
    140e:	20 e0       	ldi	r18, 0x00	; 0
    1410:	3f ef       	ldi	r19, 0xFF	; 255
    1412:	4f e7       	ldi	r20, 0x7F	; 127
    1414:	57 e4       	ldi	r21, 0x47	; 71
    1416:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    141a:	18 16       	cp	r1, r24
    141c:	4c f5       	brge	.+82     	; 0x1470 <Enter_confirm_Password+0x788>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    141e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1420:	7c 85       	ldd	r23, Y+12	; 0x0c
    1422:	8d 85       	ldd	r24, Y+13	; 0x0d
    1424:	9e 85       	ldd	r25, Y+14	; 0x0e
    1426:	20 e0       	ldi	r18, 0x00	; 0
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	40 e2       	ldi	r20, 0x20	; 32
    142c:	51 e4       	ldi	r21, 0x41	; 65
    142e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1432:	dc 01       	movw	r26, r24
    1434:	cb 01       	movw	r24, r22
    1436:	bc 01       	movw	r22, r24
    1438:	cd 01       	movw	r24, r26
    143a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    143e:	dc 01       	movw	r26, r24
    1440:	cb 01       	movw	r24, r22
    1442:	9e 83       	std	Y+6, r25	; 0x06
    1444:	8d 83       	std	Y+5, r24	; 0x05
    1446:	0f c0       	rjmp	.+30     	; 0x1466 <Enter_confirm_Password+0x77e>
    1448:	88 ec       	ldi	r24, 0xC8	; 200
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	9c 83       	std	Y+4, r25	; 0x04
    144e:	8b 83       	std	Y+3, r24	; 0x03
    1450:	8b 81       	ldd	r24, Y+3	; 0x03
    1452:	9c 81       	ldd	r25, Y+4	; 0x04
    1454:	01 97       	sbiw	r24, 0x01	; 1
    1456:	f1 f7       	brne	.-4      	; 0x1454 <Enter_confirm_Password+0x76c>
    1458:	9c 83       	std	Y+4, r25	; 0x04
    145a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    145c:	8d 81       	ldd	r24, Y+5	; 0x05
    145e:	9e 81       	ldd	r25, Y+6	; 0x06
    1460:	01 97       	sbiw	r24, 0x01	; 1
    1462:	9e 83       	std	Y+6, r25	; 0x06
    1464:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1466:	8d 81       	ldd	r24, Y+5	; 0x05
    1468:	9e 81       	ldd	r25, Y+6	; 0x06
    146a:	00 97       	sbiw	r24, 0x00	; 0
    146c:	69 f7       	brne	.-38     	; 0x1448 <Enter_confirm_Password+0x760>
    146e:	14 c0       	rjmp	.+40     	; 0x1498 <Enter_confirm_Password+0x7b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1470:	6f 81       	ldd	r22, Y+7	; 0x07
    1472:	78 85       	ldd	r23, Y+8	; 0x08
    1474:	89 85       	ldd	r24, Y+9	; 0x09
    1476:	9a 85       	ldd	r25, Y+10	; 0x0a
    1478:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    147c:	dc 01       	movw	r26, r24
    147e:	cb 01       	movw	r24, r22
    1480:	9e 83       	std	Y+6, r25	; 0x06
    1482:	8d 83       	std	Y+5, r24	; 0x05
    1484:	8d 81       	ldd	r24, Y+5	; 0x05
    1486:	9e 81       	ldd	r25, Y+6	; 0x06
    1488:	9a 83       	std	Y+2, r25	; 0x02
    148a:	89 83       	std	Y+1, r24	; 0x01
    148c:	89 81       	ldd	r24, Y+1	; 0x01
    148e:	9a 81       	ldd	r25, Y+2	; 0x02
    1490:	01 97       	sbiw	r24, 0x01	; 1
    1492:	f1 f7       	brne	.-4      	; 0x1490 <Enter_confirm_Password+0x7a8>
    1494:	9a 83       	std	Y+2, r25	; 0x02
    1496:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);
}
    1498:	ce 59       	subi	r28, 0x9E	; 158
    149a:	df 4f       	sbci	r29, 0xFF	; 255
    149c:	0f b6       	in	r0, 0x3f	; 63
    149e:	f8 94       	cli
    14a0:	de bf       	out	0x3e, r29	; 62
    14a2:	0f be       	out	0x3f, r0	; 63
    14a4:	cd bf       	out	0x3d, r28	; 61
    14a6:	cf 91       	pop	r28
    14a8:	df 91       	pop	r29
    14aa:	1f 91       	pop	r17
    14ac:	0f 91       	pop	r16
    14ae:	08 95       	ret

000014b0 <Check_Value_Func>:

uint8 Check_Value_Func()
{
    14b0:	df 93       	push	r29
    14b2:	cf 93       	push	r28
    14b4:	0f 92       	push	r0
    14b6:	cd b7       	in	r28, 0x3d	; 61
    14b8:	de b7       	in	r29, 0x3e	; 62
	uint8 check_value;

	check_value = UART_recieveByte(); /* receive the check_value  from the 2nd MC using uart */
    14ba:	0e 94 66 21 	call	0x42cc	; 0x42cc <UART_recieveByte>
    14be:	89 83       	std	Y+1, r24	; 0x01

return check_value;
    14c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    14c2:	0f 90       	pop	r0
    14c4:	cf 91       	pop	r28
    14c6:	df 91       	pop	r29
    14c8:	08 95       	ret

000014ca <Open_Door>:

void Open_Door()
{
    14ca:	0f 93       	push	r16
    14cc:	1f 93       	push	r17
    14ce:	df 93       	push	r29
    14d0:	cf 93       	push	r28
    14d2:	cd b7       	in	r28, 0x3d	; 61
    14d4:	de b7       	in	r29, 0x3e	; 62
    14d6:	cc 59       	subi	r28, 0x9C	; 156
    14d8:	d0 40       	sbci	r29, 0x00	; 0
    14da:	0f b6       	in	r0, 0x3f	; 63
    14dc:	f8 94       	cli
    14de:	de bf       	out	0x3e, r29	; 62
    14e0:	0f be       	out	0x3f, r0	; 63
    14e2:	cd bf       	out	0x3d, r28	; 61
	uint8 mode=1;
    14e4:	fe 01       	movw	r30, r28
    14e6:	e4 56       	subi	r30, 0x64	; 100
    14e8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	80 83       	st	Z, r24
	uint8 saved_password_value_2nd=0;
    14ee:	fe 01       	movw	r30, r28
    14f0:	e5 56       	subi	r30, 0x65	; 101
    14f2:	ff 4f       	sbci	r31, 0xFF	; 255
    14f4:	10 82       	st	Z, r1

	UART_sendByte(mode); //send the mode to the second MC using uart
    14f6:	fe 01       	movw	r30, r28
    14f8:	e4 56       	subi	r30, 0x64	; 100
    14fa:	ff 4f       	sbci	r31, 0xFF	; 255
    14fc:	80 81       	ld	r24, Z
    14fe:	0e 94 4f 21 	call	0x429e	; 0x429e <UART_sendByte>

	LCD_clearScreen(); /* clear the LCD display */
    1502:	0e 94 c9 20 	call	0x4192	; 0x4192 <LCD_clearScreen>
    1506:	fe 01       	movw	r30, r28
    1508:	e9 56       	subi	r30, 0x69	; 105
    150a:	ff 4f       	sbci	r31, 0xFF	; 255
    150c:	80 e0       	ldi	r24, 0x00	; 0
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	a8 e4       	ldi	r26, 0x48	; 72
    1512:	b3 e4       	ldi	r27, 0x43	; 67
    1514:	80 83       	st	Z, r24
    1516:	91 83       	std	Z+1, r25	; 0x01
    1518:	a2 83       	std	Z+2, r26	; 0x02
    151a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    151c:	8e 01       	movw	r16, r28
    151e:	0d 56       	subi	r16, 0x6D	; 109
    1520:	1f 4f       	sbci	r17, 0xFF	; 255
    1522:	fe 01       	movw	r30, r28
    1524:	e9 56       	subi	r30, 0x69	; 105
    1526:	ff 4f       	sbci	r31, 0xFF	; 255
    1528:	60 81       	ld	r22, Z
    152a:	71 81       	ldd	r23, Z+1	; 0x01
    152c:	82 81       	ldd	r24, Z+2	; 0x02
    152e:	93 81       	ldd	r25, Z+3	; 0x03
    1530:	20 e0       	ldi	r18, 0x00	; 0
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	4a ef       	ldi	r20, 0xFA	; 250
    1536:	54 e4       	ldi	r21, 0x44	; 68
    1538:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    153c:	dc 01       	movw	r26, r24
    153e:	cb 01       	movw	r24, r22
    1540:	f8 01       	movw	r30, r16
    1542:	80 83       	st	Z, r24
    1544:	91 83       	std	Z+1, r25	; 0x01
    1546:	a2 83       	std	Z+2, r26	; 0x02
    1548:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    154a:	fe 01       	movw	r30, r28
    154c:	ed 56       	subi	r30, 0x6D	; 109
    154e:	ff 4f       	sbci	r31, 0xFF	; 255
    1550:	60 81       	ld	r22, Z
    1552:	71 81       	ldd	r23, Z+1	; 0x01
    1554:	82 81       	ldd	r24, Z+2	; 0x02
    1556:	93 81       	ldd	r25, Z+3	; 0x03
    1558:	20 e0       	ldi	r18, 0x00	; 0
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	40 e8       	ldi	r20, 0x80	; 128
    155e:	5f e3       	ldi	r21, 0x3F	; 63
    1560:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1564:	88 23       	and	r24, r24
    1566:	44 f4       	brge	.+16     	; 0x1578 <Open_Door+0xae>
		__ticks = 1;
    1568:	fe 01       	movw	r30, r28
    156a:	ef 56       	subi	r30, 0x6F	; 111
    156c:	ff 4f       	sbci	r31, 0xFF	; 255
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	91 83       	std	Z+1, r25	; 0x01
    1574:	80 83       	st	Z, r24
    1576:	64 c0       	rjmp	.+200    	; 0x1640 <Open_Door+0x176>
	else if (__tmp > 65535)
    1578:	fe 01       	movw	r30, r28
    157a:	ed 56       	subi	r30, 0x6D	; 109
    157c:	ff 4f       	sbci	r31, 0xFF	; 255
    157e:	60 81       	ld	r22, Z
    1580:	71 81       	ldd	r23, Z+1	; 0x01
    1582:	82 81       	ldd	r24, Z+2	; 0x02
    1584:	93 81       	ldd	r25, Z+3	; 0x03
    1586:	20 e0       	ldi	r18, 0x00	; 0
    1588:	3f ef       	ldi	r19, 0xFF	; 255
    158a:	4f e7       	ldi	r20, 0x7F	; 127
    158c:	57 e4       	ldi	r21, 0x47	; 71
    158e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1592:	18 16       	cp	r1, r24
    1594:	0c f0       	brlt	.+2      	; 0x1598 <Open_Door+0xce>
    1596:	43 c0       	rjmp	.+134    	; 0x161e <Open_Door+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1598:	fe 01       	movw	r30, r28
    159a:	e9 56       	subi	r30, 0x69	; 105
    159c:	ff 4f       	sbci	r31, 0xFF	; 255
    159e:	60 81       	ld	r22, Z
    15a0:	71 81       	ldd	r23, Z+1	; 0x01
    15a2:	82 81       	ldd	r24, Z+2	; 0x02
    15a4:	93 81       	ldd	r25, Z+3	; 0x03
    15a6:	20 e0       	ldi	r18, 0x00	; 0
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	40 e2       	ldi	r20, 0x20	; 32
    15ac:	51 e4       	ldi	r21, 0x41	; 65
    15ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15b2:	dc 01       	movw	r26, r24
    15b4:	cb 01       	movw	r24, r22
    15b6:	8e 01       	movw	r16, r28
    15b8:	0f 56       	subi	r16, 0x6F	; 111
    15ba:	1f 4f       	sbci	r17, 0xFF	; 255
    15bc:	bc 01       	movw	r22, r24
    15be:	cd 01       	movw	r24, r26
    15c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15c4:	dc 01       	movw	r26, r24
    15c6:	cb 01       	movw	r24, r22
    15c8:	f8 01       	movw	r30, r16
    15ca:	91 83       	std	Z+1, r25	; 0x01
    15cc:	80 83       	st	Z, r24
    15ce:	1f c0       	rjmp	.+62     	; 0x160e <Open_Door+0x144>
    15d0:	fe 01       	movw	r30, r28
    15d2:	e1 57       	subi	r30, 0x71	; 113
    15d4:	ff 4f       	sbci	r31, 0xFF	; 255
    15d6:	88 ec       	ldi	r24, 0xC8	; 200
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	91 83       	std	Z+1, r25	; 0x01
    15dc:	80 83       	st	Z, r24
    15de:	fe 01       	movw	r30, r28
    15e0:	e1 57       	subi	r30, 0x71	; 113
    15e2:	ff 4f       	sbci	r31, 0xFF	; 255
    15e4:	80 81       	ld	r24, Z
    15e6:	91 81       	ldd	r25, Z+1	; 0x01
    15e8:	01 97       	sbiw	r24, 0x01	; 1
    15ea:	f1 f7       	brne	.-4      	; 0x15e8 <Open_Door+0x11e>
    15ec:	fe 01       	movw	r30, r28
    15ee:	e1 57       	subi	r30, 0x71	; 113
    15f0:	ff 4f       	sbci	r31, 0xFF	; 255
    15f2:	91 83       	std	Z+1, r25	; 0x01
    15f4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15f6:	de 01       	movw	r26, r28
    15f8:	af 56       	subi	r26, 0x6F	; 111
    15fa:	bf 4f       	sbci	r27, 0xFF	; 255
    15fc:	fe 01       	movw	r30, r28
    15fe:	ef 56       	subi	r30, 0x6F	; 111
    1600:	ff 4f       	sbci	r31, 0xFF	; 255
    1602:	80 81       	ld	r24, Z
    1604:	91 81       	ldd	r25, Z+1	; 0x01
    1606:	01 97       	sbiw	r24, 0x01	; 1
    1608:	11 96       	adiw	r26, 0x01	; 1
    160a:	9c 93       	st	X, r25
    160c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    160e:	fe 01       	movw	r30, r28
    1610:	ef 56       	subi	r30, 0x6F	; 111
    1612:	ff 4f       	sbci	r31, 0xFF	; 255
    1614:	80 81       	ld	r24, Z
    1616:	91 81       	ldd	r25, Z+1	; 0x01
    1618:	00 97       	sbiw	r24, 0x00	; 0
    161a:	d1 f6       	brne	.-76     	; 0x15d0 <Open_Door+0x106>
    161c:	27 c0       	rjmp	.+78     	; 0x166c <Open_Door+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    161e:	8e 01       	movw	r16, r28
    1620:	0f 56       	subi	r16, 0x6F	; 111
    1622:	1f 4f       	sbci	r17, 0xFF	; 255
    1624:	fe 01       	movw	r30, r28
    1626:	ed 56       	subi	r30, 0x6D	; 109
    1628:	ff 4f       	sbci	r31, 0xFF	; 255
    162a:	60 81       	ld	r22, Z
    162c:	71 81       	ldd	r23, Z+1	; 0x01
    162e:	82 81       	ldd	r24, Z+2	; 0x02
    1630:	93 81       	ldd	r25, Z+3	; 0x03
    1632:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1636:	dc 01       	movw	r26, r24
    1638:	cb 01       	movw	r24, r22
    163a:	f8 01       	movw	r30, r16
    163c:	91 83       	std	Z+1, r25	; 0x01
    163e:	80 83       	st	Z, r24
    1640:	de 01       	movw	r26, r28
    1642:	a3 57       	subi	r26, 0x73	; 115
    1644:	bf 4f       	sbci	r27, 0xFF	; 255
    1646:	fe 01       	movw	r30, r28
    1648:	ef 56       	subi	r30, 0x6F	; 111
    164a:	ff 4f       	sbci	r31, 0xFF	; 255
    164c:	80 81       	ld	r24, Z
    164e:	91 81       	ldd	r25, Z+1	; 0x01
    1650:	8d 93       	st	X+, r24
    1652:	9c 93       	st	X, r25
    1654:	fe 01       	movw	r30, r28
    1656:	e3 57       	subi	r30, 0x73	; 115
    1658:	ff 4f       	sbci	r31, 0xFF	; 255
    165a:	80 81       	ld	r24, Z
    165c:	91 81       	ldd	r25, Z+1	; 0x01
    165e:	01 97       	sbiw	r24, 0x01	; 1
    1660:	f1 f7       	brne	.-4      	; 0x165e <Open_Door+0x194>
    1662:	fe 01       	movw	r30, r28
    1664:	e3 57       	subi	r30, 0x73	; 115
    1666:	ff 4f       	sbci	r31, 0xFF	; 255
    1668:	91 83       	std	Z+1, r25	; 0x01
    166a:	80 83       	st	Z, r24
	_delay_ms(200);


	   LCD_displayStringRowColumn(0,0,"Now, You will ");
    166c:	22 e8       	ldi	r18, 0x82	; 130
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	80 e0       	ldi	r24, 0x00	; 0
    1672:	60 e0       	ldi	r22, 0x00	; 0
    1674:	a9 01       	movw	r20, r18
    1676:	0e 94 8d 20 	call	0x411a	; 0x411a <LCD_displayStringRowColumn>
	   LCD_displayStringRowColumn(1,0,"open the door");
    167a:	21 e9       	ldi	r18, 0x91	; 145
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	60 e0       	ldi	r22, 0x00	; 0
    1682:	a9 01       	movw	r20, r18
    1684:	0e 94 8d 20 	call	0x411a	; 0x411a <LCD_displayStringRowColumn>
    1688:	fe 01       	movw	r30, r28
    168a:	e7 57       	subi	r30, 0x77	; 119
    168c:	ff 4f       	sbci	r31, 0xFF	; 255
    168e:	80 e0       	ldi	r24, 0x00	; 0
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	aa ef       	ldi	r26, 0xFA	; 250
    1694:	b4 e4       	ldi	r27, 0x44	; 68
    1696:	80 83       	st	Z, r24
    1698:	91 83       	std	Z+1, r25	; 0x01
    169a:	a2 83       	std	Z+2, r26	; 0x02
    169c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    169e:	8e 01       	movw	r16, r28
    16a0:	0b 57       	subi	r16, 0x7B	; 123
    16a2:	1f 4f       	sbci	r17, 0xFF	; 255
    16a4:	fe 01       	movw	r30, r28
    16a6:	e7 57       	subi	r30, 0x77	; 119
    16a8:	ff 4f       	sbci	r31, 0xFF	; 255
    16aa:	60 81       	ld	r22, Z
    16ac:	71 81       	ldd	r23, Z+1	; 0x01
    16ae:	82 81       	ldd	r24, Z+2	; 0x02
    16b0:	93 81       	ldd	r25, Z+3	; 0x03
    16b2:	20 e0       	ldi	r18, 0x00	; 0
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	4a ef       	ldi	r20, 0xFA	; 250
    16b8:	54 e4       	ldi	r21, 0x44	; 68
    16ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16be:	dc 01       	movw	r26, r24
    16c0:	cb 01       	movw	r24, r22
    16c2:	f8 01       	movw	r30, r16
    16c4:	80 83       	st	Z, r24
    16c6:	91 83       	std	Z+1, r25	; 0x01
    16c8:	a2 83       	std	Z+2, r26	; 0x02
    16ca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16cc:	fe 01       	movw	r30, r28
    16ce:	eb 57       	subi	r30, 0x7B	; 123
    16d0:	ff 4f       	sbci	r31, 0xFF	; 255
    16d2:	60 81       	ld	r22, Z
    16d4:	71 81       	ldd	r23, Z+1	; 0x01
    16d6:	82 81       	ldd	r24, Z+2	; 0x02
    16d8:	93 81       	ldd	r25, Z+3	; 0x03
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	40 e8       	ldi	r20, 0x80	; 128
    16e0:	5f e3       	ldi	r21, 0x3F	; 63
    16e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16e6:	88 23       	and	r24, r24
    16e8:	44 f4       	brge	.+16     	; 0x16fa <Open_Door+0x230>
		__ticks = 1;
    16ea:	fe 01       	movw	r30, r28
    16ec:	ed 57       	subi	r30, 0x7D	; 125
    16ee:	ff 4f       	sbci	r31, 0xFF	; 255
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	91 83       	std	Z+1, r25	; 0x01
    16f6:	80 83       	st	Z, r24
    16f8:	64 c0       	rjmp	.+200    	; 0x17c2 <Open_Door+0x2f8>
	else if (__tmp > 65535)
    16fa:	fe 01       	movw	r30, r28
    16fc:	eb 57       	subi	r30, 0x7B	; 123
    16fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1700:	60 81       	ld	r22, Z
    1702:	71 81       	ldd	r23, Z+1	; 0x01
    1704:	82 81       	ldd	r24, Z+2	; 0x02
    1706:	93 81       	ldd	r25, Z+3	; 0x03
    1708:	20 e0       	ldi	r18, 0x00	; 0
    170a:	3f ef       	ldi	r19, 0xFF	; 255
    170c:	4f e7       	ldi	r20, 0x7F	; 127
    170e:	57 e4       	ldi	r21, 0x47	; 71
    1710:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1714:	18 16       	cp	r1, r24
    1716:	0c f0       	brlt	.+2      	; 0x171a <Open_Door+0x250>
    1718:	43 c0       	rjmp	.+134    	; 0x17a0 <Open_Door+0x2d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    171a:	fe 01       	movw	r30, r28
    171c:	e7 57       	subi	r30, 0x77	; 119
    171e:	ff 4f       	sbci	r31, 0xFF	; 255
    1720:	60 81       	ld	r22, Z
    1722:	71 81       	ldd	r23, Z+1	; 0x01
    1724:	82 81       	ldd	r24, Z+2	; 0x02
    1726:	93 81       	ldd	r25, Z+3	; 0x03
    1728:	20 e0       	ldi	r18, 0x00	; 0
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	40 e2       	ldi	r20, 0x20	; 32
    172e:	51 e4       	ldi	r21, 0x41	; 65
    1730:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1734:	dc 01       	movw	r26, r24
    1736:	cb 01       	movw	r24, r22
    1738:	8e 01       	movw	r16, r28
    173a:	0d 57       	subi	r16, 0x7D	; 125
    173c:	1f 4f       	sbci	r17, 0xFF	; 255
    173e:	bc 01       	movw	r22, r24
    1740:	cd 01       	movw	r24, r26
    1742:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1746:	dc 01       	movw	r26, r24
    1748:	cb 01       	movw	r24, r22
    174a:	f8 01       	movw	r30, r16
    174c:	91 83       	std	Z+1, r25	; 0x01
    174e:	80 83       	st	Z, r24
    1750:	1f c0       	rjmp	.+62     	; 0x1790 <Open_Door+0x2c6>
    1752:	fe 01       	movw	r30, r28
    1754:	ef 57       	subi	r30, 0x7F	; 127
    1756:	ff 4f       	sbci	r31, 0xFF	; 255
    1758:	88 ec       	ldi	r24, 0xC8	; 200
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	91 83       	std	Z+1, r25	; 0x01
    175e:	80 83       	st	Z, r24
    1760:	fe 01       	movw	r30, r28
    1762:	ef 57       	subi	r30, 0x7F	; 127
    1764:	ff 4f       	sbci	r31, 0xFF	; 255
    1766:	80 81       	ld	r24, Z
    1768:	91 81       	ldd	r25, Z+1	; 0x01
    176a:	01 97       	sbiw	r24, 0x01	; 1
    176c:	f1 f7       	brne	.-4      	; 0x176a <Open_Door+0x2a0>
    176e:	fe 01       	movw	r30, r28
    1770:	ef 57       	subi	r30, 0x7F	; 127
    1772:	ff 4f       	sbci	r31, 0xFF	; 255
    1774:	91 83       	std	Z+1, r25	; 0x01
    1776:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1778:	de 01       	movw	r26, r28
    177a:	ad 57       	subi	r26, 0x7D	; 125
    177c:	bf 4f       	sbci	r27, 0xFF	; 255
    177e:	fe 01       	movw	r30, r28
    1780:	ed 57       	subi	r30, 0x7D	; 125
    1782:	ff 4f       	sbci	r31, 0xFF	; 255
    1784:	80 81       	ld	r24, Z
    1786:	91 81       	ldd	r25, Z+1	; 0x01
    1788:	01 97       	sbiw	r24, 0x01	; 1
    178a:	11 96       	adiw	r26, 0x01	; 1
    178c:	9c 93       	st	X, r25
    178e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1790:	fe 01       	movw	r30, r28
    1792:	ed 57       	subi	r30, 0x7D	; 125
    1794:	ff 4f       	sbci	r31, 0xFF	; 255
    1796:	80 81       	ld	r24, Z
    1798:	91 81       	ldd	r25, Z+1	; 0x01
    179a:	00 97       	sbiw	r24, 0x00	; 0
    179c:	d1 f6       	brne	.-76     	; 0x1752 <Open_Door+0x288>
    179e:	27 c0       	rjmp	.+78     	; 0x17ee <Open_Door+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17a0:	8e 01       	movw	r16, r28
    17a2:	0d 57       	subi	r16, 0x7D	; 125
    17a4:	1f 4f       	sbci	r17, 0xFF	; 255
    17a6:	fe 01       	movw	r30, r28
    17a8:	eb 57       	subi	r30, 0x7B	; 123
    17aa:	ff 4f       	sbci	r31, 0xFF	; 255
    17ac:	60 81       	ld	r22, Z
    17ae:	71 81       	ldd	r23, Z+1	; 0x01
    17b0:	82 81       	ldd	r24, Z+2	; 0x02
    17b2:	93 81       	ldd	r25, Z+3	; 0x03
    17b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17b8:	dc 01       	movw	r26, r24
    17ba:	cb 01       	movw	r24, r22
    17bc:	f8 01       	movw	r30, r16
    17be:	91 83       	std	Z+1, r25	; 0x01
    17c0:	80 83       	st	Z, r24
    17c2:	de 01       	movw	r26, r28
    17c4:	a1 58       	subi	r26, 0x81	; 129
    17c6:	bf 4f       	sbci	r27, 0xFF	; 255
    17c8:	fe 01       	movw	r30, r28
    17ca:	ed 57       	subi	r30, 0x7D	; 125
    17cc:	ff 4f       	sbci	r31, 0xFF	; 255
    17ce:	80 81       	ld	r24, Z
    17d0:	91 81       	ldd	r25, Z+1	; 0x01
    17d2:	8d 93       	st	X+, r24
    17d4:	9c 93       	st	X, r25
    17d6:	fe 01       	movw	r30, r28
    17d8:	e1 58       	subi	r30, 0x81	; 129
    17da:	ff 4f       	sbci	r31, 0xFF	; 255
    17dc:	80 81       	ld	r24, Z
    17de:	91 81       	ldd	r25, Z+1	; 0x01
    17e0:	01 97       	sbiw	r24, 0x01	; 1
    17e2:	f1 f7       	brne	.-4      	; 0x17e0 <Open_Door+0x316>
    17e4:	fe 01       	movw	r30, r28
    17e6:	e1 58       	subi	r30, 0x81	; 129
    17e8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ea:	91 83       	std	Z+1, r25	; 0x01
    17ec:	80 83       	st	Z, r24

	   _delay_ms(2000);
		LCD_clearScreen(); /* clear the LCD display */
    17ee:	0e 94 c9 20 	call	0x4192	; 0x4192 <LCD_clearScreen>
    17f2:	fe 01       	movw	r30, r28
    17f4:	e5 58       	subi	r30, 0x85	; 133
    17f6:	ff 4f       	sbci	r31, 0xFF	; 255
    17f8:	80 e0       	ldi	r24, 0x00	; 0
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	a8 e4       	ldi	r26, 0x48	; 72
    17fe:	b3 e4       	ldi	r27, 0x43	; 67
    1800:	80 83       	st	Z, r24
    1802:	91 83       	std	Z+1, r25	; 0x01
    1804:	a2 83       	std	Z+2, r26	; 0x02
    1806:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1808:	8e 01       	movw	r16, r28
    180a:	09 58       	subi	r16, 0x89	; 137
    180c:	1f 4f       	sbci	r17, 0xFF	; 255
    180e:	fe 01       	movw	r30, r28
    1810:	e5 58       	subi	r30, 0x85	; 133
    1812:	ff 4f       	sbci	r31, 0xFF	; 255
    1814:	60 81       	ld	r22, Z
    1816:	71 81       	ldd	r23, Z+1	; 0x01
    1818:	82 81       	ldd	r24, Z+2	; 0x02
    181a:	93 81       	ldd	r25, Z+3	; 0x03
    181c:	20 e0       	ldi	r18, 0x00	; 0
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	4a ef       	ldi	r20, 0xFA	; 250
    1822:	54 e4       	ldi	r21, 0x44	; 68
    1824:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1828:	dc 01       	movw	r26, r24
    182a:	cb 01       	movw	r24, r22
    182c:	f8 01       	movw	r30, r16
    182e:	80 83       	st	Z, r24
    1830:	91 83       	std	Z+1, r25	; 0x01
    1832:	a2 83       	std	Z+2, r26	; 0x02
    1834:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1836:	fe 01       	movw	r30, r28
    1838:	e9 58       	subi	r30, 0x89	; 137
    183a:	ff 4f       	sbci	r31, 0xFF	; 255
    183c:	60 81       	ld	r22, Z
    183e:	71 81       	ldd	r23, Z+1	; 0x01
    1840:	82 81       	ldd	r24, Z+2	; 0x02
    1842:	93 81       	ldd	r25, Z+3	; 0x03
    1844:	20 e0       	ldi	r18, 0x00	; 0
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	40 e8       	ldi	r20, 0x80	; 128
    184a:	5f e3       	ldi	r21, 0x3F	; 63
    184c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1850:	88 23       	and	r24, r24
    1852:	44 f4       	brge	.+16     	; 0x1864 <Open_Door+0x39a>
		__ticks = 1;
    1854:	fe 01       	movw	r30, r28
    1856:	eb 58       	subi	r30, 0x8B	; 139
    1858:	ff 4f       	sbci	r31, 0xFF	; 255
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	91 83       	std	Z+1, r25	; 0x01
    1860:	80 83       	st	Z, r24
    1862:	64 c0       	rjmp	.+200    	; 0x192c <Open_Door+0x462>
	else if (__tmp > 65535)
    1864:	fe 01       	movw	r30, r28
    1866:	e9 58       	subi	r30, 0x89	; 137
    1868:	ff 4f       	sbci	r31, 0xFF	; 255
    186a:	60 81       	ld	r22, Z
    186c:	71 81       	ldd	r23, Z+1	; 0x01
    186e:	82 81       	ldd	r24, Z+2	; 0x02
    1870:	93 81       	ldd	r25, Z+3	; 0x03
    1872:	20 e0       	ldi	r18, 0x00	; 0
    1874:	3f ef       	ldi	r19, 0xFF	; 255
    1876:	4f e7       	ldi	r20, 0x7F	; 127
    1878:	57 e4       	ldi	r21, 0x47	; 71
    187a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    187e:	18 16       	cp	r1, r24
    1880:	0c f0       	brlt	.+2      	; 0x1884 <Open_Door+0x3ba>
    1882:	43 c0       	rjmp	.+134    	; 0x190a <Open_Door+0x440>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1884:	fe 01       	movw	r30, r28
    1886:	e5 58       	subi	r30, 0x85	; 133
    1888:	ff 4f       	sbci	r31, 0xFF	; 255
    188a:	60 81       	ld	r22, Z
    188c:	71 81       	ldd	r23, Z+1	; 0x01
    188e:	82 81       	ldd	r24, Z+2	; 0x02
    1890:	93 81       	ldd	r25, Z+3	; 0x03
    1892:	20 e0       	ldi	r18, 0x00	; 0
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	40 e2       	ldi	r20, 0x20	; 32
    1898:	51 e4       	ldi	r21, 0x41	; 65
    189a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    189e:	dc 01       	movw	r26, r24
    18a0:	cb 01       	movw	r24, r22
    18a2:	8e 01       	movw	r16, r28
    18a4:	0b 58       	subi	r16, 0x8B	; 139
    18a6:	1f 4f       	sbci	r17, 0xFF	; 255
    18a8:	bc 01       	movw	r22, r24
    18aa:	cd 01       	movw	r24, r26
    18ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18b0:	dc 01       	movw	r26, r24
    18b2:	cb 01       	movw	r24, r22
    18b4:	f8 01       	movw	r30, r16
    18b6:	91 83       	std	Z+1, r25	; 0x01
    18b8:	80 83       	st	Z, r24
    18ba:	1f c0       	rjmp	.+62     	; 0x18fa <Open_Door+0x430>
    18bc:	fe 01       	movw	r30, r28
    18be:	ed 58       	subi	r30, 0x8D	; 141
    18c0:	ff 4f       	sbci	r31, 0xFF	; 255
    18c2:	88 ec       	ldi	r24, 0xC8	; 200
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	91 83       	std	Z+1, r25	; 0x01
    18c8:	80 83       	st	Z, r24
    18ca:	fe 01       	movw	r30, r28
    18cc:	ed 58       	subi	r30, 0x8D	; 141
    18ce:	ff 4f       	sbci	r31, 0xFF	; 255
    18d0:	80 81       	ld	r24, Z
    18d2:	91 81       	ldd	r25, Z+1	; 0x01
    18d4:	01 97       	sbiw	r24, 0x01	; 1
    18d6:	f1 f7       	brne	.-4      	; 0x18d4 <Open_Door+0x40a>
    18d8:	fe 01       	movw	r30, r28
    18da:	ed 58       	subi	r30, 0x8D	; 141
    18dc:	ff 4f       	sbci	r31, 0xFF	; 255
    18de:	91 83       	std	Z+1, r25	; 0x01
    18e0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18e2:	de 01       	movw	r26, r28
    18e4:	ab 58       	subi	r26, 0x8B	; 139
    18e6:	bf 4f       	sbci	r27, 0xFF	; 255
    18e8:	fe 01       	movw	r30, r28
    18ea:	eb 58       	subi	r30, 0x8B	; 139
    18ec:	ff 4f       	sbci	r31, 0xFF	; 255
    18ee:	80 81       	ld	r24, Z
    18f0:	91 81       	ldd	r25, Z+1	; 0x01
    18f2:	01 97       	sbiw	r24, 0x01	; 1
    18f4:	11 96       	adiw	r26, 0x01	; 1
    18f6:	9c 93       	st	X, r25
    18f8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18fa:	fe 01       	movw	r30, r28
    18fc:	eb 58       	subi	r30, 0x8B	; 139
    18fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1900:	80 81       	ld	r24, Z
    1902:	91 81       	ldd	r25, Z+1	; 0x01
    1904:	00 97       	sbiw	r24, 0x00	; 0
    1906:	d1 f6       	brne	.-76     	; 0x18bc <Open_Door+0x3f2>
    1908:	27 c0       	rjmp	.+78     	; 0x1958 <Open_Door+0x48e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    190a:	8e 01       	movw	r16, r28
    190c:	0b 58       	subi	r16, 0x8B	; 139
    190e:	1f 4f       	sbci	r17, 0xFF	; 255
    1910:	fe 01       	movw	r30, r28
    1912:	e9 58       	subi	r30, 0x89	; 137
    1914:	ff 4f       	sbci	r31, 0xFF	; 255
    1916:	60 81       	ld	r22, Z
    1918:	71 81       	ldd	r23, Z+1	; 0x01
    191a:	82 81       	ldd	r24, Z+2	; 0x02
    191c:	93 81       	ldd	r25, Z+3	; 0x03
    191e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1922:	dc 01       	movw	r26, r24
    1924:	cb 01       	movw	r24, r22
    1926:	f8 01       	movw	r30, r16
    1928:	91 83       	std	Z+1, r25	; 0x01
    192a:	80 83       	st	Z, r24
    192c:	de 01       	movw	r26, r28
    192e:	af 58       	subi	r26, 0x8F	; 143
    1930:	bf 4f       	sbci	r27, 0xFF	; 255
    1932:	fe 01       	movw	r30, r28
    1934:	eb 58       	subi	r30, 0x8B	; 139
    1936:	ff 4f       	sbci	r31, 0xFF	; 255
    1938:	80 81       	ld	r24, Z
    193a:	91 81       	ldd	r25, Z+1	; 0x01
    193c:	8d 93       	st	X+, r24
    193e:	9c 93       	st	X, r25
    1940:	fe 01       	movw	r30, r28
    1942:	ef 58       	subi	r30, 0x8F	; 143
    1944:	ff 4f       	sbci	r31, 0xFF	; 255
    1946:	80 81       	ld	r24, Z
    1948:	91 81       	ldd	r25, Z+1	; 0x01
    194a:	01 97       	sbiw	r24, 0x01	; 1
    194c:	f1 f7       	brne	.-4      	; 0x194a <Open_Door+0x480>
    194e:	fe 01       	movw	r30, r28
    1950:	ef 58       	subi	r30, 0x8F	; 143
    1952:	ff 4f       	sbci	r31, 0xFF	; 255
    1954:	91 83       	std	Z+1, r25	; 0x01
    1956:	80 83       	st	Z, r24
		_delay_ms(200);

	   LCD_displayStringRowColumn(0,0,"Your password:");
    1958:	2f e9       	ldi	r18, 0x9F	; 159
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	80 e0       	ldi	r24, 0x00	; 0
    195e:	60 e0       	ldi	r22, 0x00	; 0
    1960:	a9 01       	movw	r20, r18
    1962:	0e 94 8d 20 	call	0x411a	; 0x411a <LCD_displayStringRowColumn>


	   Enter_Send_Password();/* Enter your password */
    1966:	0e 94 a3 05 	call	0xb46	; 0xb46 <Enter_Send_Password>
	   saved_password_value_2nd=  Check_Value_Func();
    196a:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <Check_Value_Func>
    196e:	fe 01       	movw	r30, r28
    1970:	e5 56       	subi	r30, 0x65	; 101
    1972:	ff 4f       	sbci	r31, 0xFF	; 255
    1974:	80 83       	st	Z, r24
	   LCD_intgerToString( saved_password_value_2nd);
    1976:	fe 01       	movw	r30, r28
    1978:	e5 56       	subi	r30, 0x65	; 101
    197a:	ff 4f       	sbci	r31, 0xFF	; 255
    197c:	80 81       	ld	r24, Z
    197e:	88 2f       	mov	r24, r24
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	0e 94 a6 20 	call	0x414c	; 0x414c <LCD_intgerToString>
    1986:	fe 01       	movw	r30, r28
    1988:	e3 59       	subi	r30, 0x93	; 147
    198a:	ff 4f       	sbci	r31, 0xFF	; 255
    198c:	80 e0       	ldi	r24, 0x00	; 0
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	a8 e4       	ldi	r26, 0x48	; 72
    1992:	b3 e4       	ldi	r27, 0x43	; 67
    1994:	80 83       	st	Z, r24
    1996:	91 83       	std	Z+1, r25	; 0x01
    1998:	a2 83       	std	Z+2, r26	; 0x02
    199a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    199c:	8e 01       	movw	r16, r28
    199e:	07 59       	subi	r16, 0x97	; 151
    19a0:	1f 4f       	sbci	r17, 0xFF	; 255
    19a2:	fe 01       	movw	r30, r28
    19a4:	e3 59       	subi	r30, 0x93	; 147
    19a6:	ff 4f       	sbci	r31, 0xFF	; 255
    19a8:	60 81       	ld	r22, Z
    19aa:	71 81       	ldd	r23, Z+1	; 0x01
    19ac:	82 81       	ldd	r24, Z+2	; 0x02
    19ae:	93 81       	ldd	r25, Z+3	; 0x03
    19b0:	20 e0       	ldi	r18, 0x00	; 0
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	4a ef       	ldi	r20, 0xFA	; 250
    19b6:	54 e4       	ldi	r21, 0x44	; 68
    19b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19bc:	dc 01       	movw	r26, r24
    19be:	cb 01       	movw	r24, r22
    19c0:	f8 01       	movw	r30, r16
    19c2:	80 83       	st	Z, r24
    19c4:	91 83       	std	Z+1, r25	; 0x01
    19c6:	a2 83       	std	Z+2, r26	; 0x02
    19c8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19ca:	fe 01       	movw	r30, r28
    19cc:	e7 59       	subi	r30, 0x97	; 151
    19ce:	ff 4f       	sbci	r31, 0xFF	; 255
    19d0:	60 81       	ld	r22, Z
    19d2:	71 81       	ldd	r23, Z+1	; 0x01
    19d4:	82 81       	ldd	r24, Z+2	; 0x02
    19d6:	93 81       	ldd	r25, Z+3	; 0x03
    19d8:	20 e0       	ldi	r18, 0x00	; 0
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	40 e8       	ldi	r20, 0x80	; 128
    19de:	5f e3       	ldi	r21, 0x3F	; 63
    19e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19e4:	88 23       	and	r24, r24
    19e6:	44 f4       	brge	.+16     	; 0x19f8 <Open_Door+0x52e>
		__ticks = 1;
    19e8:	fe 01       	movw	r30, r28
    19ea:	e9 59       	subi	r30, 0x99	; 153
    19ec:	ff 4f       	sbci	r31, 0xFF	; 255
    19ee:	81 e0       	ldi	r24, 0x01	; 1
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	91 83       	std	Z+1, r25	; 0x01
    19f4:	80 83       	st	Z, r24
    19f6:	64 c0       	rjmp	.+200    	; 0x1ac0 <Open_Door+0x5f6>
	else if (__tmp > 65535)
    19f8:	fe 01       	movw	r30, r28
    19fa:	e7 59       	subi	r30, 0x97	; 151
    19fc:	ff 4f       	sbci	r31, 0xFF	; 255
    19fe:	60 81       	ld	r22, Z
    1a00:	71 81       	ldd	r23, Z+1	; 0x01
    1a02:	82 81       	ldd	r24, Z+2	; 0x02
    1a04:	93 81       	ldd	r25, Z+3	; 0x03
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	3f ef       	ldi	r19, 0xFF	; 255
    1a0a:	4f e7       	ldi	r20, 0x7F	; 127
    1a0c:	57 e4       	ldi	r21, 0x47	; 71
    1a0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a12:	18 16       	cp	r1, r24
    1a14:	0c f0       	brlt	.+2      	; 0x1a18 <Open_Door+0x54e>
    1a16:	43 c0       	rjmp	.+134    	; 0x1a9e <Open_Door+0x5d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a18:	fe 01       	movw	r30, r28
    1a1a:	e3 59       	subi	r30, 0x93	; 147
    1a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1e:	60 81       	ld	r22, Z
    1a20:	71 81       	ldd	r23, Z+1	; 0x01
    1a22:	82 81       	ldd	r24, Z+2	; 0x02
    1a24:	93 81       	ldd	r25, Z+3	; 0x03
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	40 e2       	ldi	r20, 0x20	; 32
    1a2c:	51 e4       	ldi	r21, 0x41	; 65
    1a2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a32:	dc 01       	movw	r26, r24
    1a34:	cb 01       	movw	r24, r22
    1a36:	8e 01       	movw	r16, r28
    1a38:	09 59       	subi	r16, 0x99	; 153
    1a3a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a3c:	bc 01       	movw	r22, r24
    1a3e:	cd 01       	movw	r24, r26
    1a40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a44:	dc 01       	movw	r26, r24
    1a46:	cb 01       	movw	r24, r22
    1a48:	f8 01       	movw	r30, r16
    1a4a:	91 83       	std	Z+1, r25	; 0x01
    1a4c:	80 83       	st	Z, r24
    1a4e:	1f c0       	rjmp	.+62     	; 0x1a8e <Open_Door+0x5c4>
    1a50:	fe 01       	movw	r30, r28
    1a52:	eb 59       	subi	r30, 0x9B	; 155
    1a54:	ff 4f       	sbci	r31, 0xFF	; 255
    1a56:	88 ec       	ldi	r24, 0xC8	; 200
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	91 83       	std	Z+1, r25	; 0x01
    1a5c:	80 83       	st	Z, r24
    1a5e:	fe 01       	movw	r30, r28
    1a60:	eb 59       	subi	r30, 0x9B	; 155
    1a62:	ff 4f       	sbci	r31, 0xFF	; 255
    1a64:	80 81       	ld	r24, Z
    1a66:	91 81       	ldd	r25, Z+1	; 0x01
    1a68:	01 97       	sbiw	r24, 0x01	; 1
    1a6a:	f1 f7       	brne	.-4      	; 0x1a68 <Open_Door+0x59e>
    1a6c:	fe 01       	movw	r30, r28
    1a6e:	eb 59       	subi	r30, 0x9B	; 155
    1a70:	ff 4f       	sbci	r31, 0xFF	; 255
    1a72:	91 83       	std	Z+1, r25	; 0x01
    1a74:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a76:	de 01       	movw	r26, r28
    1a78:	a9 59       	subi	r26, 0x99	; 153
    1a7a:	bf 4f       	sbci	r27, 0xFF	; 255
    1a7c:	fe 01       	movw	r30, r28
    1a7e:	e9 59       	subi	r30, 0x99	; 153
    1a80:	ff 4f       	sbci	r31, 0xFF	; 255
    1a82:	80 81       	ld	r24, Z
    1a84:	91 81       	ldd	r25, Z+1	; 0x01
    1a86:	01 97       	sbiw	r24, 0x01	; 1
    1a88:	11 96       	adiw	r26, 0x01	; 1
    1a8a:	9c 93       	st	X, r25
    1a8c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a8e:	fe 01       	movw	r30, r28
    1a90:	e9 59       	subi	r30, 0x99	; 153
    1a92:	ff 4f       	sbci	r31, 0xFF	; 255
    1a94:	80 81       	ld	r24, Z
    1a96:	91 81       	ldd	r25, Z+1	; 0x01
    1a98:	00 97       	sbiw	r24, 0x00	; 0
    1a9a:	d1 f6       	brne	.-76     	; 0x1a50 <Open_Door+0x586>
    1a9c:	35 c2       	rjmp	.+1130   	; 0x1f08 <Open_Door+0xa3e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a9e:	8e 01       	movw	r16, r28
    1aa0:	09 59       	subi	r16, 0x99	; 153
    1aa2:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa4:	fe 01       	movw	r30, r28
    1aa6:	e7 59       	subi	r30, 0x97	; 151
    1aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aaa:	60 81       	ld	r22, Z
    1aac:	71 81       	ldd	r23, Z+1	; 0x01
    1aae:	82 81       	ldd	r24, Z+2	; 0x02
    1ab0:	93 81       	ldd	r25, Z+3	; 0x03
    1ab2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab6:	dc 01       	movw	r26, r24
    1ab8:	cb 01       	movw	r24, r22
    1aba:	f8 01       	movw	r30, r16
    1abc:	91 83       	std	Z+1, r25	; 0x01
    1abe:	80 83       	st	Z, r24
    1ac0:	de 01       	movw	r26, r28
    1ac2:	ad 59       	subi	r26, 0x9D	; 157
    1ac4:	bf 4f       	sbci	r27, 0xFF	; 255
    1ac6:	fe 01       	movw	r30, r28
    1ac8:	e9 59       	subi	r30, 0x99	; 153
    1aca:	ff 4f       	sbci	r31, 0xFF	; 255
    1acc:	80 81       	ld	r24, Z
    1ace:	91 81       	ldd	r25, Z+1	; 0x01
    1ad0:	11 96       	adiw	r26, 0x01	; 1
    1ad2:	9c 93       	st	X, r25
    1ad4:	8e 93       	st	-X, r24
    1ad6:	fe 01       	movw	r30, r28
    1ad8:	ed 59       	subi	r30, 0x9D	; 157
    1ada:	ff 4f       	sbci	r31, 0xFF	; 255
    1adc:	80 81       	ld	r24, Z
    1ade:	91 81       	ldd	r25, Z+1	; 0x01
    1ae0:	01 97       	sbiw	r24, 0x01	; 1
    1ae2:	f1 f7       	brne	.-4      	; 0x1ae0 <Open_Door+0x616>
    1ae4:	fe 01       	movw	r30, r28
    1ae6:	ed 59       	subi	r30, 0x9D	; 157
    1ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aea:	91 83       	std	Z+1, r25	; 0x01
    1aec:	80 83       	st	Z, r24
    1aee:	0c c2       	rjmp	.+1048   	; 0x1f08 <Open_Door+0xa3e>
	   _delay_ms(200);

		while(saved_password_value_2nd==0)
		{
			LCD_clearScreen(); /* clear the LCD display */
    1af0:	0e 94 c9 20 	call	0x4192	; 0x4192 <LCD_clearScreen>
    1af4:	fe 01       	movw	r30, r28
    1af6:	e1 5a       	subi	r30, 0xA1	; 161
    1af8:	ff 4f       	sbci	r31, 0xFF	; 255
    1afa:	80 e0       	ldi	r24, 0x00	; 0
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	a8 e4       	ldi	r26, 0x48	; 72
    1b00:	b3 e4       	ldi	r27, 0x43	; 67
    1b02:	80 83       	st	Z, r24
    1b04:	91 83       	std	Z+1, r25	; 0x01
    1b06:	a2 83       	std	Z+2, r26	; 0x02
    1b08:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b0a:	8e 01       	movw	r16, r28
    1b0c:	05 5a       	subi	r16, 0xA5	; 165
    1b0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b10:	fe 01       	movw	r30, r28
    1b12:	e1 5a       	subi	r30, 0xA1	; 161
    1b14:	ff 4f       	sbci	r31, 0xFF	; 255
    1b16:	60 81       	ld	r22, Z
    1b18:	71 81       	ldd	r23, Z+1	; 0x01
    1b1a:	82 81       	ldd	r24, Z+2	; 0x02
    1b1c:	93 81       	ldd	r25, Z+3	; 0x03
    1b1e:	20 e0       	ldi	r18, 0x00	; 0
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	4a ef       	ldi	r20, 0xFA	; 250
    1b24:	54 e4       	ldi	r21, 0x44	; 68
    1b26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b2a:	dc 01       	movw	r26, r24
    1b2c:	cb 01       	movw	r24, r22
    1b2e:	f8 01       	movw	r30, r16
    1b30:	80 83       	st	Z, r24
    1b32:	91 83       	std	Z+1, r25	; 0x01
    1b34:	a2 83       	std	Z+2, r26	; 0x02
    1b36:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b38:	fe 01       	movw	r30, r28
    1b3a:	e5 5a       	subi	r30, 0xA5	; 165
    1b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3e:	60 81       	ld	r22, Z
    1b40:	71 81       	ldd	r23, Z+1	; 0x01
    1b42:	82 81       	ldd	r24, Z+2	; 0x02
    1b44:	93 81       	ldd	r25, Z+3	; 0x03
    1b46:	20 e0       	ldi	r18, 0x00	; 0
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	40 e8       	ldi	r20, 0x80	; 128
    1b4c:	5f e3       	ldi	r21, 0x3F	; 63
    1b4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b52:	88 23       	and	r24, r24
    1b54:	44 f4       	brge	.+16     	; 0x1b66 <Open_Door+0x69c>
		__ticks = 1;
    1b56:	fe 01       	movw	r30, r28
    1b58:	e7 5a       	subi	r30, 0xA7	; 167
    1b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	91 83       	std	Z+1, r25	; 0x01
    1b62:	80 83       	st	Z, r24
    1b64:	64 c0       	rjmp	.+200    	; 0x1c2e <Open_Door+0x764>
	else if (__tmp > 65535)
    1b66:	fe 01       	movw	r30, r28
    1b68:	e5 5a       	subi	r30, 0xA5	; 165
    1b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6c:	60 81       	ld	r22, Z
    1b6e:	71 81       	ldd	r23, Z+1	; 0x01
    1b70:	82 81       	ldd	r24, Z+2	; 0x02
    1b72:	93 81       	ldd	r25, Z+3	; 0x03
    1b74:	20 e0       	ldi	r18, 0x00	; 0
    1b76:	3f ef       	ldi	r19, 0xFF	; 255
    1b78:	4f e7       	ldi	r20, 0x7F	; 127
    1b7a:	57 e4       	ldi	r21, 0x47	; 71
    1b7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b80:	18 16       	cp	r1, r24
    1b82:	0c f0       	brlt	.+2      	; 0x1b86 <Open_Door+0x6bc>
    1b84:	43 c0       	rjmp	.+134    	; 0x1c0c <Open_Door+0x742>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b86:	fe 01       	movw	r30, r28
    1b88:	e1 5a       	subi	r30, 0xA1	; 161
    1b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8c:	60 81       	ld	r22, Z
    1b8e:	71 81       	ldd	r23, Z+1	; 0x01
    1b90:	82 81       	ldd	r24, Z+2	; 0x02
    1b92:	93 81       	ldd	r25, Z+3	; 0x03
    1b94:	20 e0       	ldi	r18, 0x00	; 0
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	40 e2       	ldi	r20, 0x20	; 32
    1b9a:	51 e4       	ldi	r21, 0x41	; 65
    1b9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba0:	dc 01       	movw	r26, r24
    1ba2:	cb 01       	movw	r24, r22
    1ba4:	8e 01       	movw	r16, r28
    1ba6:	07 5a       	subi	r16, 0xA7	; 167
    1ba8:	1f 4f       	sbci	r17, 0xFF	; 255
    1baa:	bc 01       	movw	r22, r24
    1bac:	cd 01       	movw	r24, r26
    1bae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb2:	dc 01       	movw	r26, r24
    1bb4:	cb 01       	movw	r24, r22
    1bb6:	f8 01       	movw	r30, r16
    1bb8:	91 83       	std	Z+1, r25	; 0x01
    1bba:	80 83       	st	Z, r24
    1bbc:	1f c0       	rjmp	.+62     	; 0x1bfc <Open_Door+0x732>
    1bbe:	fe 01       	movw	r30, r28
    1bc0:	e9 5a       	subi	r30, 0xA9	; 169
    1bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc4:	88 ec       	ldi	r24, 0xC8	; 200
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	91 83       	std	Z+1, r25	; 0x01
    1bca:	80 83       	st	Z, r24
    1bcc:	fe 01       	movw	r30, r28
    1bce:	e9 5a       	subi	r30, 0xA9	; 169
    1bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd2:	80 81       	ld	r24, Z
    1bd4:	91 81       	ldd	r25, Z+1	; 0x01
    1bd6:	01 97       	sbiw	r24, 0x01	; 1
    1bd8:	f1 f7       	brne	.-4      	; 0x1bd6 <Open_Door+0x70c>
    1bda:	fe 01       	movw	r30, r28
    1bdc:	e9 5a       	subi	r30, 0xA9	; 169
    1bde:	ff 4f       	sbci	r31, 0xFF	; 255
    1be0:	91 83       	std	Z+1, r25	; 0x01
    1be2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1be4:	de 01       	movw	r26, r28
    1be6:	a7 5a       	subi	r26, 0xA7	; 167
    1be8:	bf 4f       	sbci	r27, 0xFF	; 255
    1bea:	fe 01       	movw	r30, r28
    1bec:	e7 5a       	subi	r30, 0xA7	; 167
    1bee:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf0:	80 81       	ld	r24, Z
    1bf2:	91 81       	ldd	r25, Z+1	; 0x01
    1bf4:	01 97       	sbiw	r24, 0x01	; 1
    1bf6:	11 96       	adiw	r26, 0x01	; 1
    1bf8:	9c 93       	st	X, r25
    1bfa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bfc:	fe 01       	movw	r30, r28
    1bfe:	e7 5a       	subi	r30, 0xA7	; 167
    1c00:	ff 4f       	sbci	r31, 0xFF	; 255
    1c02:	80 81       	ld	r24, Z
    1c04:	91 81       	ldd	r25, Z+1	; 0x01
    1c06:	00 97       	sbiw	r24, 0x00	; 0
    1c08:	d1 f6       	brne	.-76     	; 0x1bbe <Open_Door+0x6f4>
    1c0a:	27 c0       	rjmp	.+78     	; 0x1c5a <Open_Door+0x790>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c0c:	8e 01       	movw	r16, r28
    1c0e:	07 5a       	subi	r16, 0xA7	; 167
    1c10:	1f 4f       	sbci	r17, 0xFF	; 255
    1c12:	fe 01       	movw	r30, r28
    1c14:	e5 5a       	subi	r30, 0xA5	; 165
    1c16:	ff 4f       	sbci	r31, 0xFF	; 255
    1c18:	60 81       	ld	r22, Z
    1c1a:	71 81       	ldd	r23, Z+1	; 0x01
    1c1c:	82 81       	ldd	r24, Z+2	; 0x02
    1c1e:	93 81       	ldd	r25, Z+3	; 0x03
    1c20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c24:	dc 01       	movw	r26, r24
    1c26:	cb 01       	movw	r24, r22
    1c28:	f8 01       	movw	r30, r16
    1c2a:	91 83       	std	Z+1, r25	; 0x01
    1c2c:	80 83       	st	Z, r24
    1c2e:	de 01       	movw	r26, r28
    1c30:	ab 5a       	subi	r26, 0xAB	; 171
    1c32:	bf 4f       	sbci	r27, 0xFF	; 255
    1c34:	fe 01       	movw	r30, r28
    1c36:	e7 5a       	subi	r30, 0xA7	; 167
    1c38:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3a:	80 81       	ld	r24, Z
    1c3c:	91 81       	ldd	r25, Z+1	; 0x01
    1c3e:	8d 93       	st	X+, r24
    1c40:	9c 93       	st	X, r25
    1c42:	fe 01       	movw	r30, r28
    1c44:	eb 5a       	subi	r30, 0xAB	; 171
    1c46:	ff 4f       	sbci	r31, 0xFF	; 255
    1c48:	80 81       	ld	r24, Z
    1c4a:	91 81       	ldd	r25, Z+1	; 0x01
    1c4c:	01 97       	sbiw	r24, 0x01	; 1
    1c4e:	f1 f7       	brne	.-4      	; 0x1c4c <Open_Door+0x782>
    1c50:	fe 01       	movw	r30, r28
    1c52:	eb 5a       	subi	r30, 0xAB	; 171
    1c54:	ff 4f       	sbci	r31, 0xFF	; 255
    1c56:	91 83       	std	Z+1, r25	; 0x01
    1c58:	80 83       	st	Z, r24
			_delay_ms(200);
			LCD_displayStringRowColumn(0,0,"The password is");
    1c5a:	2e ea       	ldi	r18, 0xAE	; 174
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	80 e0       	ldi	r24, 0x00	; 0
    1c60:	60 e0       	ldi	r22, 0x00	; 0
    1c62:	a9 01       	movw	r20, r18
    1c64:	0e 94 8d 20 	call	0x411a	; 0x411a <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1,0,"not matching :( ");
    1c68:	2e eb       	ldi	r18, 0xBE	; 190
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	60 e0       	ldi	r22, 0x00	; 0
    1c70:	a9 01       	movw	r20, r18
    1c72:	0e 94 8d 20 	call	0x411a	; 0x411a <LCD_displayStringRowColumn>
    1c76:	fe 01       	movw	r30, r28
    1c78:	ef 5a       	subi	r30, 0xAF	; 175
    1c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7c:	80 e0       	ldi	r24, 0x00	; 0
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	aa ef       	ldi	r26, 0xFA	; 250
    1c82:	b4 e4       	ldi	r27, 0x44	; 68
    1c84:	80 83       	st	Z, r24
    1c86:	91 83       	std	Z+1, r25	; 0x01
    1c88:	a2 83       	std	Z+2, r26	; 0x02
    1c8a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c8c:	8e 01       	movw	r16, r28
    1c8e:	03 5b       	subi	r16, 0xB3	; 179
    1c90:	1f 4f       	sbci	r17, 0xFF	; 255
    1c92:	fe 01       	movw	r30, r28
    1c94:	ef 5a       	subi	r30, 0xAF	; 175
    1c96:	ff 4f       	sbci	r31, 0xFF	; 255
    1c98:	60 81       	ld	r22, Z
    1c9a:	71 81       	ldd	r23, Z+1	; 0x01
    1c9c:	82 81       	ldd	r24, Z+2	; 0x02
    1c9e:	93 81       	ldd	r25, Z+3	; 0x03
    1ca0:	20 e0       	ldi	r18, 0x00	; 0
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	4a ef       	ldi	r20, 0xFA	; 250
    1ca6:	54 e4       	ldi	r21, 0x44	; 68
    1ca8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cac:	dc 01       	movw	r26, r24
    1cae:	cb 01       	movw	r24, r22
    1cb0:	f8 01       	movw	r30, r16
    1cb2:	80 83       	st	Z, r24
    1cb4:	91 83       	std	Z+1, r25	; 0x01
    1cb6:	a2 83       	std	Z+2, r26	; 0x02
    1cb8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cba:	fe 01       	movw	r30, r28
    1cbc:	e3 5b       	subi	r30, 0xB3	; 179
    1cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc0:	60 81       	ld	r22, Z
    1cc2:	71 81       	ldd	r23, Z+1	; 0x01
    1cc4:	82 81       	ldd	r24, Z+2	; 0x02
    1cc6:	93 81       	ldd	r25, Z+3	; 0x03
    1cc8:	20 e0       	ldi	r18, 0x00	; 0
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	40 e8       	ldi	r20, 0x80	; 128
    1cce:	5f e3       	ldi	r21, 0x3F	; 63
    1cd0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cd4:	88 23       	and	r24, r24
    1cd6:	44 f4       	brge	.+16     	; 0x1ce8 <Open_Door+0x81e>
		__ticks = 1;
    1cd8:	fe 01       	movw	r30, r28
    1cda:	e5 5b       	subi	r30, 0xB5	; 181
    1cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cde:	81 e0       	ldi	r24, 0x01	; 1
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	91 83       	std	Z+1, r25	; 0x01
    1ce4:	80 83       	st	Z, r24
    1ce6:	64 c0       	rjmp	.+200    	; 0x1db0 <Open_Door+0x8e6>
	else if (__tmp > 65535)
    1ce8:	fe 01       	movw	r30, r28
    1cea:	e3 5b       	subi	r30, 0xB3	; 179
    1cec:	ff 4f       	sbci	r31, 0xFF	; 255
    1cee:	60 81       	ld	r22, Z
    1cf0:	71 81       	ldd	r23, Z+1	; 0x01
    1cf2:	82 81       	ldd	r24, Z+2	; 0x02
    1cf4:	93 81       	ldd	r25, Z+3	; 0x03
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	3f ef       	ldi	r19, 0xFF	; 255
    1cfa:	4f e7       	ldi	r20, 0x7F	; 127
    1cfc:	57 e4       	ldi	r21, 0x47	; 71
    1cfe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d02:	18 16       	cp	r1, r24
    1d04:	0c f0       	brlt	.+2      	; 0x1d08 <Open_Door+0x83e>
    1d06:	43 c0       	rjmp	.+134    	; 0x1d8e <Open_Door+0x8c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d08:	fe 01       	movw	r30, r28
    1d0a:	ef 5a       	subi	r30, 0xAF	; 175
    1d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0e:	60 81       	ld	r22, Z
    1d10:	71 81       	ldd	r23, Z+1	; 0x01
    1d12:	82 81       	ldd	r24, Z+2	; 0x02
    1d14:	93 81       	ldd	r25, Z+3	; 0x03
    1d16:	20 e0       	ldi	r18, 0x00	; 0
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	40 e2       	ldi	r20, 0x20	; 32
    1d1c:	51 e4       	ldi	r21, 0x41	; 65
    1d1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d22:	dc 01       	movw	r26, r24
    1d24:	cb 01       	movw	r24, r22
    1d26:	8e 01       	movw	r16, r28
    1d28:	05 5b       	subi	r16, 0xB5	; 181
    1d2a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d2c:	bc 01       	movw	r22, r24
    1d2e:	cd 01       	movw	r24, r26
    1d30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d34:	dc 01       	movw	r26, r24
    1d36:	cb 01       	movw	r24, r22
    1d38:	f8 01       	movw	r30, r16
    1d3a:	91 83       	std	Z+1, r25	; 0x01
    1d3c:	80 83       	st	Z, r24
    1d3e:	1f c0       	rjmp	.+62     	; 0x1d7e <Open_Door+0x8b4>
    1d40:	fe 01       	movw	r30, r28
    1d42:	e7 5b       	subi	r30, 0xB7	; 183
    1d44:	ff 4f       	sbci	r31, 0xFF	; 255
    1d46:	88 ec       	ldi	r24, 0xC8	; 200
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	91 83       	std	Z+1, r25	; 0x01
    1d4c:	80 83       	st	Z, r24
    1d4e:	fe 01       	movw	r30, r28
    1d50:	e7 5b       	subi	r30, 0xB7	; 183
    1d52:	ff 4f       	sbci	r31, 0xFF	; 255
    1d54:	80 81       	ld	r24, Z
    1d56:	91 81       	ldd	r25, Z+1	; 0x01
    1d58:	01 97       	sbiw	r24, 0x01	; 1
    1d5a:	f1 f7       	brne	.-4      	; 0x1d58 <Open_Door+0x88e>
    1d5c:	fe 01       	movw	r30, r28
    1d5e:	e7 5b       	subi	r30, 0xB7	; 183
    1d60:	ff 4f       	sbci	r31, 0xFF	; 255
    1d62:	91 83       	std	Z+1, r25	; 0x01
    1d64:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d66:	de 01       	movw	r26, r28
    1d68:	a5 5b       	subi	r26, 0xB5	; 181
    1d6a:	bf 4f       	sbci	r27, 0xFF	; 255
    1d6c:	fe 01       	movw	r30, r28
    1d6e:	e5 5b       	subi	r30, 0xB5	; 181
    1d70:	ff 4f       	sbci	r31, 0xFF	; 255
    1d72:	80 81       	ld	r24, Z
    1d74:	91 81       	ldd	r25, Z+1	; 0x01
    1d76:	01 97       	sbiw	r24, 0x01	; 1
    1d78:	11 96       	adiw	r26, 0x01	; 1
    1d7a:	9c 93       	st	X, r25
    1d7c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d7e:	fe 01       	movw	r30, r28
    1d80:	e5 5b       	subi	r30, 0xB5	; 181
    1d82:	ff 4f       	sbci	r31, 0xFF	; 255
    1d84:	80 81       	ld	r24, Z
    1d86:	91 81       	ldd	r25, Z+1	; 0x01
    1d88:	00 97       	sbiw	r24, 0x00	; 0
    1d8a:	d1 f6       	brne	.-76     	; 0x1d40 <Open_Door+0x876>
    1d8c:	27 c0       	rjmp	.+78     	; 0x1ddc <Open_Door+0x912>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d8e:	8e 01       	movw	r16, r28
    1d90:	05 5b       	subi	r16, 0xB5	; 181
    1d92:	1f 4f       	sbci	r17, 0xFF	; 255
    1d94:	fe 01       	movw	r30, r28
    1d96:	e3 5b       	subi	r30, 0xB3	; 179
    1d98:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9a:	60 81       	ld	r22, Z
    1d9c:	71 81       	ldd	r23, Z+1	; 0x01
    1d9e:	82 81       	ldd	r24, Z+2	; 0x02
    1da0:	93 81       	ldd	r25, Z+3	; 0x03
    1da2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da6:	dc 01       	movw	r26, r24
    1da8:	cb 01       	movw	r24, r22
    1daa:	f8 01       	movw	r30, r16
    1dac:	91 83       	std	Z+1, r25	; 0x01
    1dae:	80 83       	st	Z, r24
    1db0:	de 01       	movw	r26, r28
    1db2:	a9 5b       	subi	r26, 0xB9	; 185
    1db4:	bf 4f       	sbci	r27, 0xFF	; 255
    1db6:	fe 01       	movw	r30, r28
    1db8:	e5 5b       	subi	r30, 0xB5	; 181
    1dba:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbc:	80 81       	ld	r24, Z
    1dbe:	91 81       	ldd	r25, Z+1	; 0x01
    1dc0:	8d 93       	st	X+, r24
    1dc2:	9c 93       	st	X, r25
    1dc4:	fe 01       	movw	r30, r28
    1dc6:	e9 5b       	subi	r30, 0xB9	; 185
    1dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dca:	80 81       	ld	r24, Z
    1dcc:	91 81       	ldd	r25, Z+1	; 0x01
    1dce:	01 97       	sbiw	r24, 0x01	; 1
    1dd0:	f1 f7       	brne	.-4      	; 0x1dce <Open_Door+0x904>
    1dd2:	fe 01       	movw	r30, r28
    1dd4:	e9 5b       	subi	r30, 0xB9	; 185
    1dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd8:	91 83       	std	Z+1, r25	; 0x01
    1dda:	80 83       	st	Z, r24
			_delay_ms(2000);

			LCD_clearScreen(); /* clear the LCD display */
    1ddc:	0e 94 c9 20 	call	0x4192	; 0x4192 <LCD_clearScreen>
    1de0:	fe 01       	movw	r30, r28
    1de2:	ed 5b       	subi	r30, 0xBD	; 189
    1de4:	ff 4f       	sbci	r31, 0xFF	; 255
    1de6:	80 e0       	ldi	r24, 0x00	; 0
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	a8 e4       	ldi	r26, 0x48	; 72
    1dec:	b3 e4       	ldi	r27, 0x43	; 67
    1dee:	80 83       	st	Z, r24
    1df0:	91 83       	std	Z+1, r25	; 0x01
    1df2:	a2 83       	std	Z+2, r26	; 0x02
    1df4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1df6:	8e 01       	movw	r16, r28
    1df8:	01 5c       	subi	r16, 0xC1	; 193
    1dfa:	1f 4f       	sbci	r17, 0xFF	; 255
    1dfc:	fe 01       	movw	r30, r28
    1dfe:	ed 5b       	subi	r30, 0xBD	; 189
    1e00:	ff 4f       	sbci	r31, 0xFF	; 255
    1e02:	60 81       	ld	r22, Z
    1e04:	71 81       	ldd	r23, Z+1	; 0x01
    1e06:	82 81       	ldd	r24, Z+2	; 0x02
    1e08:	93 81       	ldd	r25, Z+3	; 0x03
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	4a ef       	ldi	r20, 0xFA	; 250
    1e10:	54 e4       	ldi	r21, 0x44	; 68
    1e12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e16:	dc 01       	movw	r26, r24
    1e18:	cb 01       	movw	r24, r22
    1e1a:	f8 01       	movw	r30, r16
    1e1c:	80 83       	st	Z, r24
    1e1e:	91 83       	std	Z+1, r25	; 0x01
    1e20:	a2 83       	std	Z+2, r26	; 0x02
    1e22:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e24:	fe 01       	movw	r30, r28
    1e26:	ff 96       	adiw	r30, 0x3f	; 63
    1e28:	60 81       	ld	r22, Z
    1e2a:	71 81       	ldd	r23, Z+1	; 0x01
    1e2c:	82 81       	ldd	r24, Z+2	; 0x02
    1e2e:	93 81       	ldd	r25, Z+3	; 0x03
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	40 e8       	ldi	r20, 0x80	; 128
    1e36:	5f e3       	ldi	r21, 0x3F	; 63
    1e38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e3c:	88 23       	and	r24, r24
    1e3e:	2c f4       	brge	.+10     	; 0x1e4a <Open_Door+0x980>
		__ticks = 1;
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	9e af       	std	Y+62, r25	; 0x3e
    1e46:	8d af       	std	Y+61, r24	; 0x3d
    1e48:	46 c0       	rjmp	.+140    	; 0x1ed6 <Open_Door+0xa0c>
	else if (__tmp > 65535)
    1e4a:	fe 01       	movw	r30, r28
    1e4c:	ff 96       	adiw	r30, 0x3f	; 63
    1e4e:	60 81       	ld	r22, Z
    1e50:	71 81       	ldd	r23, Z+1	; 0x01
    1e52:	82 81       	ldd	r24, Z+2	; 0x02
    1e54:	93 81       	ldd	r25, Z+3	; 0x03
    1e56:	20 e0       	ldi	r18, 0x00	; 0
    1e58:	3f ef       	ldi	r19, 0xFF	; 255
    1e5a:	4f e7       	ldi	r20, 0x7F	; 127
    1e5c:	57 e4       	ldi	r21, 0x47	; 71
    1e5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e62:	18 16       	cp	r1, r24
    1e64:	64 f5       	brge	.+88     	; 0x1ebe <Open_Door+0x9f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e66:	fe 01       	movw	r30, r28
    1e68:	ed 5b       	subi	r30, 0xBD	; 189
    1e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6c:	60 81       	ld	r22, Z
    1e6e:	71 81       	ldd	r23, Z+1	; 0x01
    1e70:	82 81       	ldd	r24, Z+2	; 0x02
    1e72:	93 81       	ldd	r25, Z+3	; 0x03
    1e74:	20 e0       	ldi	r18, 0x00	; 0
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	40 e2       	ldi	r20, 0x20	; 32
    1e7a:	51 e4       	ldi	r21, 0x41	; 65
    1e7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e80:	dc 01       	movw	r26, r24
    1e82:	cb 01       	movw	r24, r22
    1e84:	bc 01       	movw	r22, r24
    1e86:	cd 01       	movw	r24, r26
    1e88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	cb 01       	movw	r24, r22
    1e90:	9e af       	std	Y+62, r25	; 0x3e
    1e92:	8d af       	std	Y+61, r24	; 0x3d
    1e94:	0f c0       	rjmp	.+30     	; 0x1eb4 <Open_Door+0x9ea>
    1e96:	88 ec       	ldi	r24, 0xC8	; 200
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	9c af       	std	Y+60, r25	; 0x3c
    1e9c:	8b af       	std	Y+59, r24	; 0x3b
    1e9e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1ea0:	9c ad       	ldd	r25, Y+60	; 0x3c
    1ea2:	01 97       	sbiw	r24, 0x01	; 1
    1ea4:	f1 f7       	brne	.-4      	; 0x1ea2 <Open_Door+0x9d8>
    1ea6:	9c af       	std	Y+60, r25	; 0x3c
    1ea8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eaa:	8d ad       	ldd	r24, Y+61	; 0x3d
    1eac:	9e ad       	ldd	r25, Y+62	; 0x3e
    1eae:	01 97       	sbiw	r24, 0x01	; 1
    1eb0:	9e af       	std	Y+62, r25	; 0x3e
    1eb2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eb4:	8d ad       	ldd	r24, Y+61	; 0x3d
    1eb6:	9e ad       	ldd	r25, Y+62	; 0x3e
    1eb8:	00 97       	sbiw	r24, 0x00	; 0
    1eba:	69 f7       	brne	.-38     	; 0x1e96 <Open_Door+0x9cc>
    1ebc:	16 c0       	rjmp	.+44     	; 0x1eea <Open_Door+0xa20>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ebe:	fe 01       	movw	r30, r28
    1ec0:	ff 96       	adiw	r30, 0x3f	; 63
    1ec2:	60 81       	ld	r22, Z
    1ec4:	71 81       	ldd	r23, Z+1	; 0x01
    1ec6:	82 81       	ldd	r24, Z+2	; 0x02
    1ec8:	93 81       	ldd	r25, Z+3	; 0x03
    1eca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ece:	dc 01       	movw	r26, r24
    1ed0:	cb 01       	movw	r24, r22
    1ed2:	9e af       	std	Y+62, r25	; 0x3e
    1ed4:	8d af       	std	Y+61, r24	; 0x3d
    1ed6:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ed8:	9e ad       	ldd	r25, Y+62	; 0x3e
    1eda:	9a af       	std	Y+58, r25	; 0x3a
    1edc:	89 af       	std	Y+57, r24	; 0x39
    1ede:	89 ad       	ldd	r24, Y+57	; 0x39
    1ee0:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ee2:	01 97       	sbiw	r24, 0x01	; 1
    1ee4:	f1 f7       	brne	.-4      	; 0x1ee2 <Open_Door+0xa18>
    1ee6:	9a af       	std	Y+58, r25	; 0x3a
    1ee8:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(200);

		 LCD_displayStringRowColumn(0,0,"Your password:");
    1eea:	2f e9       	ldi	r18, 0x9F	; 159
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	80 e0       	ldi	r24, 0x00	; 0
    1ef0:	60 e0       	ldi	r22, 0x00	; 0
    1ef2:	a9 01       	movw	r20, r18
    1ef4:	0e 94 8d 20 	call	0x411a	; 0x411a <LCD_displayStringRowColumn>

			 Enter_Send_Password();
    1ef8:	0e 94 a3 05 	call	0xb46	; 0xb46 <Enter_Send_Password>
			saved_password_value_2nd=Check_Value_Func();
    1efc:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <Check_Value_Func>
    1f00:	fe 01       	movw	r30, r28
    1f02:	e5 56       	subi	r30, 0x65	; 101
    1f04:	ff 4f       	sbci	r31, 0xFF	; 255
    1f06:	80 83       	st	Z, r24
	   Enter_Send_Password();/* Enter your password */
	   saved_password_value_2nd=  Check_Value_Func();
	   LCD_intgerToString( saved_password_value_2nd);
	   _delay_ms(200);

		while(saved_password_value_2nd==0)
    1f08:	fe 01       	movw	r30, r28
    1f0a:	e5 56       	subi	r30, 0x65	; 101
    1f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0e:	80 81       	ld	r24, Z
    1f10:	88 23       	and	r24, r24
    1f12:	09 f4       	brne	.+2      	; 0x1f16 <Open_Door+0xa4c>
    1f14:	ed cd       	rjmp	.-1062   	; 0x1af0 <Open_Door+0x626>

			 Enter_Send_Password();
			saved_password_value_2nd=Check_Value_Func();

		}
	   if (saved_password_value_2nd==1){
    1f16:	fe 01       	movw	r30, r28
    1f18:	e5 56       	subi	r30, 0x65	; 101
    1f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1c:	80 81       	ld	r24, Z
    1f1e:	81 30       	cpi	r24, 0x01	; 1
    1f20:	09 f0       	breq	.+2      	; 0x1f24 <Open_Door+0xa5a>
    1f22:	e8 c1       	rjmp	.+976    	; 0x22f4 <Open_Door+0xe2a>

	  	         LCD_clearScreen(); /* clear the LCD display */
    1f24:	0e 94 c9 20 	call	0x4192	; 0x4192 <LCD_clearScreen>
    1f28:	80 e0       	ldi	r24, 0x00	; 0
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	a8 e4       	ldi	r26, 0x48	; 72
    1f2e:	b3 e4       	ldi	r27, 0x43	; 67
    1f30:	8d ab       	std	Y+53, r24	; 0x35
    1f32:	9e ab       	std	Y+54, r25	; 0x36
    1f34:	af ab       	std	Y+55, r26	; 0x37
    1f36:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f38:	6d a9       	ldd	r22, Y+53	; 0x35
    1f3a:	7e a9       	ldd	r23, Y+54	; 0x36
    1f3c:	8f a9       	ldd	r24, Y+55	; 0x37
    1f3e:	98 ad       	ldd	r25, Y+56	; 0x38
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	4a ef       	ldi	r20, 0xFA	; 250
    1f46:	54 e4       	ldi	r21, 0x44	; 68
    1f48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	89 ab       	std	Y+49, r24	; 0x31
    1f52:	9a ab       	std	Y+50, r25	; 0x32
    1f54:	ab ab       	std	Y+51, r26	; 0x33
    1f56:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f58:	69 a9       	ldd	r22, Y+49	; 0x31
    1f5a:	7a a9       	ldd	r23, Y+50	; 0x32
    1f5c:	8b a9       	ldd	r24, Y+51	; 0x33
    1f5e:	9c a9       	ldd	r25, Y+52	; 0x34
    1f60:	20 e0       	ldi	r18, 0x00	; 0
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	40 e8       	ldi	r20, 0x80	; 128
    1f66:	5f e3       	ldi	r21, 0x3F	; 63
    1f68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f6c:	88 23       	and	r24, r24
    1f6e:	2c f4       	brge	.+10     	; 0x1f7a <Open_Door+0xab0>
		__ticks = 1;
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	98 ab       	std	Y+48, r25	; 0x30
    1f76:	8f a7       	std	Y+47, r24	; 0x2f
    1f78:	3f c0       	rjmp	.+126    	; 0x1ff8 <Open_Door+0xb2e>
	else if (__tmp > 65535)
    1f7a:	69 a9       	ldd	r22, Y+49	; 0x31
    1f7c:	7a a9       	ldd	r23, Y+50	; 0x32
    1f7e:	8b a9       	ldd	r24, Y+51	; 0x33
    1f80:	9c a9       	ldd	r25, Y+52	; 0x34
    1f82:	20 e0       	ldi	r18, 0x00	; 0
    1f84:	3f ef       	ldi	r19, 0xFF	; 255
    1f86:	4f e7       	ldi	r20, 0x7F	; 127
    1f88:	57 e4       	ldi	r21, 0x47	; 71
    1f8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f8e:	18 16       	cp	r1, r24
    1f90:	4c f5       	brge	.+82     	; 0x1fe4 <Open_Door+0xb1a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f92:	6d a9       	ldd	r22, Y+53	; 0x35
    1f94:	7e a9       	ldd	r23, Y+54	; 0x36
    1f96:	8f a9       	ldd	r24, Y+55	; 0x37
    1f98:	98 ad       	ldd	r25, Y+56	; 0x38
    1f9a:	20 e0       	ldi	r18, 0x00	; 0
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	40 e2       	ldi	r20, 0x20	; 32
    1fa0:	51 e4       	ldi	r21, 0x41	; 65
    1fa2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	cb 01       	movw	r24, r22
    1faa:	bc 01       	movw	r22, r24
    1fac:	cd 01       	movw	r24, r26
    1fae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	98 ab       	std	Y+48, r25	; 0x30
    1fb8:	8f a7       	std	Y+47, r24	; 0x2f
    1fba:	0f c0       	rjmp	.+30     	; 0x1fda <Open_Door+0xb10>
    1fbc:	88 ec       	ldi	r24, 0xC8	; 200
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	9e a7       	std	Y+46, r25	; 0x2e
    1fc2:	8d a7       	std	Y+45, r24	; 0x2d
    1fc4:	8d a5       	ldd	r24, Y+45	; 0x2d
    1fc6:	9e a5       	ldd	r25, Y+46	; 0x2e
    1fc8:	01 97       	sbiw	r24, 0x01	; 1
    1fca:	f1 f7       	brne	.-4      	; 0x1fc8 <Open_Door+0xafe>
    1fcc:	9e a7       	std	Y+46, r25	; 0x2e
    1fce:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fd0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fd2:	98 a9       	ldd	r25, Y+48	; 0x30
    1fd4:	01 97       	sbiw	r24, 0x01	; 1
    1fd6:	98 ab       	std	Y+48, r25	; 0x30
    1fd8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fda:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fdc:	98 a9       	ldd	r25, Y+48	; 0x30
    1fde:	00 97       	sbiw	r24, 0x00	; 0
    1fe0:	69 f7       	brne	.-38     	; 0x1fbc <Open_Door+0xaf2>
    1fe2:	14 c0       	rjmp	.+40     	; 0x200c <Open_Door+0xb42>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fe4:	69 a9       	ldd	r22, Y+49	; 0x31
    1fe6:	7a a9       	ldd	r23, Y+50	; 0x32
    1fe8:	8b a9       	ldd	r24, Y+51	; 0x33
    1fea:	9c a9       	ldd	r25, Y+52	; 0x34
    1fec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff0:	dc 01       	movw	r26, r24
    1ff2:	cb 01       	movw	r24, r22
    1ff4:	98 ab       	std	Y+48, r25	; 0x30
    1ff6:	8f a7       	std	Y+47, r24	; 0x2f
    1ff8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ffa:	98 a9       	ldd	r25, Y+48	; 0x30
    1ffc:	9c a7       	std	Y+44, r25	; 0x2c
    1ffe:	8b a7       	std	Y+43, r24	; 0x2b
    2000:	8b a5       	ldd	r24, Y+43	; 0x2b
    2002:	9c a5       	ldd	r25, Y+44	; 0x2c
    2004:	01 97       	sbiw	r24, 0x01	; 1
    2006:	f1 f7       	brne	.-4      	; 0x2004 <Open_Door+0xb3a>
    2008:	9c a7       	std	Y+44, r25	; 0x2c
    200a:	8b a7       	std	Y+43, r24	; 0x2b
	  	         _delay_ms(200);

	  	         LCD_displayStringRowColumn(0,0,"The door is");
    200c:	2f ec       	ldi	r18, 0xCF	; 207
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	80 e0       	ldi	r24, 0x00	; 0
    2012:	60 e0       	ldi	r22, 0x00	; 0
    2014:	a9 01       	movw	r20, r18
    2016:	0e 94 8d 20 	call	0x411a	; 0x411a <LCD_displayStringRowColumn>
	  	         LCD_displayStringRowColumn(1,0,"opening now :D");
    201a:	2b ed       	ldi	r18, 0xDB	; 219
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	81 e0       	ldi	r24, 0x01	; 1
    2020:	60 e0       	ldi	r22, 0x00	; 0
    2022:	a9 01       	movw	r20, r18
    2024:	0e 94 8d 20 	call	0x411a	; 0x411a <LCD_displayStringRowColumn>
    2028:	80 e0       	ldi	r24, 0x00	; 0
    202a:	90 e6       	ldi	r25, 0x60	; 96
    202c:	aa e6       	ldi	r26, 0x6A	; 106
    202e:	b6 e4       	ldi	r27, 0x46	; 70
    2030:	8f a3       	std	Y+39, r24	; 0x27
    2032:	98 a7       	std	Y+40, r25	; 0x28
    2034:	a9 a7       	std	Y+41, r26	; 0x29
    2036:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2038:	6f a1       	ldd	r22, Y+39	; 0x27
    203a:	78 a5       	ldd	r23, Y+40	; 0x28
    203c:	89 a5       	ldd	r24, Y+41	; 0x29
    203e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2040:	20 e0       	ldi	r18, 0x00	; 0
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	4a ef       	ldi	r20, 0xFA	; 250
    2046:	54 e4       	ldi	r21, 0x44	; 68
    2048:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204c:	dc 01       	movw	r26, r24
    204e:	cb 01       	movw	r24, r22
    2050:	8b a3       	std	Y+35, r24	; 0x23
    2052:	9c a3       	std	Y+36, r25	; 0x24
    2054:	ad a3       	std	Y+37, r26	; 0x25
    2056:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2058:	6b a1       	ldd	r22, Y+35	; 0x23
    205a:	7c a1       	ldd	r23, Y+36	; 0x24
    205c:	8d a1       	ldd	r24, Y+37	; 0x25
    205e:	9e a1       	ldd	r25, Y+38	; 0x26
    2060:	20 e0       	ldi	r18, 0x00	; 0
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	40 e8       	ldi	r20, 0x80	; 128
    2066:	5f e3       	ldi	r21, 0x3F	; 63
    2068:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    206c:	88 23       	and	r24, r24
    206e:	2c f4       	brge	.+10     	; 0x207a <Open_Door+0xbb0>
		__ticks = 1;
    2070:	81 e0       	ldi	r24, 0x01	; 1
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	9a a3       	std	Y+34, r25	; 0x22
    2076:	89 a3       	std	Y+33, r24	; 0x21
    2078:	3f c0       	rjmp	.+126    	; 0x20f8 <Open_Door+0xc2e>
	else if (__tmp > 65535)
    207a:	6b a1       	ldd	r22, Y+35	; 0x23
    207c:	7c a1       	ldd	r23, Y+36	; 0x24
    207e:	8d a1       	ldd	r24, Y+37	; 0x25
    2080:	9e a1       	ldd	r25, Y+38	; 0x26
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	3f ef       	ldi	r19, 0xFF	; 255
    2086:	4f e7       	ldi	r20, 0x7F	; 127
    2088:	57 e4       	ldi	r21, 0x47	; 71
    208a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    208e:	18 16       	cp	r1, r24
    2090:	4c f5       	brge	.+82     	; 0x20e4 <Open_Door+0xc1a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2092:	6f a1       	ldd	r22, Y+39	; 0x27
    2094:	78 a5       	ldd	r23, Y+40	; 0x28
    2096:	89 a5       	ldd	r24, Y+41	; 0x29
    2098:	9a a5       	ldd	r25, Y+42	; 0x2a
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	40 e2       	ldi	r20, 0x20	; 32
    20a0:	51 e4       	ldi	r21, 0x41	; 65
    20a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a6:	dc 01       	movw	r26, r24
    20a8:	cb 01       	movw	r24, r22
    20aa:	bc 01       	movw	r22, r24
    20ac:	cd 01       	movw	r24, r26
    20ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b2:	dc 01       	movw	r26, r24
    20b4:	cb 01       	movw	r24, r22
    20b6:	9a a3       	std	Y+34, r25	; 0x22
    20b8:	89 a3       	std	Y+33, r24	; 0x21
    20ba:	0f c0       	rjmp	.+30     	; 0x20da <Open_Door+0xc10>
    20bc:	88 ec       	ldi	r24, 0xC8	; 200
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	98 a3       	std	Y+32, r25	; 0x20
    20c2:	8f 8f       	std	Y+31, r24	; 0x1f
    20c4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20c6:	98 a1       	ldd	r25, Y+32	; 0x20
    20c8:	01 97       	sbiw	r24, 0x01	; 1
    20ca:	f1 f7       	brne	.-4      	; 0x20c8 <Open_Door+0xbfe>
    20cc:	98 a3       	std	Y+32, r25	; 0x20
    20ce:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20d0:	89 a1       	ldd	r24, Y+33	; 0x21
    20d2:	9a a1       	ldd	r25, Y+34	; 0x22
    20d4:	01 97       	sbiw	r24, 0x01	; 1
    20d6:	9a a3       	std	Y+34, r25	; 0x22
    20d8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20da:	89 a1       	ldd	r24, Y+33	; 0x21
    20dc:	9a a1       	ldd	r25, Y+34	; 0x22
    20de:	00 97       	sbiw	r24, 0x00	; 0
    20e0:	69 f7       	brne	.-38     	; 0x20bc <Open_Door+0xbf2>
    20e2:	14 c0       	rjmp	.+40     	; 0x210c <Open_Door+0xc42>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e4:	6b a1       	ldd	r22, Y+35	; 0x23
    20e6:	7c a1       	ldd	r23, Y+36	; 0x24
    20e8:	8d a1       	ldd	r24, Y+37	; 0x25
    20ea:	9e a1       	ldd	r25, Y+38	; 0x26
    20ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f0:	dc 01       	movw	r26, r24
    20f2:	cb 01       	movw	r24, r22
    20f4:	9a a3       	std	Y+34, r25	; 0x22
    20f6:	89 a3       	std	Y+33, r24	; 0x21
    20f8:	89 a1       	ldd	r24, Y+33	; 0x21
    20fa:	9a a1       	ldd	r25, Y+34	; 0x22
    20fc:	9e 8f       	std	Y+30, r25	; 0x1e
    20fe:	8d 8f       	std	Y+29, r24	; 0x1d
    2100:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2102:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2104:	01 97       	sbiw	r24, 0x01	; 1
    2106:	f1 f7       	brne	.-4      	; 0x2104 <Open_Door+0xc3a>
    2108:	9e 8f       	std	Y+30, r25	; 0x1e
    210a:	8d 8f       	std	Y+29, r24	; 0x1d
	  		  	 _delay_ms(15000);

	  	         LCD_clearScreen(); /* clear the LCD display */
    210c:	0e 94 c9 20 	call	0x4192	; 0x4192 <LCD_clearScreen>
    2110:	80 e0       	ldi	r24, 0x00	; 0
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	a8 e4       	ldi	r26, 0x48	; 72
    2116:	b3 e4       	ldi	r27, 0x43	; 67
    2118:	89 8f       	std	Y+25, r24	; 0x19
    211a:	9a 8f       	std	Y+26, r25	; 0x1a
    211c:	ab 8f       	std	Y+27, r26	; 0x1b
    211e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2120:	69 8d       	ldd	r22, Y+25	; 0x19
    2122:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2124:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2126:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2128:	20 e0       	ldi	r18, 0x00	; 0
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	4a ef       	ldi	r20, 0xFA	; 250
    212e:	54 e4       	ldi	r21, 0x44	; 68
    2130:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2134:	dc 01       	movw	r26, r24
    2136:	cb 01       	movw	r24, r22
    2138:	8d 8b       	std	Y+21, r24	; 0x15
    213a:	9e 8b       	std	Y+22, r25	; 0x16
    213c:	af 8b       	std	Y+23, r26	; 0x17
    213e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2140:	6d 89       	ldd	r22, Y+21	; 0x15
    2142:	7e 89       	ldd	r23, Y+22	; 0x16
    2144:	8f 89       	ldd	r24, Y+23	; 0x17
    2146:	98 8d       	ldd	r25, Y+24	; 0x18
    2148:	20 e0       	ldi	r18, 0x00	; 0
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	40 e8       	ldi	r20, 0x80	; 128
    214e:	5f e3       	ldi	r21, 0x3F	; 63
    2150:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2154:	88 23       	and	r24, r24
    2156:	2c f4       	brge	.+10     	; 0x2162 <Open_Door+0xc98>
		__ticks = 1;
    2158:	81 e0       	ldi	r24, 0x01	; 1
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	9c 8b       	std	Y+20, r25	; 0x14
    215e:	8b 8b       	std	Y+19, r24	; 0x13
    2160:	3f c0       	rjmp	.+126    	; 0x21e0 <Open_Door+0xd16>
	else if (__tmp > 65535)
    2162:	6d 89       	ldd	r22, Y+21	; 0x15
    2164:	7e 89       	ldd	r23, Y+22	; 0x16
    2166:	8f 89       	ldd	r24, Y+23	; 0x17
    2168:	98 8d       	ldd	r25, Y+24	; 0x18
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	3f ef       	ldi	r19, 0xFF	; 255
    216e:	4f e7       	ldi	r20, 0x7F	; 127
    2170:	57 e4       	ldi	r21, 0x47	; 71
    2172:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2176:	18 16       	cp	r1, r24
    2178:	4c f5       	brge	.+82     	; 0x21cc <Open_Door+0xd02>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    217a:	69 8d       	ldd	r22, Y+25	; 0x19
    217c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    217e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2180:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2182:	20 e0       	ldi	r18, 0x00	; 0
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	40 e2       	ldi	r20, 0x20	; 32
    2188:	51 e4       	ldi	r21, 0x41	; 65
    218a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    218e:	dc 01       	movw	r26, r24
    2190:	cb 01       	movw	r24, r22
    2192:	bc 01       	movw	r22, r24
    2194:	cd 01       	movw	r24, r26
    2196:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    219a:	dc 01       	movw	r26, r24
    219c:	cb 01       	movw	r24, r22
    219e:	9c 8b       	std	Y+20, r25	; 0x14
    21a0:	8b 8b       	std	Y+19, r24	; 0x13
    21a2:	0f c0       	rjmp	.+30     	; 0x21c2 <Open_Door+0xcf8>
    21a4:	88 ec       	ldi	r24, 0xC8	; 200
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	9a 8b       	std	Y+18, r25	; 0x12
    21aa:	89 8b       	std	Y+17, r24	; 0x11
    21ac:	89 89       	ldd	r24, Y+17	; 0x11
    21ae:	9a 89       	ldd	r25, Y+18	; 0x12
    21b0:	01 97       	sbiw	r24, 0x01	; 1
    21b2:	f1 f7       	brne	.-4      	; 0x21b0 <Open_Door+0xce6>
    21b4:	9a 8b       	std	Y+18, r25	; 0x12
    21b6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21b8:	8b 89       	ldd	r24, Y+19	; 0x13
    21ba:	9c 89       	ldd	r25, Y+20	; 0x14
    21bc:	01 97       	sbiw	r24, 0x01	; 1
    21be:	9c 8b       	std	Y+20, r25	; 0x14
    21c0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c2:	8b 89       	ldd	r24, Y+19	; 0x13
    21c4:	9c 89       	ldd	r25, Y+20	; 0x14
    21c6:	00 97       	sbiw	r24, 0x00	; 0
    21c8:	69 f7       	brne	.-38     	; 0x21a4 <Open_Door+0xcda>
    21ca:	14 c0       	rjmp	.+40     	; 0x21f4 <Open_Door+0xd2a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21cc:	6d 89       	ldd	r22, Y+21	; 0x15
    21ce:	7e 89       	ldd	r23, Y+22	; 0x16
    21d0:	8f 89       	ldd	r24, Y+23	; 0x17
    21d2:	98 8d       	ldd	r25, Y+24	; 0x18
    21d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21d8:	dc 01       	movw	r26, r24
    21da:	cb 01       	movw	r24, r22
    21dc:	9c 8b       	std	Y+20, r25	; 0x14
    21de:	8b 8b       	std	Y+19, r24	; 0x13
    21e0:	8b 89       	ldd	r24, Y+19	; 0x13
    21e2:	9c 89       	ldd	r25, Y+20	; 0x14
    21e4:	98 8b       	std	Y+16, r25	; 0x10
    21e6:	8f 87       	std	Y+15, r24	; 0x0f
    21e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    21ea:	98 89       	ldd	r25, Y+16	; 0x10
    21ec:	01 97       	sbiw	r24, 0x01	; 1
    21ee:	f1 f7       	brne	.-4      	; 0x21ec <Open_Door+0xd22>
    21f0:	98 8b       	std	Y+16, r25	; 0x10
    21f2:	8f 87       	std	Y+15, r24	; 0x0f
	  	         _delay_ms(200);

	  	         LCD_displayStringRowColumn(0,0,"The door is");
    21f4:	2f ec       	ldi	r18, 0xCF	; 207
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	80 e0       	ldi	r24, 0x00	; 0
    21fa:	60 e0       	ldi	r22, 0x00	; 0
    21fc:	a9 01       	movw	r20, r18
    21fe:	0e 94 8d 20 	call	0x411a	; 0x411a <LCD_displayStringRowColumn>
	  	         LCD_displayStringRowColumn(1,0,"closing now :D");
    2202:	2a ee       	ldi	r18, 0xEA	; 234
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	81 e0       	ldi	r24, 0x01	; 1
    2208:	60 e0       	ldi	r22, 0x00	; 0
    220a:	a9 01       	movw	r20, r18
    220c:	0e 94 8d 20 	call	0x411a	; 0x411a <LCD_displayStringRowColumn>
    2210:	80 e0       	ldi	r24, 0x00	; 0
    2212:	90 e6       	ldi	r25, 0x60	; 96
    2214:	aa e6       	ldi	r26, 0x6A	; 106
    2216:	b6 e4       	ldi	r27, 0x46	; 70
    2218:	8b 87       	std	Y+11, r24	; 0x0b
    221a:	9c 87       	std	Y+12, r25	; 0x0c
    221c:	ad 87       	std	Y+13, r26	; 0x0d
    221e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2220:	6b 85       	ldd	r22, Y+11	; 0x0b
    2222:	7c 85       	ldd	r23, Y+12	; 0x0c
    2224:	8d 85       	ldd	r24, Y+13	; 0x0d
    2226:	9e 85       	ldd	r25, Y+14	; 0x0e
    2228:	20 e0       	ldi	r18, 0x00	; 0
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	4a ef       	ldi	r20, 0xFA	; 250
    222e:	54 e4       	ldi	r21, 0x44	; 68
    2230:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2234:	dc 01       	movw	r26, r24
    2236:	cb 01       	movw	r24, r22
    2238:	8f 83       	std	Y+7, r24	; 0x07
    223a:	98 87       	std	Y+8, r25	; 0x08
    223c:	a9 87       	std	Y+9, r26	; 0x09
    223e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2240:	6f 81       	ldd	r22, Y+7	; 0x07
    2242:	78 85       	ldd	r23, Y+8	; 0x08
    2244:	89 85       	ldd	r24, Y+9	; 0x09
    2246:	9a 85       	ldd	r25, Y+10	; 0x0a
    2248:	20 e0       	ldi	r18, 0x00	; 0
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	40 e8       	ldi	r20, 0x80	; 128
    224e:	5f e3       	ldi	r21, 0x3F	; 63
    2250:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2254:	88 23       	and	r24, r24
    2256:	2c f4       	brge	.+10     	; 0x2262 <Open_Door+0xd98>
		__ticks = 1;
    2258:	81 e0       	ldi	r24, 0x01	; 1
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	9e 83       	std	Y+6, r25	; 0x06
    225e:	8d 83       	std	Y+5, r24	; 0x05
    2260:	3f c0       	rjmp	.+126    	; 0x22e0 <Open_Door+0xe16>
	else if (__tmp > 65535)
    2262:	6f 81       	ldd	r22, Y+7	; 0x07
    2264:	78 85       	ldd	r23, Y+8	; 0x08
    2266:	89 85       	ldd	r24, Y+9	; 0x09
    2268:	9a 85       	ldd	r25, Y+10	; 0x0a
    226a:	20 e0       	ldi	r18, 0x00	; 0
    226c:	3f ef       	ldi	r19, 0xFF	; 255
    226e:	4f e7       	ldi	r20, 0x7F	; 127
    2270:	57 e4       	ldi	r21, 0x47	; 71
    2272:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2276:	18 16       	cp	r1, r24
    2278:	4c f5       	brge	.+82     	; 0x22cc <Open_Door+0xe02>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    227a:	6b 85       	ldd	r22, Y+11	; 0x0b
    227c:	7c 85       	ldd	r23, Y+12	; 0x0c
    227e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2280:	9e 85       	ldd	r25, Y+14	; 0x0e
    2282:	20 e0       	ldi	r18, 0x00	; 0
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	40 e2       	ldi	r20, 0x20	; 32
    2288:	51 e4       	ldi	r21, 0x41	; 65
    228a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    228e:	dc 01       	movw	r26, r24
    2290:	cb 01       	movw	r24, r22
    2292:	bc 01       	movw	r22, r24
    2294:	cd 01       	movw	r24, r26
    2296:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    229a:	dc 01       	movw	r26, r24
    229c:	cb 01       	movw	r24, r22
    229e:	9e 83       	std	Y+6, r25	; 0x06
    22a0:	8d 83       	std	Y+5, r24	; 0x05
    22a2:	0f c0       	rjmp	.+30     	; 0x22c2 <Open_Door+0xdf8>
    22a4:	88 ec       	ldi	r24, 0xC8	; 200
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	9c 83       	std	Y+4, r25	; 0x04
    22aa:	8b 83       	std	Y+3, r24	; 0x03
    22ac:	8b 81       	ldd	r24, Y+3	; 0x03
    22ae:	9c 81       	ldd	r25, Y+4	; 0x04
    22b0:	01 97       	sbiw	r24, 0x01	; 1
    22b2:	f1 f7       	brne	.-4      	; 0x22b0 <Open_Door+0xde6>
    22b4:	9c 83       	std	Y+4, r25	; 0x04
    22b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22b8:	8d 81       	ldd	r24, Y+5	; 0x05
    22ba:	9e 81       	ldd	r25, Y+6	; 0x06
    22bc:	01 97       	sbiw	r24, 0x01	; 1
    22be:	9e 83       	std	Y+6, r25	; 0x06
    22c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c2:	8d 81       	ldd	r24, Y+5	; 0x05
    22c4:	9e 81       	ldd	r25, Y+6	; 0x06
    22c6:	00 97       	sbiw	r24, 0x00	; 0
    22c8:	69 f7       	brne	.-38     	; 0x22a4 <Open_Door+0xdda>
    22ca:	14 c0       	rjmp	.+40     	; 0x22f4 <Open_Door+0xe2a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22cc:	6f 81       	ldd	r22, Y+7	; 0x07
    22ce:	78 85       	ldd	r23, Y+8	; 0x08
    22d0:	89 85       	ldd	r24, Y+9	; 0x09
    22d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d8:	dc 01       	movw	r26, r24
    22da:	cb 01       	movw	r24, r22
    22dc:	9e 83       	std	Y+6, r25	; 0x06
    22de:	8d 83       	std	Y+5, r24	; 0x05
    22e0:	8d 81       	ldd	r24, Y+5	; 0x05
    22e2:	9e 81       	ldd	r25, Y+6	; 0x06
    22e4:	9a 83       	std	Y+2, r25	; 0x02
    22e6:	89 83       	std	Y+1, r24	; 0x01
    22e8:	89 81       	ldd	r24, Y+1	; 0x01
    22ea:	9a 81       	ldd	r25, Y+2	; 0x02
    22ec:	01 97       	sbiw	r24, 0x01	; 1
    22ee:	f1 f7       	brne	.-4      	; 0x22ec <Open_Door+0xe22>
    22f0:	9a 83       	std	Y+2, r25	; 0x02
    22f2:	89 83       	std	Y+1, r24	; 0x01
	  	         _delay_ms(15000);

	   }


}
    22f4:	c4 56       	subi	r28, 0x64	; 100
    22f6:	df 4f       	sbci	r29, 0xFF	; 255
    22f8:	0f b6       	in	r0, 0x3f	; 63
    22fa:	f8 94       	cli
    22fc:	de bf       	out	0x3e, r29	; 62
    22fe:	0f be       	out	0x3f, r0	; 63
    2300:	cd bf       	out	0x3d, r28	; 61
    2302:	cf 91       	pop	r28
    2304:	df 91       	pop	r29
    2306:	1f 91       	pop	r17
    2308:	0f 91       	pop	r16
    230a:	08 95       	ret

0000230c <Change_Password>:
void Change_Password()
{
    230c:	0f 93       	push	r16
    230e:	1f 93       	push	r17
    2310:	df 93       	push	r29
    2312:	cf 93       	push	r28
    2314:	cd b7       	in	r28, 0x3d	; 61
    2316:	de b7       	in	r29, 0x3e	; 62
    2318:	c0 58       	subi	r28, 0x80	; 128
    231a:	d0 40       	sbci	r29, 0x00	; 0
    231c:	0f b6       	in	r0, 0x3f	; 63
    231e:	f8 94       	cli
    2320:	de bf       	out	0x3e, r29	; 62
    2322:	0f be       	out	0x3f, r0	; 63
    2324:	cd bf       	out	0x3d, r28	; 61
	uint8 mode=0 ;
    2326:	fe 01       	movw	r30, r28
    2328:	e0 58       	subi	r30, 0x80	; 128
    232a:	ff 4f       	sbci	r31, 0xFF	; 255
    232c:	10 82       	st	Z, r1
	uint8 saved_password_value_2nd=0;
    232e:	fe 01       	movw	r30, r28
    2330:	e1 58       	subi	r30, 0x81	; 129
    2332:	ff 4f       	sbci	r31, 0xFF	; 255
    2334:	10 82       	st	Z, r1

	UART_sendByte(mode); //send the mode to the second MC using uart
    2336:	fe 01       	movw	r30, r28
    2338:	e0 58       	subi	r30, 0x80	; 128
    233a:	ff 4f       	sbci	r31, 0xFF	; 255
    233c:	80 81       	ld	r24, Z
    233e:	0e 94 4f 21 	call	0x429e	; 0x429e <UART_sendByte>

	LCD_clearScreen(); /* clear the LCD display */
    2342:	0e 94 c9 20 	call	0x4192	; 0x4192 <LCD_clearScreen>
    2346:	fe 01       	movw	r30, r28
    2348:	e5 58       	subi	r30, 0x85	; 133
    234a:	ff 4f       	sbci	r31, 0xFF	; 255
    234c:	80 e0       	ldi	r24, 0x00	; 0
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	a8 e4       	ldi	r26, 0x48	; 72
    2352:	b3 e4       	ldi	r27, 0x43	; 67
    2354:	80 83       	st	Z, r24
    2356:	91 83       	std	Z+1, r25	; 0x01
    2358:	a2 83       	std	Z+2, r26	; 0x02
    235a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    235c:	8e 01       	movw	r16, r28
    235e:	09 58       	subi	r16, 0x89	; 137
    2360:	1f 4f       	sbci	r17, 0xFF	; 255
    2362:	fe 01       	movw	r30, r28
    2364:	e5 58       	subi	r30, 0x85	; 133
    2366:	ff 4f       	sbci	r31, 0xFF	; 255
    2368:	60 81       	ld	r22, Z
    236a:	71 81       	ldd	r23, Z+1	; 0x01
    236c:	82 81       	ldd	r24, Z+2	; 0x02
    236e:	93 81       	ldd	r25, Z+3	; 0x03
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	4a ef       	ldi	r20, 0xFA	; 250
    2376:	54 e4       	ldi	r21, 0x44	; 68
    2378:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    237c:	dc 01       	movw	r26, r24
    237e:	cb 01       	movw	r24, r22
    2380:	f8 01       	movw	r30, r16
    2382:	80 83       	st	Z, r24
    2384:	91 83       	std	Z+1, r25	; 0x01
    2386:	a2 83       	std	Z+2, r26	; 0x02
    2388:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    238a:	fe 01       	movw	r30, r28
    238c:	e9 58       	subi	r30, 0x89	; 137
    238e:	ff 4f       	sbci	r31, 0xFF	; 255
    2390:	60 81       	ld	r22, Z
    2392:	71 81       	ldd	r23, Z+1	; 0x01
    2394:	82 81       	ldd	r24, Z+2	; 0x02
    2396:	93 81       	ldd	r25, Z+3	; 0x03
    2398:	20 e0       	ldi	r18, 0x00	; 0
    239a:	30 e0       	ldi	r19, 0x00	; 0
    239c:	40 e8       	ldi	r20, 0x80	; 128
    239e:	5f e3       	ldi	r21, 0x3F	; 63
    23a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23a4:	88 23       	and	r24, r24
    23a6:	44 f4       	brge	.+16     	; 0x23b8 <Change_Password+0xac>
		__ticks = 1;
    23a8:	fe 01       	movw	r30, r28
    23aa:	eb 58       	subi	r30, 0x8B	; 139
    23ac:	ff 4f       	sbci	r31, 0xFF	; 255
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	91 83       	std	Z+1, r25	; 0x01
    23b4:	80 83       	st	Z, r24
    23b6:	64 c0       	rjmp	.+200    	; 0x2480 <Change_Password+0x174>
	else if (__tmp > 65535)
    23b8:	fe 01       	movw	r30, r28
    23ba:	e9 58       	subi	r30, 0x89	; 137
    23bc:	ff 4f       	sbci	r31, 0xFF	; 255
    23be:	60 81       	ld	r22, Z
    23c0:	71 81       	ldd	r23, Z+1	; 0x01
    23c2:	82 81       	ldd	r24, Z+2	; 0x02
    23c4:	93 81       	ldd	r25, Z+3	; 0x03
    23c6:	20 e0       	ldi	r18, 0x00	; 0
    23c8:	3f ef       	ldi	r19, 0xFF	; 255
    23ca:	4f e7       	ldi	r20, 0x7F	; 127
    23cc:	57 e4       	ldi	r21, 0x47	; 71
    23ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23d2:	18 16       	cp	r1, r24
    23d4:	0c f0       	brlt	.+2      	; 0x23d8 <Change_Password+0xcc>
    23d6:	43 c0       	rjmp	.+134    	; 0x245e <Change_Password+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23d8:	fe 01       	movw	r30, r28
    23da:	e5 58       	subi	r30, 0x85	; 133
    23dc:	ff 4f       	sbci	r31, 0xFF	; 255
    23de:	60 81       	ld	r22, Z
    23e0:	71 81       	ldd	r23, Z+1	; 0x01
    23e2:	82 81       	ldd	r24, Z+2	; 0x02
    23e4:	93 81       	ldd	r25, Z+3	; 0x03
    23e6:	20 e0       	ldi	r18, 0x00	; 0
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	40 e2       	ldi	r20, 0x20	; 32
    23ec:	51 e4       	ldi	r21, 0x41	; 65
    23ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f2:	dc 01       	movw	r26, r24
    23f4:	cb 01       	movw	r24, r22
    23f6:	8e 01       	movw	r16, r28
    23f8:	0b 58       	subi	r16, 0x8B	; 139
    23fa:	1f 4f       	sbci	r17, 0xFF	; 255
    23fc:	bc 01       	movw	r22, r24
    23fe:	cd 01       	movw	r24, r26
    2400:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2404:	dc 01       	movw	r26, r24
    2406:	cb 01       	movw	r24, r22
    2408:	f8 01       	movw	r30, r16
    240a:	91 83       	std	Z+1, r25	; 0x01
    240c:	80 83       	st	Z, r24
    240e:	1f c0       	rjmp	.+62     	; 0x244e <Change_Password+0x142>
    2410:	fe 01       	movw	r30, r28
    2412:	ed 58       	subi	r30, 0x8D	; 141
    2414:	ff 4f       	sbci	r31, 0xFF	; 255
    2416:	88 ec       	ldi	r24, 0xC8	; 200
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	91 83       	std	Z+1, r25	; 0x01
    241c:	80 83       	st	Z, r24
    241e:	fe 01       	movw	r30, r28
    2420:	ed 58       	subi	r30, 0x8D	; 141
    2422:	ff 4f       	sbci	r31, 0xFF	; 255
    2424:	80 81       	ld	r24, Z
    2426:	91 81       	ldd	r25, Z+1	; 0x01
    2428:	01 97       	sbiw	r24, 0x01	; 1
    242a:	f1 f7       	brne	.-4      	; 0x2428 <Change_Password+0x11c>
    242c:	fe 01       	movw	r30, r28
    242e:	ed 58       	subi	r30, 0x8D	; 141
    2430:	ff 4f       	sbci	r31, 0xFF	; 255
    2432:	91 83       	std	Z+1, r25	; 0x01
    2434:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2436:	de 01       	movw	r26, r28
    2438:	ab 58       	subi	r26, 0x8B	; 139
    243a:	bf 4f       	sbci	r27, 0xFF	; 255
    243c:	fe 01       	movw	r30, r28
    243e:	eb 58       	subi	r30, 0x8B	; 139
    2440:	ff 4f       	sbci	r31, 0xFF	; 255
    2442:	80 81       	ld	r24, Z
    2444:	91 81       	ldd	r25, Z+1	; 0x01
    2446:	01 97       	sbiw	r24, 0x01	; 1
    2448:	11 96       	adiw	r26, 0x01	; 1
    244a:	9c 93       	st	X, r25
    244c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    244e:	fe 01       	movw	r30, r28
    2450:	eb 58       	subi	r30, 0x8B	; 139
    2452:	ff 4f       	sbci	r31, 0xFF	; 255
    2454:	80 81       	ld	r24, Z
    2456:	91 81       	ldd	r25, Z+1	; 0x01
    2458:	00 97       	sbiw	r24, 0x00	; 0
    245a:	d1 f6       	brne	.-76     	; 0x2410 <Change_Password+0x104>
    245c:	27 c0       	rjmp	.+78     	; 0x24ac <Change_Password+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    245e:	8e 01       	movw	r16, r28
    2460:	0b 58       	subi	r16, 0x8B	; 139
    2462:	1f 4f       	sbci	r17, 0xFF	; 255
    2464:	fe 01       	movw	r30, r28
    2466:	e9 58       	subi	r30, 0x89	; 137
    2468:	ff 4f       	sbci	r31, 0xFF	; 255
    246a:	60 81       	ld	r22, Z
    246c:	71 81       	ldd	r23, Z+1	; 0x01
    246e:	82 81       	ldd	r24, Z+2	; 0x02
    2470:	93 81       	ldd	r25, Z+3	; 0x03
    2472:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2476:	dc 01       	movw	r26, r24
    2478:	cb 01       	movw	r24, r22
    247a:	f8 01       	movw	r30, r16
    247c:	91 83       	std	Z+1, r25	; 0x01
    247e:	80 83       	st	Z, r24
    2480:	de 01       	movw	r26, r28
    2482:	af 58       	subi	r26, 0x8F	; 143
    2484:	bf 4f       	sbci	r27, 0xFF	; 255
    2486:	fe 01       	movw	r30, r28
    2488:	eb 58       	subi	r30, 0x8B	; 139
    248a:	ff 4f       	sbci	r31, 0xFF	; 255
    248c:	80 81       	ld	r24, Z
    248e:	91 81       	ldd	r25, Z+1	; 0x01
    2490:	8d 93       	st	X+, r24
    2492:	9c 93       	st	X, r25
    2494:	fe 01       	movw	r30, r28
    2496:	ef 58       	subi	r30, 0x8F	; 143
    2498:	ff 4f       	sbci	r31, 0xFF	; 255
    249a:	80 81       	ld	r24, Z
    249c:	91 81       	ldd	r25, Z+1	; 0x01
    249e:	01 97       	sbiw	r24, 0x01	; 1
    24a0:	f1 f7       	brne	.-4      	; 0x249e <Change_Password+0x192>
    24a2:	fe 01       	movw	r30, r28
    24a4:	ef 58       	subi	r30, 0x8F	; 143
    24a6:	ff 4f       	sbci	r31, 0xFF	; 255
    24a8:	91 83       	std	Z+1, r25	; 0x01
    24aa:	80 83       	st	Z, r24
	_delay_ms(200);


	   LCD_displayStringRowColumn(0,0,"Now, You will ");
    24ac:	22 e8       	ldi	r18, 0x82	; 130
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	80 e0       	ldi	r24, 0x00	; 0
    24b2:	60 e0       	ldi	r22, 0x00	; 0
    24b4:	a9 01       	movw	r20, r18
    24b6:	0e 94 8d 20 	call	0x411a	; 0x411a <LCD_displayStringRowColumn>
	   LCD_displayStringRowColumn(1,0,"change password");
    24ba:	29 ef       	ldi	r18, 0xF9	; 249
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	81 e0       	ldi	r24, 0x01	; 1
    24c0:	60 e0       	ldi	r22, 0x00	; 0
    24c2:	a9 01       	movw	r20, r18
    24c4:	0e 94 8d 20 	call	0x411a	; 0x411a <LCD_displayStringRowColumn>
    24c8:	fe 01       	movw	r30, r28
    24ca:	e3 59       	subi	r30, 0x93	; 147
    24cc:	ff 4f       	sbci	r31, 0xFF	; 255
    24ce:	80 e0       	ldi	r24, 0x00	; 0
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	aa ef       	ldi	r26, 0xFA	; 250
    24d4:	b4 e4       	ldi	r27, 0x44	; 68
    24d6:	80 83       	st	Z, r24
    24d8:	91 83       	std	Z+1, r25	; 0x01
    24da:	a2 83       	std	Z+2, r26	; 0x02
    24dc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24de:	8e 01       	movw	r16, r28
    24e0:	07 59       	subi	r16, 0x97	; 151
    24e2:	1f 4f       	sbci	r17, 0xFF	; 255
    24e4:	fe 01       	movw	r30, r28
    24e6:	e3 59       	subi	r30, 0x93	; 147
    24e8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ea:	60 81       	ld	r22, Z
    24ec:	71 81       	ldd	r23, Z+1	; 0x01
    24ee:	82 81       	ldd	r24, Z+2	; 0x02
    24f0:	93 81       	ldd	r25, Z+3	; 0x03
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	4a ef       	ldi	r20, 0xFA	; 250
    24f8:	54 e4       	ldi	r21, 0x44	; 68
    24fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	f8 01       	movw	r30, r16
    2504:	80 83       	st	Z, r24
    2506:	91 83       	std	Z+1, r25	; 0x01
    2508:	a2 83       	std	Z+2, r26	; 0x02
    250a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    250c:	fe 01       	movw	r30, r28
    250e:	e7 59       	subi	r30, 0x97	; 151
    2510:	ff 4f       	sbci	r31, 0xFF	; 255
    2512:	60 81       	ld	r22, Z
    2514:	71 81       	ldd	r23, Z+1	; 0x01
    2516:	82 81       	ldd	r24, Z+2	; 0x02
    2518:	93 81       	ldd	r25, Z+3	; 0x03
    251a:	20 e0       	ldi	r18, 0x00	; 0
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	40 e8       	ldi	r20, 0x80	; 128
    2520:	5f e3       	ldi	r21, 0x3F	; 63
    2522:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2526:	88 23       	and	r24, r24
    2528:	44 f4       	brge	.+16     	; 0x253a <Change_Password+0x22e>
		__ticks = 1;
    252a:	fe 01       	movw	r30, r28
    252c:	e9 59       	subi	r30, 0x99	; 153
    252e:	ff 4f       	sbci	r31, 0xFF	; 255
    2530:	81 e0       	ldi	r24, 0x01	; 1
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	91 83       	std	Z+1, r25	; 0x01
    2536:	80 83       	st	Z, r24
    2538:	64 c0       	rjmp	.+200    	; 0x2602 <Change_Password+0x2f6>
	else if (__tmp > 65535)
    253a:	fe 01       	movw	r30, r28
    253c:	e7 59       	subi	r30, 0x97	; 151
    253e:	ff 4f       	sbci	r31, 0xFF	; 255
    2540:	60 81       	ld	r22, Z
    2542:	71 81       	ldd	r23, Z+1	; 0x01
    2544:	82 81       	ldd	r24, Z+2	; 0x02
    2546:	93 81       	ldd	r25, Z+3	; 0x03
    2548:	20 e0       	ldi	r18, 0x00	; 0
    254a:	3f ef       	ldi	r19, 0xFF	; 255
    254c:	4f e7       	ldi	r20, 0x7F	; 127
    254e:	57 e4       	ldi	r21, 0x47	; 71
    2550:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2554:	18 16       	cp	r1, r24
    2556:	0c f0       	brlt	.+2      	; 0x255a <Change_Password+0x24e>
    2558:	43 c0       	rjmp	.+134    	; 0x25e0 <Change_Password+0x2d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    255a:	fe 01       	movw	r30, r28
    255c:	e3 59       	subi	r30, 0x93	; 147
    255e:	ff 4f       	sbci	r31, 0xFF	; 255
    2560:	60 81       	ld	r22, Z
    2562:	71 81       	ldd	r23, Z+1	; 0x01
    2564:	82 81       	ldd	r24, Z+2	; 0x02
    2566:	93 81       	ldd	r25, Z+3	; 0x03
    2568:	20 e0       	ldi	r18, 0x00	; 0
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	40 e2       	ldi	r20, 0x20	; 32
    256e:	51 e4       	ldi	r21, 0x41	; 65
    2570:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2574:	dc 01       	movw	r26, r24
    2576:	cb 01       	movw	r24, r22
    2578:	8e 01       	movw	r16, r28
    257a:	09 59       	subi	r16, 0x99	; 153
    257c:	1f 4f       	sbci	r17, 0xFF	; 255
    257e:	bc 01       	movw	r22, r24
    2580:	cd 01       	movw	r24, r26
    2582:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2586:	dc 01       	movw	r26, r24
    2588:	cb 01       	movw	r24, r22
    258a:	f8 01       	movw	r30, r16
    258c:	91 83       	std	Z+1, r25	; 0x01
    258e:	80 83       	st	Z, r24
    2590:	1f c0       	rjmp	.+62     	; 0x25d0 <Change_Password+0x2c4>
    2592:	fe 01       	movw	r30, r28
    2594:	eb 59       	subi	r30, 0x9B	; 155
    2596:	ff 4f       	sbci	r31, 0xFF	; 255
    2598:	88 ec       	ldi	r24, 0xC8	; 200
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	91 83       	std	Z+1, r25	; 0x01
    259e:	80 83       	st	Z, r24
    25a0:	fe 01       	movw	r30, r28
    25a2:	eb 59       	subi	r30, 0x9B	; 155
    25a4:	ff 4f       	sbci	r31, 0xFF	; 255
    25a6:	80 81       	ld	r24, Z
    25a8:	91 81       	ldd	r25, Z+1	; 0x01
    25aa:	01 97       	sbiw	r24, 0x01	; 1
    25ac:	f1 f7       	brne	.-4      	; 0x25aa <Change_Password+0x29e>
    25ae:	fe 01       	movw	r30, r28
    25b0:	eb 59       	subi	r30, 0x9B	; 155
    25b2:	ff 4f       	sbci	r31, 0xFF	; 255
    25b4:	91 83       	std	Z+1, r25	; 0x01
    25b6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b8:	de 01       	movw	r26, r28
    25ba:	a9 59       	subi	r26, 0x99	; 153
    25bc:	bf 4f       	sbci	r27, 0xFF	; 255
    25be:	fe 01       	movw	r30, r28
    25c0:	e9 59       	subi	r30, 0x99	; 153
    25c2:	ff 4f       	sbci	r31, 0xFF	; 255
    25c4:	80 81       	ld	r24, Z
    25c6:	91 81       	ldd	r25, Z+1	; 0x01
    25c8:	01 97       	sbiw	r24, 0x01	; 1
    25ca:	11 96       	adiw	r26, 0x01	; 1
    25cc:	9c 93       	st	X, r25
    25ce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25d0:	fe 01       	movw	r30, r28
    25d2:	e9 59       	subi	r30, 0x99	; 153
    25d4:	ff 4f       	sbci	r31, 0xFF	; 255
    25d6:	80 81       	ld	r24, Z
    25d8:	91 81       	ldd	r25, Z+1	; 0x01
    25da:	00 97       	sbiw	r24, 0x00	; 0
    25dc:	d1 f6       	brne	.-76     	; 0x2592 <Change_Password+0x286>
    25de:	27 c0       	rjmp	.+78     	; 0x262e <Change_Password+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e0:	8e 01       	movw	r16, r28
    25e2:	09 59       	subi	r16, 0x99	; 153
    25e4:	1f 4f       	sbci	r17, 0xFF	; 255
    25e6:	fe 01       	movw	r30, r28
    25e8:	e7 59       	subi	r30, 0x97	; 151
    25ea:	ff 4f       	sbci	r31, 0xFF	; 255
    25ec:	60 81       	ld	r22, Z
    25ee:	71 81       	ldd	r23, Z+1	; 0x01
    25f0:	82 81       	ldd	r24, Z+2	; 0x02
    25f2:	93 81       	ldd	r25, Z+3	; 0x03
    25f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f8:	dc 01       	movw	r26, r24
    25fa:	cb 01       	movw	r24, r22
    25fc:	f8 01       	movw	r30, r16
    25fe:	91 83       	std	Z+1, r25	; 0x01
    2600:	80 83       	st	Z, r24
    2602:	de 01       	movw	r26, r28
    2604:	ad 59       	subi	r26, 0x9D	; 157
    2606:	bf 4f       	sbci	r27, 0xFF	; 255
    2608:	fe 01       	movw	r30, r28
    260a:	e9 59       	subi	r30, 0x99	; 153
    260c:	ff 4f       	sbci	r31, 0xFF	; 255
    260e:	80 81       	ld	r24, Z
    2610:	91 81       	ldd	r25, Z+1	; 0x01
    2612:	8d 93       	st	X+, r24
    2614:	9c 93       	st	X, r25
    2616:	fe 01       	movw	r30, r28
    2618:	ed 59       	subi	r30, 0x9D	; 157
    261a:	ff 4f       	sbci	r31, 0xFF	; 255
    261c:	80 81       	ld	r24, Z
    261e:	91 81       	ldd	r25, Z+1	; 0x01
    2620:	01 97       	sbiw	r24, 0x01	; 1
    2622:	f1 f7       	brne	.-4      	; 0x2620 <Change_Password+0x314>
    2624:	fe 01       	movw	r30, r28
    2626:	ed 59       	subi	r30, 0x9D	; 157
    2628:	ff 4f       	sbci	r31, 0xFF	; 255
    262a:	91 83       	std	Z+1, r25	; 0x01
    262c:	80 83       	st	Z, r24

	   _delay_ms(2000);
		LCD_clearScreen(); /* clear the LCD display */
    262e:	0e 94 c9 20 	call	0x4192	; 0x4192 <LCD_clearScreen>
    2632:	fe 01       	movw	r30, r28
    2634:	e1 5a       	subi	r30, 0xA1	; 161
    2636:	ff 4f       	sbci	r31, 0xFF	; 255
    2638:	80 e0       	ldi	r24, 0x00	; 0
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	a8 e4       	ldi	r26, 0x48	; 72
    263e:	b3 e4       	ldi	r27, 0x43	; 67
    2640:	80 83       	st	Z, r24
    2642:	91 83       	std	Z+1, r25	; 0x01
    2644:	a2 83       	std	Z+2, r26	; 0x02
    2646:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2648:	8e 01       	movw	r16, r28
    264a:	05 5a       	subi	r16, 0xA5	; 165
    264c:	1f 4f       	sbci	r17, 0xFF	; 255
    264e:	fe 01       	movw	r30, r28
    2650:	e1 5a       	subi	r30, 0xA1	; 161
    2652:	ff 4f       	sbci	r31, 0xFF	; 255
    2654:	60 81       	ld	r22, Z
    2656:	71 81       	ldd	r23, Z+1	; 0x01
    2658:	82 81       	ldd	r24, Z+2	; 0x02
    265a:	93 81       	ldd	r25, Z+3	; 0x03
    265c:	20 e0       	ldi	r18, 0x00	; 0
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	4a ef       	ldi	r20, 0xFA	; 250
    2662:	54 e4       	ldi	r21, 0x44	; 68
    2664:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2668:	dc 01       	movw	r26, r24
    266a:	cb 01       	movw	r24, r22
    266c:	f8 01       	movw	r30, r16
    266e:	80 83       	st	Z, r24
    2670:	91 83       	std	Z+1, r25	; 0x01
    2672:	a2 83       	std	Z+2, r26	; 0x02
    2674:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2676:	fe 01       	movw	r30, r28
    2678:	e5 5a       	subi	r30, 0xA5	; 165
    267a:	ff 4f       	sbci	r31, 0xFF	; 255
    267c:	60 81       	ld	r22, Z
    267e:	71 81       	ldd	r23, Z+1	; 0x01
    2680:	82 81       	ldd	r24, Z+2	; 0x02
    2682:	93 81       	ldd	r25, Z+3	; 0x03
    2684:	20 e0       	ldi	r18, 0x00	; 0
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	40 e8       	ldi	r20, 0x80	; 128
    268a:	5f e3       	ldi	r21, 0x3F	; 63
    268c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2690:	88 23       	and	r24, r24
    2692:	44 f4       	brge	.+16     	; 0x26a4 <Change_Password+0x398>
		__ticks = 1;
    2694:	fe 01       	movw	r30, r28
    2696:	e7 5a       	subi	r30, 0xA7	; 167
    2698:	ff 4f       	sbci	r31, 0xFF	; 255
    269a:	81 e0       	ldi	r24, 0x01	; 1
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	91 83       	std	Z+1, r25	; 0x01
    26a0:	80 83       	st	Z, r24
    26a2:	64 c0       	rjmp	.+200    	; 0x276c <Change_Password+0x460>
	else if (__tmp > 65535)
    26a4:	fe 01       	movw	r30, r28
    26a6:	e5 5a       	subi	r30, 0xA5	; 165
    26a8:	ff 4f       	sbci	r31, 0xFF	; 255
    26aa:	60 81       	ld	r22, Z
    26ac:	71 81       	ldd	r23, Z+1	; 0x01
    26ae:	82 81       	ldd	r24, Z+2	; 0x02
    26b0:	93 81       	ldd	r25, Z+3	; 0x03
    26b2:	20 e0       	ldi	r18, 0x00	; 0
    26b4:	3f ef       	ldi	r19, 0xFF	; 255
    26b6:	4f e7       	ldi	r20, 0x7F	; 127
    26b8:	57 e4       	ldi	r21, 0x47	; 71
    26ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26be:	18 16       	cp	r1, r24
    26c0:	0c f0       	brlt	.+2      	; 0x26c4 <Change_Password+0x3b8>
    26c2:	43 c0       	rjmp	.+134    	; 0x274a <Change_Password+0x43e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26c4:	fe 01       	movw	r30, r28
    26c6:	e1 5a       	subi	r30, 0xA1	; 161
    26c8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ca:	60 81       	ld	r22, Z
    26cc:	71 81       	ldd	r23, Z+1	; 0x01
    26ce:	82 81       	ldd	r24, Z+2	; 0x02
    26d0:	93 81       	ldd	r25, Z+3	; 0x03
    26d2:	20 e0       	ldi	r18, 0x00	; 0
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	40 e2       	ldi	r20, 0x20	; 32
    26d8:	51 e4       	ldi	r21, 0x41	; 65
    26da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26de:	dc 01       	movw	r26, r24
    26e0:	cb 01       	movw	r24, r22
    26e2:	8e 01       	movw	r16, r28
    26e4:	07 5a       	subi	r16, 0xA7	; 167
    26e6:	1f 4f       	sbci	r17, 0xFF	; 255
    26e8:	bc 01       	movw	r22, r24
    26ea:	cd 01       	movw	r24, r26
    26ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f0:	dc 01       	movw	r26, r24
    26f2:	cb 01       	movw	r24, r22
    26f4:	f8 01       	movw	r30, r16
    26f6:	91 83       	std	Z+1, r25	; 0x01
    26f8:	80 83       	st	Z, r24
    26fa:	1f c0       	rjmp	.+62     	; 0x273a <Change_Password+0x42e>
    26fc:	fe 01       	movw	r30, r28
    26fe:	e9 5a       	subi	r30, 0xA9	; 169
    2700:	ff 4f       	sbci	r31, 0xFF	; 255
    2702:	88 ec       	ldi	r24, 0xC8	; 200
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	91 83       	std	Z+1, r25	; 0x01
    2708:	80 83       	st	Z, r24
    270a:	fe 01       	movw	r30, r28
    270c:	e9 5a       	subi	r30, 0xA9	; 169
    270e:	ff 4f       	sbci	r31, 0xFF	; 255
    2710:	80 81       	ld	r24, Z
    2712:	91 81       	ldd	r25, Z+1	; 0x01
    2714:	01 97       	sbiw	r24, 0x01	; 1
    2716:	f1 f7       	brne	.-4      	; 0x2714 <Change_Password+0x408>
    2718:	fe 01       	movw	r30, r28
    271a:	e9 5a       	subi	r30, 0xA9	; 169
    271c:	ff 4f       	sbci	r31, 0xFF	; 255
    271e:	91 83       	std	Z+1, r25	; 0x01
    2720:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2722:	de 01       	movw	r26, r28
    2724:	a7 5a       	subi	r26, 0xA7	; 167
    2726:	bf 4f       	sbci	r27, 0xFF	; 255
    2728:	fe 01       	movw	r30, r28
    272a:	e7 5a       	subi	r30, 0xA7	; 167
    272c:	ff 4f       	sbci	r31, 0xFF	; 255
    272e:	80 81       	ld	r24, Z
    2730:	91 81       	ldd	r25, Z+1	; 0x01
    2732:	01 97       	sbiw	r24, 0x01	; 1
    2734:	11 96       	adiw	r26, 0x01	; 1
    2736:	9c 93       	st	X, r25
    2738:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    273a:	fe 01       	movw	r30, r28
    273c:	e7 5a       	subi	r30, 0xA7	; 167
    273e:	ff 4f       	sbci	r31, 0xFF	; 255
    2740:	80 81       	ld	r24, Z
    2742:	91 81       	ldd	r25, Z+1	; 0x01
    2744:	00 97       	sbiw	r24, 0x00	; 0
    2746:	d1 f6       	brne	.-76     	; 0x26fc <Change_Password+0x3f0>
    2748:	27 c0       	rjmp	.+78     	; 0x2798 <Change_Password+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    274a:	8e 01       	movw	r16, r28
    274c:	07 5a       	subi	r16, 0xA7	; 167
    274e:	1f 4f       	sbci	r17, 0xFF	; 255
    2750:	fe 01       	movw	r30, r28
    2752:	e5 5a       	subi	r30, 0xA5	; 165
    2754:	ff 4f       	sbci	r31, 0xFF	; 255
    2756:	60 81       	ld	r22, Z
    2758:	71 81       	ldd	r23, Z+1	; 0x01
    275a:	82 81       	ldd	r24, Z+2	; 0x02
    275c:	93 81       	ldd	r25, Z+3	; 0x03
    275e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2762:	dc 01       	movw	r26, r24
    2764:	cb 01       	movw	r24, r22
    2766:	f8 01       	movw	r30, r16
    2768:	91 83       	std	Z+1, r25	; 0x01
    276a:	80 83       	st	Z, r24
    276c:	de 01       	movw	r26, r28
    276e:	ab 5a       	subi	r26, 0xAB	; 171
    2770:	bf 4f       	sbci	r27, 0xFF	; 255
    2772:	fe 01       	movw	r30, r28
    2774:	e7 5a       	subi	r30, 0xA7	; 167
    2776:	ff 4f       	sbci	r31, 0xFF	; 255
    2778:	80 81       	ld	r24, Z
    277a:	91 81       	ldd	r25, Z+1	; 0x01
    277c:	8d 93       	st	X+, r24
    277e:	9c 93       	st	X, r25
    2780:	fe 01       	movw	r30, r28
    2782:	eb 5a       	subi	r30, 0xAB	; 171
    2784:	ff 4f       	sbci	r31, 0xFF	; 255
    2786:	80 81       	ld	r24, Z
    2788:	91 81       	ldd	r25, Z+1	; 0x01
    278a:	01 97       	sbiw	r24, 0x01	; 1
    278c:	f1 f7       	brne	.-4      	; 0x278a <Change_Password+0x47e>
    278e:	fe 01       	movw	r30, r28
    2790:	eb 5a       	subi	r30, 0xAB	; 171
    2792:	ff 4f       	sbci	r31, 0xFF	; 255
    2794:	91 83       	std	Z+1, r25	; 0x01
    2796:	80 83       	st	Z, r24
		_delay_ms(200);

	   LCD_displayStringRowColumn(0,0,"Old password:");
    2798:	29 e0       	ldi	r18, 0x09	; 9
    279a:	31 e0       	ldi	r19, 0x01	; 1
    279c:	80 e0       	ldi	r24, 0x00	; 0
    279e:	60 e0       	ldi	r22, 0x00	; 0
    27a0:	a9 01       	movw	r20, r18
    27a2:	0e 94 8d 20 	call	0x411a	; 0x411a <LCD_displayStringRowColumn>


	   Enter_Send_Password();/* Enter the old password */
    27a6:	0e 94 a3 05 	call	0xb46	; 0xb46 <Enter_Send_Password>
	   saved_password_value_2nd=  Check_Value_Func();
    27aa:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <Check_Value_Func>
    27ae:	fe 01       	movw	r30, r28
    27b0:	e1 58       	subi	r30, 0x81	; 129
    27b2:	ff 4f       	sbci	r31, 0xFF	; 255
    27b4:	80 83       	st	Z, r24
	   LCD_intgerToString( saved_password_value_2nd);
    27b6:	fe 01       	movw	r30, r28
    27b8:	e1 58       	subi	r30, 0x81	; 129
    27ba:	ff 4f       	sbci	r31, 0xFF	; 255
    27bc:	80 81       	ld	r24, Z
    27be:	88 2f       	mov	r24, r24
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	0e 94 a6 20 	call	0x414c	; 0x414c <LCD_intgerToString>
    27c6:	fe 01       	movw	r30, r28
    27c8:	ef 5a       	subi	r30, 0xAF	; 175
    27ca:	ff 4f       	sbci	r31, 0xFF	; 255
    27cc:	80 e0       	ldi	r24, 0x00	; 0
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	a8 e4       	ldi	r26, 0x48	; 72
    27d2:	b3 e4       	ldi	r27, 0x43	; 67
    27d4:	80 83       	st	Z, r24
    27d6:	91 83       	std	Z+1, r25	; 0x01
    27d8:	a2 83       	std	Z+2, r26	; 0x02
    27da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27dc:	8e 01       	movw	r16, r28
    27de:	03 5b       	subi	r16, 0xB3	; 179
    27e0:	1f 4f       	sbci	r17, 0xFF	; 255
    27e2:	fe 01       	movw	r30, r28
    27e4:	ef 5a       	subi	r30, 0xAF	; 175
    27e6:	ff 4f       	sbci	r31, 0xFF	; 255
    27e8:	60 81       	ld	r22, Z
    27ea:	71 81       	ldd	r23, Z+1	; 0x01
    27ec:	82 81       	ldd	r24, Z+2	; 0x02
    27ee:	93 81       	ldd	r25, Z+3	; 0x03
    27f0:	20 e0       	ldi	r18, 0x00	; 0
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	4a ef       	ldi	r20, 0xFA	; 250
    27f6:	54 e4       	ldi	r21, 0x44	; 68
    27f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27fc:	dc 01       	movw	r26, r24
    27fe:	cb 01       	movw	r24, r22
    2800:	f8 01       	movw	r30, r16
    2802:	80 83       	st	Z, r24
    2804:	91 83       	std	Z+1, r25	; 0x01
    2806:	a2 83       	std	Z+2, r26	; 0x02
    2808:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    280a:	fe 01       	movw	r30, r28
    280c:	e3 5b       	subi	r30, 0xB3	; 179
    280e:	ff 4f       	sbci	r31, 0xFF	; 255
    2810:	60 81       	ld	r22, Z
    2812:	71 81       	ldd	r23, Z+1	; 0x01
    2814:	82 81       	ldd	r24, Z+2	; 0x02
    2816:	93 81       	ldd	r25, Z+3	; 0x03
    2818:	20 e0       	ldi	r18, 0x00	; 0
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	40 e8       	ldi	r20, 0x80	; 128
    281e:	5f e3       	ldi	r21, 0x3F	; 63
    2820:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2824:	88 23       	and	r24, r24
    2826:	44 f4       	brge	.+16     	; 0x2838 <Change_Password+0x52c>
		__ticks = 1;
    2828:	fe 01       	movw	r30, r28
    282a:	e5 5b       	subi	r30, 0xB5	; 181
    282c:	ff 4f       	sbci	r31, 0xFF	; 255
    282e:	81 e0       	ldi	r24, 0x01	; 1
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	91 83       	std	Z+1, r25	; 0x01
    2834:	80 83       	st	Z, r24
    2836:	64 c0       	rjmp	.+200    	; 0x2900 <Change_Password+0x5f4>
	else if (__tmp > 65535)
    2838:	fe 01       	movw	r30, r28
    283a:	e3 5b       	subi	r30, 0xB3	; 179
    283c:	ff 4f       	sbci	r31, 0xFF	; 255
    283e:	60 81       	ld	r22, Z
    2840:	71 81       	ldd	r23, Z+1	; 0x01
    2842:	82 81       	ldd	r24, Z+2	; 0x02
    2844:	93 81       	ldd	r25, Z+3	; 0x03
    2846:	20 e0       	ldi	r18, 0x00	; 0
    2848:	3f ef       	ldi	r19, 0xFF	; 255
    284a:	4f e7       	ldi	r20, 0x7F	; 127
    284c:	57 e4       	ldi	r21, 0x47	; 71
    284e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2852:	18 16       	cp	r1, r24
    2854:	0c f0       	brlt	.+2      	; 0x2858 <Change_Password+0x54c>
    2856:	43 c0       	rjmp	.+134    	; 0x28de <Change_Password+0x5d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2858:	fe 01       	movw	r30, r28
    285a:	ef 5a       	subi	r30, 0xAF	; 175
    285c:	ff 4f       	sbci	r31, 0xFF	; 255
    285e:	60 81       	ld	r22, Z
    2860:	71 81       	ldd	r23, Z+1	; 0x01
    2862:	82 81       	ldd	r24, Z+2	; 0x02
    2864:	93 81       	ldd	r25, Z+3	; 0x03
    2866:	20 e0       	ldi	r18, 0x00	; 0
    2868:	30 e0       	ldi	r19, 0x00	; 0
    286a:	40 e2       	ldi	r20, 0x20	; 32
    286c:	51 e4       	ldi	r21, 0x41	; 65
    286e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2872:	dc 01       	movw	r26, r24
    2874:	cb 01       	movw	r24, r22
    2876:	8e 01       	movw	r16, r28
    2878:	05 5b       	subi	r16, 0xB5	; 181
    287a:	1f 4f       	sbci	r17, 0xFF	; 255
    287c:	bc 01       	movw	r22, r24
    287e:	cd 01       	movw	r24, r26
    2880:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2884:	dc 01       	movw	r26, r24
    2886:	cb 01       	movw	r24, r22
    2888:	f8 01       	movw	r30, r16
    288a:	91 83       	std	Z+1, r25	; 0x01
    288c:	80 83       	st	Z, r24
    288e:	1f c0       	rjmp	.+62     	; 0x28ce <Change_Password+0x5c2>
    2890:	fe 01       	movw	r30, r28
    2892:	e7 5b       	subi	r30, 0xB7	; 183
    2894:	ff 4f       	sbci	r31, 0xFF	; 255
    2896:	88 ec       	ldi	r24, 0xC8	; 200
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	91 83       	std	Z+1, r25	; 0x01
    289c:	80 83       	st	Z, r24
    289e:	fe 01       	movw	r30, r28
    28a0:	e7 5b       	subi	r30, 0xB7	; 183
    28a2:	ff 4f       	sbci	r31, 0xFF	; 255
    28a4:	80 81       	ld	r24, Z
    28a6:	91 81       	ldd	r25, Z+1	; 0x01
    28a8:	01 97       	sbiw	r24, 0x01	; 1
    28aa:	f1 f7       	brne	.-4      	; 0x28a8 <Change_Password+0x59c>
    28ac:	fe 01       	movw	r30, r28
    28ae:	e7 5b       	subi	r30, 0xB7	; 183
    28b0:	ff 4f       	sbci	r31, 0xFF	; 255
    28b2:	91 83       	std	Z+1, r25	; 0x01
    28b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28b6:	de 01       	movw	r26, r28
    28b8:	a5 5b       	subi	r26, 0xB5	; 181
    28ba:	bf 4f       	sbci	r27, 0xFF	; 255
    28bc:	fe 01       	movw	r30, r28
    28be:	e5 5b       	subi	r30, 0xB5	; 181
    28c0:	ff 4f       	sbci	r31, 0xFF	; 255
    28c2:	80 81       	ld	r24, Z
    28c4:	91 81       	ldd	r25, Z+1	; 0x01
    28c6:	01 97       	sbiw	r24, 0x01	; 1
    28c8:	11 96       	adiw	r26, 0x01	; 1
    28ca:	9c 93       	st	X, r25
    28cc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ce:	fe 01       	movw	r30, r28
    28d0:	e5 5b       	subi	r30, 0xB5	; 181
    28d2:	ff 4f       	sbci	r31, 0xFF	; 255
    28d4:	80 81       	ld	r24, Z
    28d6:	91 81       	ldd	r25, Z+1	; 0x01
    28d8:	00 97       	sbiw	r24, 0x00	; 0
    28da:	d1 f6       	brne	.-76     	; 0x2890 <Change_Password+0x584>
    28dc:	b3 c1       	rjmp	.+870    	; 0x2c44 <Change_Password+0x938>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28de:	8e 01       	movw	r16, r28
    28e0:	05 5b       	subi	r16, 0xB5	; 181
    28e2:	1f 4f       	sbci	r17, 0xFF	; 255
    28e4:	fe 01       	movw	r30, r28
    28e6:	e3 5b       	subi	r30, 0xB3	; 179
    28e8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ea:	60 81       	ld	r22, Z
    28ec:	71 81       	ldd	r23, Z+1	; 0x01
    28ee:	82 81       	ldd	r24, Z+2	; 0x02
    28f0:	93 81       	ldd	r25, Z+3	; 0x03
    28f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f6:	dc 01       	movw	r26, r24
    28f8:	cb 01       	movw	r24, r22
    28fa:	f8 01       	movw	r30, r16
    28fc:	91 83       	std	Z+1, r25	; 0x01
    28fe:	80 83       	st	Z, r24
    2900:	de 01       	movw	r26, r28
    2902:	a9 5b       	subi	r26, 0xB9	; 185
    2904:	bf 4f       	sbci	r27, 0xFF	; 255
    2906:	fe 01       	movw	r30, r28
    2908:	e5 5b       	subi	r30, 0xB5	; 181
    290a:	ff 4f       	sbci	r31, 0xFF	; 255
    290c:	80 81       	ld	r24, Z
    290e:	91 81       	ldd	r25, Z+1	; 0x01
    2910:	11 96       	adiw	r26, 0x01	; 1
    2912:	9c 93       	st	X, r25
    2914:	8e 93       	st	-X, r24
    2916:	fe 01       	movw	r30, r28
    2918:	e9 5b       	subi	r30, 0xB9	; 185
    291a:	ff 4f       	sbci	r31, 0xFF	; 255
    291c:	80 81       	ld	r24, Z
    291e:	91 81       	ldd	r25, Z+1	; 0x01
    2920:	01 97       	sbiw	r24, 0x01	; 1
    2922:	f1 f7       	brne	.-4      	; 0x2920 <Change_Password+0x614>
    2924:	fe 01       	movw	r30, r28
    2926:	e9 5b       	subi	r30, 0xB9	; 185
    2928:	ff 4f       	sbci	r31, 0xFF	; 255
    292a:	91 83       	std	Z+1, r25	; 0x01
    292c:	80 83       	st	Z, r24
    292e:	8a c1       	rjmp	.+788    	; 0x2c44 <Change_Password+0x938>
	   _delay_ms(200);

		while(saved_password_value_2nd==0)
		{
			LCD_clearScreen(); /* clear the LCD display */
    2930:	0e 94 c9 20 	call	0x4192	; 0x4192 <LCD_clearScreen>
    2934:	fe 01       	movw	r30, r28
    2936:	ed 5b       	subi	r30, 0xBD	; 189
    2938:	ff 4f       	sbci	r31, 0xFF	; 255
    293a:	80 e0       	ldi	r24, 0x00	; 0
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	a8 e4       	ldi	r26, 0x48	; 72
    2940:	b3 e4       	ldi	r27, 0x43	; 67
    2942:	80 83       	st	Z, r24
    2944:	91 83       	std	Z+1, r25	; 0x01
    2946:	a2 83       	std	Z+2, r26	; 0x02
    2948:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    294a:	8e 01       	movw	r16, r28
    294c:	01 5c       	subi	r16, 0xC1	; 193
    294e:	1f 4f       	sbci	r17, 0xFF	; 255
    2950:	fe 01       	movw	r30, r28
    2952:	ed 5b       	subi	r30, 0xBD	; 189
    2954:	ff 4f       	sbci	r31, 0xFF	; 255
    2956:	60 81       	ld	r22, Z
    2958:	71 81       	ldd	r23, Z+1	; 0x01
    295a:	82 81       	ldd	r24, Z+2	; 0x02
    295c:	93 81       	ldd	r25, Z+3	; 0x03
    295e:	20 e0       	ldi	r18, 0x00	; 0
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	4a ef       	ldi	r20, 0xFA	; 250
    2964:	54 e4       	ldi	r21, 0x44	; 68
    2966:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    296a:	dc 01       	movw	r26, r24
    296c:	cb 01       	movw	r24, r22
    296e:	f8 01       	movw	r30, r16
    2970:	80 83       	st	Z, r24
    2972:	91 83       	std	Z+1, r25	; 0x01
    2974:	a2 83       	std	Z+2, r26	; 0x02
    2976:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2978:	fe 01       	movw	r30, r28
    297a:	ff 96       	adiw	r30, 0x3f	; 63
    297c:	60 81       	ld	r22, Z
    297e:	71 81       	ldd	r23, Z+1	; 0x01
    2980:	82 81       	ldd	r24, Z+2	; 0x02
    2982:	93 81       	ldd	r25, Z+3	; 0x03
    2984:	20 e0       	ldi	r18, 0x00	; 0
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	40 e8       	ldi	r20, 0x80	; 128
    298a:	5f e3       	ldi	r21, 0x3F	; 63
    298c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2990:	88 23       	and	r24, r24
    2992:	2c f4       	brge	.+10     	; 0x299e <Change_Password+0x692>
		__ticks = 1;
    2994:	81 e0       	ldi	r24, 0x01	; 1
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	9e af       	std	Y+62, r25	; 0x3e
    299a:	8d af       	std	Y+61, r24	; 0x3d
    299c:	46 c0       	rjmp	.+140    	; 0x2a2a <Change_Password+0x71e>
	else if (__tmp > 65535)
    299e:	fe 01       	movw	r30, r28
    29a0:	ff 96       	adiw	r30, 0x3f	; 63
    29a2:	60 81       	ld	r22, Z
    29a4:	71 81       	ldd	r23, Z+1	; 0x01
    29a6:	82 81       	ldd	r24, Z+2	; 0x02
    29a8:	93 81       	ldd	r25, Z+3	; 0x03
    29aa:	20 e0       	ldi	r18, 0x00	; 0
    29ac:	3f ef       	ldi	r19, 0xFF	; 255
    29ae:	4f e7       	ldi	r20, 0x7F	; 127
    29b0:	57 e4       	ldi	r21, 0x47	; 71
    29b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29b6:	18 16       	cp	r1, r24
    29b8:	64 f5       	brge	.+88     	; 0x2a12 <Change_Password+0x706>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ba:	fe 01       	movw	r30, r28
    29bc:	ed 5b       	subi	r30, 0xBD	; 189
    29be:	ff 4f       	sbci	r31, 0xFF	; 255
    29c0:	60 81       	ld	r22, Z
    29c2:	71 81       	ldd	r23, Z+1	; 0x01
    29c4:	82 81       	ldd	r24, Z+2	; 0x02
    29c6:	93 81       	ldd	r25, Z+3	; 0x03
    29c8:	20 e0       	ldi	r18, 0x00	; 0
    29ca:	30 e0       	ldi	r19, 0x00	; 0
    29cc:	40 e2       	ldi	r20, 0x20	; 32
    29ce:	51 e4       	ldi	r21, 0x41	; 65
    29d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d4:	dc 01       	movw	r26, r24
    29d6:	cb 01       	movw	r24, r22
    29d8:	bc 01       	movw	r22, r24
    29da:	cd 01       	movw	r24, r26
    29dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29e0:	dc 01       	movw	r26, r24
    29e2:	cb 01       	movw	r24, r22
    29e4:	9e af       	std	Y+62, r25	; 0x3e
    29e6:	8d af       	std	Y+61, r24	; 0x3d
    29e8:	0f c0       	rjmp	.+30     	; 0x2a08 <Change_Password+0x6fc>
    29ea:	88 ec       	ldi	r24, 0xC8	; 200
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	9c af       	std	Y+60, r25	; 0x3c
    29f0:	8b af       	std	Y+59, r24	; 0x3b
    29f2:	8b ad       	ldd	r24, Y+59	; 0x3b
    29f4:	9c ad       	ldd	r25, Y+60	; 0x3c
    29f6:	01 97       	sbiw	r24, 0x01	; 1
    29f8:	f1 f7       	brne	.-4      	; 0x29f6 <Change_Password+0x6ea>
    29fa:	9c af       	std	Y+60, r25	; 0x3c
    29fc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29fe:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a00:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a02:	01 97       	sbiw	r24, 0x01	; 1
    2a04:	9e af       	std	Y+62, r25	; 0x3e
    2a06:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a08:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a0a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a0c:	00 97       	sbiw	r24, 0x00	; 0
    2a0e:	69 f7       	brne	.-38     	; 0x29ea <Change_Password+0x6de>
    2a10:	16 c0       	rjmp	.+44     	; 0x2a3e <Change_Password+0x732>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a12:	fe 01       	movw	r30, r28
    2a14:	ff 96       	adiw	r30, 0x3f	; 63
    2a16:	60 81       	ld	r22, Z
    2a18:	71 81       	ldd	r23, Z+1	; 0x01
    2a1a:	82 81       	ldd	r24, Z+2	; 0x02
    2a1c:	93 81       	ldd	r25, Z+3	; 0x03
    2a1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a22:	dc 01       	movw	r26, r24
    2a24:	cb 01       	movw	r24, r22
    2a26:	9e af       	std	Y+62, r25	; 0x3e
    2a28:	8d af       	std	Y+61, r24	; 0x3d
    2a2a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a2c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a2e:	9a af       	std	Y+58, r25	; 0x3a
    2a30:	89 af       	std	Y+57, r24	; 0x39
    2a32:	89 ad       	ldd	r24, Y+57	; 0x39
    2a34:	9a ad       	ldd	r25, Y+58	; 0x3a
    2a36:	01 97       	sbiw	r24, 0x01	; 1
    2a38:	f1 f7       	brne	.-4      	; 0x2a36 <Change_Password+0x72a>
    2a3a:	9a af       	std	Y+58, r25	; 0x3a
    2a3c:	89 af       	std	Y+57, r24	; 0x39
					_delay_ms(200);
			LCD_displayStringRowColumn(0,0,"The password is");
    2a3e:	2e ea       	ldi	r18, 0xAE	; 174
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	80 e0       	ldi	r24, 0x00	; 0
    2a44:	60 e0       	ldi	r22, 0x00	; 0
    2a46:	a9 01       	movw	r20, r18
    2a48:	0e 94 8d 20 	call	0x411a	; 0x411a <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1,0,"not matching :( ");
    2a4c:	2e eb       	ldi	r18, 0xBE	; 190
    2a4e:	30 e0       	ldi	r19, 0x00	; 0
    2a50:	81 e0       	ldi	r24, 0x01	; 1
    2a52:	60 e0       	ldi	r22, 0x00	; 0
    2a54:	a9 01       	movw	r20, r18
    2a56:	0e 94 8d 20 	call	0x411a	; 0x411a <LCD_displayStringRowColumn>
    2a5a:	80 e0       	ldi	r24, 0x00	; 0
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	aa ef       	ldi	r26, 0xFA	; 250
    2a60:	b4 e4       	ldi	r27, 0x44	; 68
    2a62:	8d ab       	std	Y+53, r24	; 0x35
    2a64:	9e ab       	std	Y+54, r25	; 0x36
    2a66:	af ab       	std	Y+55, r26	; 0x37
    2a68:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a6a:	6d a9       	ldd	r22, Y+53	; 0x35
    2a6c:	7e a9       	ldd	r23, Y+54	; 0x36
    2a6e:	8f a9       	ldd	r24, Y+55	; 0x37
    2a70:	98 ad       	ldd	r25, Y+56	; 0x38
    2a72:	20 e0       	ldi	r18, 0x00	; 0
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	4a ef       	ldi	r20, 0xFA	; 250
    2a78:	54 e4       	ldi	r21, 0x44	; 68
    2a7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a7e:	dc 01       	movw	r26, r24
    2a80:	cb 01       	movw	r24, r22
    2a82:	89 ab       	std	Y+49, r24	; 0x31
    2a84:	9a ab       	std	Y+50, r25	; 0x32
    2a86:	ab ab       	std	Y+51, r26	; 0x33
    2a88:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a8a:	69 a9       	ldd	r22, Y+49	; 0x31
    2a8c:	7a a9       	ldd	r23, Y+50	; 0x32
    2a8e:	8b a9       	ldd	r24, Y+51	; 0x33
    2a90:	9c a9       	ldd	r25, Y+52	; 0x34
    2a92:	20 e0       	ldi	r18, 0x00	; 0
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	40 e8       	ldi	r20, 0x80	; 128
    2a98:	5f e3       	ldi	r21, 0x3F	; 63
    2a9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a9e:	88 23       	and	r24, r24
    2aa0:	2c f4       	brge	.+10     	; 0x2aac <Change_Password+0x7a0>
		__ticks = 1;
    2aa2:	81 e0       	ldi	r24, 0x01	; 1
    2aa4:	90 e0       	ldi	r25, 0x00	; 0
    2aa6:	98 ab       	std	Y+48, r25	; 0x30
    2aa8:	8f a7       	std	Y+47, r24	; 0x2f
    2aaa:	3f c0       	rjmp	.+126    	; 0x2b2a <Change_Password+0x81e>
	else if (__tmp > 65535)
    2aac:	69 a9       	ldd	r22, Y+49	; 0x31
    2aae:	7a a9       	ldd	r23, Y+50	; 0x32
    2ab0:	8b a9       	ldd	r24, Y+51	; 0x33
    2ab2:	9c a9       	ldd	r25, Y+52	; 0x34
    2ab4:	20 e0       	ldi	r18, 0x00	; 0
    2ab6:	3f ef       	ldi	r19, 0xFF	; 255
    2ab8:	4f e7       	ldi	r20, 0x7F	; 127
    2aba:	57 e4       	ldi	r21, 0x47	; 71
    2abc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ac0:	18 16       	cp	r1, r24
    2ac2:	4c f5       	brge	.+82     	; 0x2b16 <Change_Password+0x80a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ac4:	6d a9       	ldd	r22, Y+53	; 0x35
    2ac6:	7e a9       	ldd	r23, Y+54	; 0x36
    2ac8:	8f a9       	ldd	r24, Y+55	; 0x37
    2aca:	98 ad       	ldd	r25, Y+56	; 0x38
    2acc:	20 e0       	ldi	r18, 0x00	; 0
    2ace:	30 e0       	ldi	r19, 0x00	; 0
    2ad0:	40 e2       	ldi	r20, 0x20	; 32
    2ad2:	51 e4       	ldi	r21, 0x41	; 65
    2ad4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ad8:	dc 01       	movw	r26, r24
    2ada:	cb 01       	movw	r24, r22
    2adc:	bc 01       	movw	r22, r24
    2ade:	cd 01       	movw	r24, r26
    2ae0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ae4:	dc 01       	movw	r26, r24
    2ae6:	cb 01       	movw	r24, r22
    2ae8:	98 ab       	std	Y+48, r25	; 0x30
    2aea:	8f a7       	std	Y+47, r24	; 0x2f
    2aec:	0f c0       	rjmp	.+30     	; 0x2b0c <Change_Password+0x800>
    2aee:	88 ec       	ldi	r24, 0xC8	; 200
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	9e a7       	std	Y+46, r25	; 0x2e
    2af4:	8d a7       	std	Y+45, r24	; 0x2d
    2af6:	8d a5       	ldd	r24, Y+45	; 0x2d
    2af8:	9e a5       	ldd	r25, Y+46	; 0x2e
    2afa:	01 97       	sbiw	r24, 0x01	; 1
    2afc:	f1 f7       	brne	.-4      	; 0x2afa <Change_Password+0x7ee>
    2afe:	9e a7       	std	Y+46, r25	; 0x2e
    2b00:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b02:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b04:	98 a9       	ldd	r25, Y+48	; 0x30
    2b06:	01 97       	sbiw	r24, 0x01	; 1
    2b08:	98 ab       	std	Y+48, r25	; 0x30
    2b0a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b0c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b0e:	98 a9       	ldd	r25, Y+48	; 0x30
    2b10:	00 97       	sbiw	r24, 0x00	; 0
    2b12:	69 f7       	brne	.-38     	; 0x2aee <Change_Password+0x7e2>
    2b14:	14 c0       	rjmp	.+40     	; 0x2b3e <Change_Password+0x832>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b16:	69 a9       	ldd	r22, Y+49	; 0x31
    2b18:	7a a9       	ldd	r23, Y+50	; 0x32
    2b1a:	8b a9       	ldd	r24, Y+51	; 0x33
    2b1c:	9c a9       	ldd	r25, Y+52	; 0x34
    2b1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b22:	dc 01       	movw	r26, r24
    2b24:	cb 01       	movw	r24, r22
    2b26:	98 ab       	std	Y+48, r25	; 0x30
    2b28:	8f a7       	std	Y+47, r24	; 0x2f
    2b2a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b2c:	98 a9       	ldd	r25, Y+48	; 0x30
    2b2e:	9c a7       	std	Y+44, r25	; 0x2c
    2b30:	8b a7       	std	Y+43, r24	; 0x2b
    2b32:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b34:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b36:	01 97       	sbiw	r24, 0x01	; 1
    2b38:	f1 f7       	brne	.-4      	; 0x2b36 <Change_Password+0x82a>
    2b3a:	9c a7       	std	Y+44, r25	; 0x2c
    2b3c:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(2000);

			LCD_clearScreen(); /* clear the LCD display */
    2b3e:	0e 94 c9 20 	call	0x4192	; 0x4192 <LCD_clearScreen>
    2b42:	80 e0       	ldi	r24, 0x00	; 0
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	a8 e4       	ldi	r26, 0x48	; 72
    2b48:	b3 e4       	ldi	r27, 0x43	; 67
    2b4a:	8f a3       	std	Y+39, r24	; 0x27
    2b4c:	98 a7       	std	Y+40, r25	; 0x28
    2b4e:	a9 a7       	std	Y+41, r26	; 0x29
    2b50:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b52:	6f a1       	ldd	r22, Y+39	; 0x27
    2b54:	78 a5       	ldd	r23, Y+40	; 0x28
    2b56:	89 a5       	ldd	r24, Y+41	; 0x29
    2b58:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b5a:	20 e0       	ldi	r18, 0x00	; 0
    2b5c:	30 e0       	ldi	r19, 0x00	; 0
    2b5e:	4a ef       	ldi	r20, 0xFA	; 250
    2b60:	54 e4       	ldi	r21, 0x44	; 68
    2b62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b66:	dc 01       	movw	r26, r24
    2b68:	cb 01       	movw	r24, r22
    2b6a:	8b a3       	std	Y+35, r24	; 0x23
    2b6c:	9c a3       	std	Y+36, r25	; 0x24
    2b6e:	ad a3       	std	Y+37, r26	; 0x25
    2b70:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b72:	6b a1       	ldd	r22, Y+35	; 0x23
    2b74:	7c a1       	ldd	r23, Y+36	; 0x24
    2b76:	8d a1       	ldd	r24, Y+37	; 0x25
    2b78:	9e a1       	ldd	r25, Y+38	; 0x26
    2b7a:	20 e0       	ldi	r18, 0x00	; 0
    2b7c:	30 e0       	ldi	r19, 0x00	; 0
    2b7e:	40 e8       	ldi	r20, 0x80	; 128
    2b80:	5f e3       	ldi	r21, 0x3F	; 63
    2b82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b86:	88 23       	and	r24, r24
    2b88:	2c f4       	brge	.+10     	; 0x2b94 <Change_Password+0x888>
		__ticks = 1;
    2b8a:	81 e0       	ldi	r24, 0x01	; 1
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	9a a3       	std	Y+34, r25	; 0x22
    2b90:	89 a3       	std	Y+33, r24	; 0x21
    2b92:	3f c0       	rjmp	.+126    	; 0x2c12 <Change_Password+0x906>
	else if (__tmp > 65535)
    2b94:	6b a1       	ldd	r22, Y+35	; 0x23
    2b96:	7c a1       	ldd	r23, Y+36	; 0x24
    2b98:	8d a1       	ldd	r24, Y+37	; 0x25
    2b9a:	9e a1       	ldd	r25, Y+38	; 0x26
    2b9c:	20 e0       	ldi	r18, 0x00	; 0
    2b9e:	3f ef       	ldi	r19, 0xFF	; 255
    2ba0:	4f e7       	ldi	r20, 0x7F	; 127
    2ba2:	57 e4       	ldi	r21, 0x47	; 71
    2ba4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ba8:	18 16       	cp	r1, r24
    2baa:	4c f5       	brge	.+82     	; 0x2bfe <Change_Password+0x8f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bac:	6f a1       	ldd	r22, Y+39	; 0x27
    2bae:	78 a5       	ldd	r23, Y+40	; 0x28
    2bb0:	89 a5       	ldd	r24, Y+41	; 0x29
    2bb2:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bb4:	20 e0       	ldi	r18, 0x00	; 0
    2bb6:	30 e0       	ldi	r19, 0x00	; 0
    2bb8:	40 e2       	ldi	r20, 0x20	; 32
    2bba:	51 e4       	ldi	r21, 0x41	; 65
    2bbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bc0:	dc 01       	movw	r26, r24
    2bc2:	cb 01       	movw	r24, r22
    2bc4:	bc 01       	movw	r22, r24
    2bc6:	cd 01       	movw	r24, r26
    2bc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bcc:	dc 01       	movw	r26, r24
    2bce:	cb 01       	movw	r24, r22
    2bd0:	9a a3       	std	Y+34, r25	; 0x22
    2bd2:	89 a3       	std	Y+33, r24	; 0x21
    2bd4:	0f c0       	rjmp	.+30     	; 0x2bf4 <Change_Password+0x8e8>
    2bd6:	88 ec       	ldi	r24, 0xC8	; 200
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	98 a3       	std	Y+32, r25	; 0x20
    2bdc:	8f 8f       	std	Y+31, r24	; 0x1f
    2bde:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2be0:	98 a1       	ldd	r25, Y+32	; 0x20
    2be2:	01 97       	sbiw	r24, 0x01	; 1
    2be4:	f1 f7       	brne	.-4      	; 0x2be2 <Change_Password+0x8d6>
    2be6:	98 a3       	std	Y+32, r25	; 0x20
    2be8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bea:	89 a1       	ldd	r24, Y+33	; 0x21
    2bec:	9a a1       	ldd	r25, Y+34	; 0x22
    2bee:	01 97       	sbiw	r24, 0x01	; 1
    2bf0:	9a a3       	std	Y+34, r25	; 0x22
    2bf2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bf4:	89 a1       	ldd	r24, Y+33	; 0x21
    2bf6:	9a a1       	ldd	r25, Y+34	; 0x22
    2bf8:	00 97       	sbiw	r24, 0x00	; 0
    2bfa:	69 f7       	brne	.-38     	; 0x2bd6 <Change_Password+0x8ca>
    2bfc:	14 c0       	rjmp	.+40     	; 0x2c26 <Change_Password+0x91a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bfe:	6b a1       	ldd	r22, Y+35	; 0x23
    2c00:	7c a1       	ldd	r23, Y+36	; 0x24
    2c02:	8d a1       	ldd	r24, Y+37	; 0x25
    2c04:	9e a1       	ldd	r25, Y+38	; 0x26
    2c06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c0a:	dc 01       	movw	r26, r24
    2c0c:	cb 01       	movw	r24, r22
    2c0e:	9a a3       	std	Y+34, r25	; 0x22
    2c10:	89 a3       	std	Y+33, r24	; 0x21
    2c12:	89 a1       	ldd	r24, Y+33	; 0x21
    2c14:	9a a1       	ldd	r25, Y+34	; 0x22
    2c16:	9e 8f       	std	Y+30, r25	; 0x1e
    2c18:	8d 8f       	std	Y+29, r24	; 0x1d
    2c1a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c1c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c1e:	01 97       	sbiw	r24, 0x01	; 1
    2c20:	f1 f7       	brne	.-4      	; 0x2c1e <Change_Password+0x912>
    2c22:	9e 8f       	std	Y+30, r25	; 0x1e
    2c24:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(200);

		 LCD_displayStringRowColumn(0,0,"Old password:");
    2c26:	29 e0       	ldi	r18, 0x09	; 9
    2c28:	31 e0       	ldi	r19, 0x01	; 1
    2c2a:	80 e0       	ldi	r24, 0x00	; 0
    2c2c:	60 e0       	ldi	r22, 0x00	; 0
    2c2e:	a9 01       	movw	r20, r18
    2c30:	0e 94 8d 20 	call	0x411a	; 0x411a <LCD_displayStringRowColumn>

			 Enter_Send_Password();
    2c34:	0e 94 a3 05 	call	0xb46	; 0xb46 <Enter_Send_Password>
			saved_password_value_2nd=Check_Value_Func();
    2c38:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <Check_Value_Func>
    2c3c:	fe 01       	movw	r30, r28
    2c3e:	e1 58       	subi	r30, 0x81	; 129
    2c40:	ff 4f       	sbci	r31, 0xFF	; 255
    2c42:	80 83       	st	Z, r24
	   Enter_Send_Password();/* Enter the old password */
	   saved_password_value_2nd=  Check_Value_Func();
	   LCD_intgerToString( saved_password_value_2nd);
	   _delay_ms(200);

		while(saved_password_value_2nd==0)
    2c44:	fe 01       	movw	r30, r28
    2c46:	e1 58       	subi	r30, 0x81	; 129
    2c48:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4a:	80 81       	ld	r24, Z
    2c4c:	88 23       	and	r24, r24
    2c4e:	09 f4       	brne	.+2      	; 0x2c52 <Change_Password+0x946>
    2c50:	6f ce       	rjmp	.-802    	; 0x2930 <Change_Password+0x624>

			 Enter_Send_Password();
			saved_password_value_2nd=Check_Value_Func();

		}
	   if (saved_password_value_2nd==1){
    2c52:	fe 01       	movw	r30, r28
    2c54:	e1 58       	subi	r30, 0x81	; 129
    2c56:	ff 4f       	sbci	r31, 0xFF	; 255
    2c58:	80 81       	ld	r24, Z
    2c5a:	81 30       	cpi	r24, 0x01	; 1
    2c5c:	09 f0       	breq	.+2      	; 0x2c60 <Change_Password+0x954>
    2c5e:	f6 c0       	rjmp	.+492    	; 0x2e4c <Change_Password+0xb40>

	  	         LCD_clearScreen(); /* clear the LCD display */
    2c60:	0e 94 c9 20 	call	0x4192	; 0x4192 <LCD_clearScreen>
    2c64:	80 e0       	ldi	r24, 0x00	; 0
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	a8 e4       	ldi	r26, 0x48	; 72
    2c6a:	b3 e4       	ldi	r27, 0x43	; 67
    2c6c:	89 8f       	std	Y+25, r24	; 0x19
    2c6e:	9a 8f       	std	Y+26, r25	; 0x1a
    2c70:	ab 8f       	std	Y+27, r26	; 0x1b
    2c72:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c74:	69 8d       	ldd	r22, Y+25	; 0x19
    2c76:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c78:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c7c:	20 e0       	ldi	r18, 0x00	; 0
    2c7e:	30 e0       	ldi	r19, 0x00	; 0
    2c80:	4a ef       	ldi	r20, 0xFA	; 250
    2c82:	54 e4       	ldi	r21, 0x44	; 68
    2c84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c88:	dc 01       	movw	r26, r24
    2c8a:	cb 01       	movw	r24, r22
    2c8c:	8d 8b       	std	Y+21, r24	; 0x15
    2c8e:	9e 8b       	std	Y+22, r25	; 0x16
    2c90:	af 8b       	std	Y+23, r26	; 0x17
    2c92:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c94:	6d 89       	ldd	r22, Y+21	; 0x15
    2c96:	7e 89       	ldd	r23, Y+22	; 0x16
    2c98:	8f 89       	ldd	r24, Y+23	; 0x17
    2c9a:	98 8d       	ldd	r25, Y+24	; 0x18
    2c9c:	20 e0       	ldi	r18, 0x00	; 0
    2c9e:	30 e0       	ldi	r19, 0x00	; 0
    2ca0:	40 e8       	ldi	r20, 0x80	; 128
    2ca2:	5f e3       	ldi	r21, 0x3F	; 63
    2ca4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ca8:	88 23       	and	r24, r24
    2caa:	2c f4       	brge	.+10     	; 0x2cb6 <Change_Password+0x9aa>
		__ticks = 1;
    2cac:	81 e0       	ldi	r24, 0x01	; 1
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	9c 8b       	std	Y+20, r25	; 0x14
    2cb2:	8b 8b       	std	Y+19, r24	; 0x13
    2cb4:	3f c0       	rjmp	.+126    	; 0x2d34 <Change_Password+0xa28>
	else if (__tmp > 65535)
    2cb6:	6d 89       	ldd	r22, Y+21	; 0x15
    2cb8:	7e 89       	ldd	r23, Y+22	; 0x16
    2cba:	8f 89       	ldd	r24, Y+23	; 0x17
    2cbc:	98 8d       	ldd	r25, Y+24	; 0x18
    2cbe:	20 e0       	ldi	r18, 0x00	; 0
    2cc0:	3f ef       	ldi	r19, 0xFF	; 255
    2cc2:	4f e7       	ldi	r20, 0x7F	; 127
    2cc4:	57 e4       	ldi	r21, 0x47	; 71
    2cc6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cca:	18 16       	cp	r1, r24
    2ccc:	4c f5       	brge	.+82     	; 0x2d20 <Change_Password+0xa14>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cce:	69 8d       	ldd	r22, Y+25	; 0x19
    2cd0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cd2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cd4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cd6:	20 e0       	ldi	r18, 0x00	; 0
    2cd8:	30 e0       	ldi	r19, 0x00	; 0
    2cda:	40 e2       	ldi	r20, 0x20	; 32
    2cdc:	51 e4       	ldi	r21, 0x41	; 65
    2cde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ce2:	dc 01       	movw	r26, r24
    2ce4:	cb 01       	movw	r24, r22
    2ce6:	bc 01       	movw	r22, r24
    2ce8:	cd 01       	movw	r24, r26
    2cea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cee:	dc 01       	movw	r26, r24
    2cf0:	cb 01       	movw	r24, r22
    2cf2:	9c 8b       	std	Y+20, r25	; 0x14
    2cf4:	8b 8b       	std	Y+19, r24	; 0x13
    2cf6:	0f c0       	rjmp	.+30     	; 0x2d16 <Change_Password+0xa0a>
    2cf8:	88 ec       	ldi	r24, 0xC8	; 200
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	9a 8b       	std	Y+18, r25	; 0x12
    2cfe:	89 8b       	std	Y+17, r24	; 0x11
    2d00:	89 89       	ldd	r24, Y+17	; 0x11
    2d02:	9a 89       	ldd	r25, Y+18	; 0x12
    2d04:	01 97       	sbiw	r24, 0x01	; 1
    2d06:	f1 f7       	brne	.-4      	; 0x2d04 <Change_Password+0x9f8>
    2d08:	9a 8b       	std	Y+18, r25	; 0x12
    2d0a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d0c:	8b 89       	ldd	r24, Y+19	; 0x13
    2d0e:	9c 89       	ldd	r25, Y+20	; 0x14
    2d10:	01 97       	sbiw	r24, 0x01	; 1
    2d12:	9c 8b       	std	Y+20, r25	; 0x14
    2d14:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d16:	8b 89       	ldd	r24, Y+19	; 0x13
    2d18:	9c 89       	ldd	r25, Y+20	; 0x14
    2d1a:	00 97       	sbiw	r24, 0x00	; 0
    2d1c:	69 f7       	brne	.-38     	; 0x2cf8 <Change_Password+0x9ec>
    2d1e:	14 c0       	rjmp	.+40     	; 0x2d48 <Change_Password+0xa3c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d20:	6d 89       	ldd	r22, Y+21	; 0x15
    2d22:	7e 89       	ldd	r23, Y+22	; 0x16
    2d24:	8f 89       	ldd	r24, Y+23	; 0x17
    2d26:	98 8d       	ldd	r25, Y+24	; 0x18
    2d28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d2c:	dc 01       	movw	r26, r24
    2d2e:	cb 01       	movw	r24, r22
    2d30:	9c 8b       	std	Y+20, r25	; 0x14
    2d32:	8b 8b       	std	Y+19, r24	; 0x13
    2d34:	8b 89       	ldd	r24, Y+19	; 0x13
    2d36:	9c 89       	ldd	r25, Y+20	; 0x14
    2d38:	98 8b       	std	Y+16, r25	; 0x10
    2d3a:	8f 87       	std	Y+15, r24	; 0x0f
    2d3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d3e:	98 89       	ldd	r25, Y+16	; 0x10
    2d40:	01 97       	sbiw	r24, 0x01	; 1
    2d42:	f1 f7       	brne	.-4      	; 0x2d40 <Change_Password+0xa34>
    2d44:	98 8b       	std	Y+16, r25	; 0x10
    2d46:	8f 87       	std	Y+15, r24	; 0x0f
	  	          	 	_delay_ms(200);

	  	          	   LCD_displayStringRowColumn(0,0,"New password");
    2d48:	27 e1       	ldi	r18, 0x17	; 23
    2d4a:	31 e0       	ldi	r19, 0x01	; 1
    2d4c:	80 e0       	ldi	r24, 0x00	; 0
    2d4e:	60 e0       	ldi	r22, 0x00	; 0
    2d50:	a9 01       	movw	r20, r18
    2d52:	0e 94 8d 20 	call	0x411a	; 0x411a <LCD_displayStringRowColumn>
	  	          	   Enter_confirm_Password();/* Enter new password and confirm new password */
    2d56:	0e 94 74 06 	call	0xce8	; 0xce8 <Enter_confirm_Password>

	  	          	   LCD_displayStringRowColumn(1,0,"is saved :D");
    2d5a:	24 e2       	ldi	r18, 0x24	; 36
    2d5c:	31 e0       	ldi	r19, 0x01	; 1
    2d5e:	81 e0       	ldi	r24, 0x01	; 1
    2d60:	60 e0       	ldi	r22, 0x00	; 0
    2d62:	a9 01       	movw	r20, r18
    2d64:	0e 94 8d 20 	call	0x411a	; 0x411a <LCD_displayStringRowColumn>
    2d68:	80 e0       	ldi	r24, 0x00	; 0
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	aa ef       	ldi	r26, 0xFA	; 250
    2d6e:	b4 e4       	ldi	r27, 0x44	; 68
    2d70:	8b 87       	std	Y+11, r24	; 0x0b
    2d72:	9c 87       	std	Y+12, r25	; 0x0c
    2d74:	ad 87       	std	Y+13, r26	; 0x0d
    2d76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d78:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d80:	20 e0       	ldi	r18, 0x00	; 0
    2d82:	30 e0       	ldi	r19, 0x00	; 0
    2d84:	4a ef       	ldi	r20, 0xFA	; 250
    2d86:	54 e4       	ldi	r21, 0x44	; 68
    2d88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d8c:	dc 01       	movw	r26, r24
    2d8e:	cb 01       	movw	r24, r22
    2d90:	8f 83       	std	Y+7, r24	; 0x07
    2d92:	98 87       	std	Y+8, r25	; 0x08
    2d94:	a9 87       	std	Y+9, r26	; 0x09
    2d96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d98:	6f 81       	ldd	r22, Y+7	; 0x07
    2d9a:	78 85       	ldd	r23, Y+8	; 0x08
    2d9c:	89 85       	ldd	r24, Y+9	; 0x09
    2d9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2da0:	20 e0       	ldi	r18, 0x00	; 0
    2da2:	30 e0       	ldi	r19, 0x00	; 0
    2da4:	40 e8       	ldi	r20, 0x80	; 128
    2da6:	5f e3       	ldi	r21, 0x3F	; 63
    2da8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dac:	88 23       	and	r24, r24
    2dae:	2c f4       	brge	.+10     	; 0x2dba <Change_Password+0xaae>
		__ticks = 1;
    2db0:	81 e0       	ldi	r24, 0x01	; 1
    2db2:	90 e0       	ldi	r25, 0x00	; 0
    2db4:	9e 83       	std	Y+6, r25	; 0x06
    2db6:	8d 83       	std	Y+5, r24	; 0x05
    2db8:	3f c0       	rjmp	.+126    	; 0x2e38 <Change_Password+0xb2c>
	else if (__tmp > 65535)
    2dba:	6f 81       	ldd	r22, Y+7	; 0x07
    2dbc:	78 85       	ldd	r23, Y+8	; 0x08
    2dbe:	89 85       	ldd	r24, Y+9	; 0x09
    2dc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dc2:	20 e0       	ldi	r18, 0x00	; 0
    2dc4:	3f ef       	ldi	r19, 0xFF	; 255
    2dc6:	4f e7       	ldi	r20, 0x7F	; 127
    2dc8:	57 e4       	ldi	r21, 0x47	; 71
    2dca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dce:	18 16       	cp	r1, r24
    2dd0:	4c f5       	brge	.+82     	; 0x2e24 <Change_Password+0xb18>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dda:	20 e0       	ldi	r18, 0x00	; 0
    2ddc:	30 e0       	ldi	r19, 0x00	; 0
    2dde:	40 e2       	ldi	r20, 0x20	; 32
    2de0:	51 e4       	ldi	r21, 0x41	; 65
    2de2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2de6:	dc 01       	movw	r26, r24
    2de8:	cb 01       	movw	r24, r22
    2dea:	bc 01       	movw	r22, r24
    2dec:	cd 01       	movw	r24, r26
    2dee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2df2:	dc 01       	movw	r26, r24
    2df4:	cb 01       	movw	r24, r22
    2df6:	9e 83       	std	Y+6, r25	; 0x06
    2df8:	8d 83       	std	Y+5, r24	; 0x05
    2dfa:	0f c0       	rjmp	.+30     	; 0x2e1a <Change_Password+0xb0e>
    2dfc:	88 ec       	ldi	r24, 0xC8	; 200
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	9c 83       	std	Y+4, r25	; 0x04
    2e02:	8b 83       	std	Y+3, r24	; 0x03
    2e04:	8b 81       	ldd	r24, Y+3	; 0x03
    2e06:	9c 81       	ldd	r25, Y+4	; 0x04
    2e08:	01 97       	sbiw	r24, 0x01	; 1
    2e0a:	f1 f7       	brne	.-4      	; 0x2e08 <Change_Password+0xafc>
    2e0c:	9c 83       	std	Y+4, r25	; 0x04
    2e0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e10:	8d 81       	ldd	r24, Y+5	; 0x05
    2e12:	9e 81       	ldd	r25, Y+6	; 0x06
    2e14:	01 97       	sbiw	r24, 0x01	; 1
    2e16:	9e 83       	std	Y+6, r25	; 0x06
    2e18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e1a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e1c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e1e:	00 97       	sbiw	r24, 0x00	; 0
    2e20:	69 f7       	brne	.-38     	; 0x2dfc <Change_Password+0xaf0>
    2e22:	14 c0       	rjmp	.+40     	; 0x2e4c <Change_Password+0xb40>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e24:	6f 81       	ldd	r22, Y+7	; 0x07
    2e26:	78 85       	ldd	r23, Y+8	; 0x08
    2e28:	89 85       	ldd	r24, Y+9	; 0x09
    2e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e30:	dc 01       	movw	r26, r24
    2e32:	cb 01       	movw	r24, r22
    2e34:	9e 83       	std	Y+6, r25	; 0x06
    2e36:	8d 83       	std	Y+5, r24	; 0x05
    2e38:	8d 81       	ldd	r24, Y+5	; 0x05
    2e3a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e3c:	9a 83       	std	Y+2, r25	; 0x02
    2e3e:	89 83       	std	Y+1, r24	; 0x01
    2e40:	89 81       	ldd	r24, Y+1	; 0x01
    2e42:	9a 81       	ldd	r25, Y+2	; 0x02
    2e44:	01 97       	sbiw	r24, 0x01	; 1
    2e46:	f1 f7       	brne	.-4      	; 0x2e44 <Change_Password+0xb38>
    2e48:	9a 83       	std	Y+2, r25	; 0x02
    2e4a:	89 83       	std	Y+1, r24	; 0x01

	  	          		   _delay_ms(2000); }

}
    2e4c:	c0 58       	subi	r28, 0x80	; 128
    2e4e:	df 4f       	sbci	r29, 0xFF	; 255
    2e50:	0f b6       	in	r0, 0x3f	; 63
    2e52:	f8 94       	cli
    2e54:	de bf       	out	0x3e, r29	; 62
    2e56:	0f be       	out	0x3f, r0	; 63
    2e58:	cd bf       	out	0x3d, r28	; 61
    2e5a:	cf 91       	pop	r28
    2e5c:	df 91       	pop	r29
    2e5e:	1f 91       	pop	r17
    2e60:	0f 91       	pop	r16
    2e62:	08 95       	ret

00002e64 <main>:
/*****************(Main Function)*************************************************
/****************************************************************************************************************/


int main(void)
{
    2e64:	0f 93       	push	r16
    2e66:	1f 93       	push	r17
    2e68:	df 93       	push	r29
    2e6a:	cf 93       	push	r28
    2e6c:	cd b7       	in	r28, 0x3d	; 61
    2e6e:	de b7       	in	r29, 0x3e	; 62
    2e70:	c2 55       	subi	r28, 0x52	; 82
    2e72:	d0 40       	sbci	r29, 0x00	; 0
    2e74:	0f b6       	in	r0, 0x3f	; 63
    2e76:	f8 94       	cli
    2e78:	de bf       	out	0x3e, r29	; 62
    2e7a:	0f be       	out	0x3f, r0	; 63
    2e7c:	cd bf       	out	0x3d, r28	; 61
	uint8 mode;
	uint8 check_value_1st_mode;
	uint8 eeprom_read ; /*variable to  receive variable to  show the 1st enter & comfirm password only once forever */

	/* Create configuration structure for Timer driver */
	Timer_ConfigType Timer_Config = {F_CPU_1024,NORMAL,5,250};
    2e7e:	fe 01       	movw	r30, r28
    2e80:	e5 5b       	subi	r30, 0xB5	; 181
    2e82:	ff 4f       	sbci	r31, 0xFF	; 255
    2e84:	85 e0       	ldi	r24, 0x05	; 5
    2e86:	80 83       	st	Z, r24
    2e88:	fe 01       	movw	r30, r28
    2e8a:	e5 5b       	subi	r30, 0xB5	; 181
    2e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8e:	11 82       	std	Z+1, r1	; 0x01
    2e90:	fe 01       	movw	r30, r28
    2e92:	e5 5b       	subi	r30, 0xB5	; 181
    2e94:	ff 4f       	sbci	r31, 0xFF	; 255
    2e96:	85 e0       	ldi	r24, 0x05	; 5
    2e98:	82 83       	std	Z+2, r24	; 0x02
    2e9a:	fe 01       	movw	r30, r28
    2e9c:	e5 5b       	subi	r30, 0xB5	; 181
    2e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea0:	8a ef       	ldi	r24, 0xFA	; 250
    2ea2:	83 83       	std	Z+3, r24	; 0x03
	/* Create configuration structure for UART driver */
	UART_ConfigType uart_Config = {ONE_STOP_BIT,ASYNCHRONOUS,DISABLE,ASYNCHRONOUS_DOUBLE_SPEED_MODE};
    2ea4:	fe 01       	movw	r30, r28
    2ea6:	e1 5b       	subi	r30, 0xB1	; 177
    2ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eaa:	10 82       	st	Z, r1
    2eac:	fe 01       	movw	r30, r28
    2eae:	e1 5b       	subi	r30, 0xB1	; 177
    2eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb2:	11 82       	std	Z+1, r1	; 0x01
    2eb4:	fe 01       	movw	r30, r28
    2eb6:	e1 5b       	subi	r30, 0xB1	; 177
    2eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eba:	12 82       	std	Z+2, r1	; 0x02
    2ebc:	fe 01       	movw	r30, r28
    2ebe:	e1 5b       	subi	r30, 0xB1	; 177
    2ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec2:	81 e0       	ldi	r24, 0x01	; 1
    2ec4:	83 83       	std	Z+3, r24	; 0x03


	UART_init(& uart_Config );	/* Init UART */
    2ec6:	ce 01       	movw	r24, r28
    2ec8:	81 5b       	subi	r24, 0xB1	; 177
    2eca:	9f 4f       	sbci	r25, 0xFF	; 255
    2ecc:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <UART_init>
	LCD_init();	  /* Init LCD */
    2ed0:	0e 94 0f 1c 	call	0x381e	; 0x381e <LCD_init>

/****************************************************************************************************************/
/********(1st interfacing screen with owner-[1st mode] enter password for 1st time)*************************************************/

	UART_sendByte(M2_READY);
    2ed4:	80 e1       	ldi	r24, 0x10	; 16
    2ed6:	0e 94 4f 21 	call	0x429e	; 0x429e <UART_sendByte>
		 eeprom_read  = UART_recieveByte(); /* receive  value  to the 2nd MC using uart */
    2eda:	0e 94 66 21 	call	0x42cc	; 0x42cc <UART_recieveByte>
    2ede:	fe 01       	movw	r30, r28
    2ee0:	e9 5b       	subi	r30, 0xB9	; 185
    2ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee4:	80 83       	st	Z, r24

if ( eeprom_read==0xff)
    2ee6:	fe 01       	movw	r30, r28
    2ee8:	e9 5b       	subi	r30, 0xB9	; 185
    2eea:	ff 4f       	sbci	r31, 0xFF	; 255
    2eec:	80 81       	ld	r24, Z
    2eee:	8f 3f       	cpi	r24, 0xFF	; 255
    2ef0:	09 f0       	breq	.+2      	; 0x2ef4 <main+0x90>
    2ef2:	1e c1       	rjmp	.+572    	; 0x3130 <main+0x2cc>
{
	Enter_confirm_Password();
    2ef4:	0e 94 74 06 	call	0xce8	; 0xce8 <Enter_confirm_Password>
	check_value_1st_mode=Check_Value_Func();
    2ef8:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <Check_Value_Func>
    2efc:	fe 01       	movw	r30, r28
    2efe:	e8 5b       	subi	r30, 0xB8	; 184
    2f00:	ff 4f       	sbci	r31, 0xFF	; 255
    2f02:	80 83       	st	Z, r24
    2f04:	08 c0       	rjmp	.+16     	; 0x2f16 <main+0xb2>

while(check_value_1st_mode==0)
{
	Enter_confirm_Password();
    2f06:	0e 94 74 06 	call	0xce8	; 0xce8 <Enter_confirm_Password>
	check_value_1st_mode=Check_Value_Func();
    2f0a:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <Check_Value_Func>
    2f0e:	fe 01       	movw	r30, r28
    2f10:	e8 5b       	subi	r30, 0xB8	; 184
    2f12:	ff 4f       	sbci	r31, 0xFF	; 255
    2f14:	80 83       	st	Z, r24
if ( eeprom_read==0xff)
{
	Enter_confirm_Password();
	check_value_1st_mode=Check_Value_Func();

while(check_value_1st_mode==0)
    2f16:	fe 01       	movw	r30, r28
    2f18:	e8 5b       	subi	r30, 0xB8	; 184
    2f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1c:	80 81       	ld	r24, Z
    2f1e:	88 23       	and	r24, r24
    2f20:	91 f3       	breq	.-28     	; 0x2f06 <main+0xa2>
{
	Enter_confirm_Password();
	check_value_1st_mode=Check_Value_Func();

}
if (check_value_1st_mode==1)
    2f22:	fe 01       	movw	r30, r28
    2f24:	e8 5b       	subi	r30, 0xB8	; 184
    2f26:	ff 4f       	sbci	r31, 0xFF	; 255
    2f28:	80 81       	ld	r24, Z
    2f2a:	81 30       	cpi	r24, 0x01	; 1
    2f2c:	09 f0       	breq	.+2      	; 0x2f30 <main+0xcc>
    2f2e:	00 c1       	rjmp	.+512    	; 0x3130 <main+0x2cc>
{
	LCD_clearScreen(); /* clear the LCD display */
    2f30:	0e 94 c9 20 	call	0x4192	; 0x4192 <LCD_clearScreen>
    2f34:	fe 01       	movw	r30, r28
    2f36:	ed 5b       	subi	r30, 0xBD	; 189
    2f38:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3a:	80 e0       	ldi	r24, 0x00	; 0
    2f3c:	90 e0       	ldi	r25, 0x00	; 0
    2f3e:	a8 e4       	ldi	r26, 0x48	; 72
    2f40:	b3 e4       	ldi	r27, 0x43	; 67
    2f42:	80 83       	st	Z, r24
    2f44:	91 83       	std	Z+1, r25	; 0x01
    2f46:	a2 83       	std	Z+2, r26	; 0x02
    2f48:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f4a:	8e 01       	movw	r16, r28
    2f4c:	01 5c       	subi	r16, 0xC1	; 193
    2f4e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f50:	fe 01       	movw	r30, r28
    2f52:	ed 5b       	subi	r30, 0xBD	; 189
    2f54:	ff 4f       	sbci	r31, 0xFF	; 255
    2f56:	60 81       	ld	r22, Z
    2f58:	71 81       	ldd	r23, Z+1	; 0x01
    2f5a:	82 81       	ldd	r24, Z+2	; 0x02
    2f5c:	93 81       	ldd	r25, Z+3	; 0x03
    2f5e:	20 e0       	ldi	r18, 0x00	; 0
    2f60:	30 e0       	ldi	r19, 0x00	; 0
    2f62:	4a ef       	ldi	r20, 0xFA	; 250
    2f64:	54 e4       	ldi	r21, 0x44	; 68
    2f66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f6a:	dc 01       	movw	r26, r24
    2f6c:	cb 01       	movw	r24, r22
    2f6e:	f8 01       	movw	r30, r16
    2f70:	80 83       	st	Z, r24
    2f72:	91 83       	std	Z+1, r25	; 0x01
    2f74:	a2 83       	std	Z+2, r26	; 0x02
    2f76:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f78:	fe 01       	movw	r30, r28
    2f7a:	ff 96       	adiw	r30, 0x3f	; 63
    2f7c:	60 81       	ld	r22, Z
    2f7e:	71 81       	ldd	r23, Z+1	; 0x01
    2f80:	82 81       	ldd	r24, Z+2	; 0x02
    2f82:	93 81       	ldd	r25, Z+3	; 0x03
    2f84:	20 e0       	ldi	r18, 0x00	; 0
    2f86:	30 e0       	ldi	r19, 0x00	; 0
    2f88:	40 e8       	ldi	r20, 0x80	; 128
    2f8a:	5f e3       	ldi	r21, 0x3F	; 63
    2f8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f90:	88 23       	and	r24, r24
    2f92:	2c f4       	brge	.+10     	; 0x2f9e <main+0x13a>
		__ticks = 1;
    2f94:	81 e0       	ldi	r24, 0x01	; 1
    2f96:	90 e0       	ldi	r25, 0x00	; 0
    2f98:	9e af       	std	Y+62, r25	; 0x3e
    2f9a:	8d af       	std	Y+61, r24	; 0x3d
    2f9c:	46 c0       	rjmp	.+140    	; 0x302a <main+0x1c6>
	else if (__tmp > 65535)
    2f9e:	fe 01       	movw	r30, r28
    2fa0:	ff 96       	adiw	r30, 0x3f	; 63
    2fa2:	60 81       	ld	r22, Z
    2fa4:	71 81       	ldd	r23, Z+1	; 0x01
    2fa6:	82 81       	ldd	r24, Z+2	; 0x02
    2fa8:	93 81       	ldd	r25, Z+3	; 0x03
    2faa:	20 e0       	ldi	r18, 0x00	; 0
    2fac:	3f ef       	ldi	r19, 0xFF	; 255
    2fae:	4f e7       	ldi	r20, 0x7F	; 127
    2fb0:	57 e4       	ldi	r21, 0x47	; 71
    2fb2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fb6:	18 16       	cp	r1, r24
    2fb8:	64 f5       	brge	.+88     	; 0x3012 <main+0x1ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fba:	fe 01       	movw	r30, r28
    2fbc:	ed 5b       	subi	r30, 0xBD	; 189
    2fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc0:	60 81       	ld	r22, Z
    2fc2:	71 81       	ldd	r23, Z+1	; 0x01
    2fc4:	82 81       	ldd	r24, Z+2	; 0x02
    2fc6:	93 81       	ldd	r25, Z+3	; 0x03
    2fc8:	20 e0       	ldi	r18, 0x00	; 0
    2fca:	30 e0       	ldi	r19, 0x00	; 0
    2fcc:	40 e2       	ldi	r20, 0x20	; 32
    2fce:	51 e4       	ldi	r21, 0x41	; 65
    2fd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fd4:	dc 01       	movw	r26, r24
    2fd6:	cb 01       	movw	r24, r22
    2fd8:	bc 01       	movw	r22, r24
    2fda:	cd 01       	movw	r24, r26
    2fdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fe0:	dc 01       	movw	r26, r24
    2fe2:	cb 01       	movw	r24, r22
    2fe4:	9e af       	std	Y+62, r25	; 0x3e
    2fe6:	8d af       	std	Y+61, r24	; 0x3d
    2fe8:	0f c0       	rjmp	.+30     	; 0x3008 <main+0x1a4>
    2fea:	88 ec       	ldi	r24, 0xC8	; 200
    2fec:	90 e0       	ldi	r25, 0x00	; 0
    2fee:	9c af       	std	Y+60, r25	; 0x3c
    2ff0:	8b af       	std	Y+59, r24	; 0x3b
    2ff2:	8b ad       	ldd	r24, Y+59	; 0x3b
    2ff4:	9c ad       	ldd	r25, Y+60	; 0x3c
    2ff6:	01 97       	sbiw	r24, 0x01	; 1
    2ff8:	f1 f7       	brne	.-4      	; 0x2ff6 <main+0x192>
    2ffa:	9c af       	std	Y+60, r25	; 0x3c
    2ffc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ffe:	8d ad       	ldd	r24, Y+61	; 0x3d
    3000:	9e ad       	ldd	r25, Y+62	; 0x3e
    3002:	01 97       	sbiw	r24, 0x01	; 1
    3004:	9e af       	std	Y+62, r25	; 0x3e
    3006:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3008:	8d ad       	ldd	r24, Y+61	; 0x3d
    300a:	9e ad       	ldd	r25, Y+62	; 0x3e
    300c:	00 97       	sbiw	r24, 0x00	; 0
    300e:	69 f7       	brne	.-38     	; 0x2fea <main+0x186>
    3010:	16 c0       	rjmp	.+44     	; 0x303e <main+0x1da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3012:	fe 01       	movw	r30, r28
    3014:	ff 96       	adiw	r30, 0x3f	; 63
    3016:	60 81       	ld	r22, Z
    3018:	71 81       	ldd	r23, Z+1	; 0x01
    301a:	82 81       	ldd	r24, Z+2	; 0x02
    301c:	93 81       	ldd	r25, Z+3	; 0x03
    301e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3022:	dc 01       	movw	r26, r24
    3024:	cb 01       	movw	r24, r22
    3026:	9e af       	std	Y+62, r25	; 0x3e
    3028:	8d af       	std	Y+61, r24	; 0x3d
    302a:	8d ad       	ldd	r24, Y+61	; 0x3d
    302c:	9e ad       	ldd	r25, Y+62	; 0x3e
    302e:	9a af       	std	Y+58, r25	; 0x3a
    3030:	89 af       	std	Y+57, r24	; 0x39
    3032:	89 ad       	ldd	r24, Y+57	; 0x39
    3034:	9a ad       	ldd	r25, Y+58	; 0x3a
    3036:	01 97       	sbiw	r24, 0x01	; 1
    3038:	f1 f7       	brne	.-4      	; 0x3036 <main+0x1d2>
    303a:	9a af       	std	Y+58, r25	; 0x3a
    303c:	89 af       	std	Y+57, r24	; 0x39
		    _delay_ms(200);

		   LCD_displayStringRowColumn(0,0,"Save password :D");
    303e:	20 e3       	ldi	r18, 0x30	; 48
    3040:	31 e0       	ldi	r19, 0x01	; 1
    3042:	80 e0       	ldi	r24, 0x00	; 0
    3044:	60 e0       	ldi	r22, 0x00	; 0
    3046:	a9 01       	movw	r20, r18
    3048:	0e 94 8d 20 	call	0x411a	; 0x411a <LCD_displayStringRowColumn>
    304c:	80 e0       	ldi	r24, 0x00	; 0
    304e:	90 e0       	ldi	r25, 0x00	; 0
    3050:	aa e7       	ldi	r26, 0x7A	; 122
    3052:	b4 e4       	ldi	r27, 0x44	; 68
    3054:	8d ab       	std	Y+53, r24	; 0x35
    3056:	9e ab       	std	Y+54, r25	; 0x36
    3058:	af ab       	std	Y+55, r26	; 0x37
    305a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    305c:	6d a9       	ldd	r22, Y+53	; 0x35
    305e:	7e a9       	ldd	r23, Y+54	; 0x36
    3060:	8f a9       	ldd	r24, Y+55	; 0x37
    3062:	98 ad       	ldd	r25, Y+56	; 0x38
    3064:	20 e0       	ldi	r18, 0x00	; 0
    3066:	30 e0       	ldi	r19, 0x00	; 0
    3068:	4a ef       	ldi	r20, 0xFA	; 250
    306a:	54 e4       	ldi	r21, 0x44	; 68
    306c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3070:	dc 01       	movw	r26, r24
    3072:	cb 01       	movw	r24, r22
    3074:	89 ab       	std	Y+49, r24	; 0x31
    3076:	9a ab       	std	Y+50, r25	; 0x32
    3078:	ab ab       	std	Y+51, r26	; 0x33
    307a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    307c:	69 a9       	ldd	r22, Y+49	; 0x31
    307e:	7a a9       	ldd	r23, Y+50	; 0x32
    3080:	8b a9       	ldd	r24, Y+51	; 0x33
    3082:	9c a9       	ldd	r25, Y+52	; 0x34
    3084:	20 e0       	ldi	r18, 0x00	; 0
    3086:	30 e0       	ldi	r19, 0x00	; 0
    3088:	40 e8       	ldi	r20, 0x80	; 128
    308a:	5f e3       	ldi	r21, 0x3F	; 63
    308c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3090:	88 23       	and	r24, r24
    3092:	2c f4       	brge	.+10     	; 0x309e <main+0x23a>
		__ticks = 1;
    3094:	81 e0       	ldi	r24, 0x01	; 1
    3096:	90 e0       	ldi	r25, 0x00	; 0
    3098:	98 ab       	std	Y+48, r25	; 0x30
    309a:	8f a7       	std	Y+47, r24	; 0x2f
    309c:	3f c0       	rjmp	.+126    	; 0x311c <main+0x2b8>
	else if (__tmp > 65535)
    309e:	69 a9       	ldd	r22, Y+49	; 0x31
    30a0:	7a a9       	ldd	r23, Y+50	; 0x32
    30a2:	8b a9       	ldd	r24, Y+51	; 0x33
    30a4:	9c a9       	ldd	r25, Y+52	; 0x34
    30a6:	20 e0       	ldi	r18, 0x00	; 0
    30a8:	3f ef       	ldi	r19, 0xFF	; 255
    30aa:	4f e7       	ldi	r20, 0x7F	; 127
    30ac:	57 e4       	ldi	r21, 0x47	; 71
    30ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30b2:	18 16       	cp	r1, r24
    30b4:	4c f5       	brge	.+82     	; 0x3108 <main+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30b6:	6d a9       	ldd	r22, Y+53	; 0x35
    30b8:	7e a9       	ldd	r23, Y+54	; 0x36
    30ba:	8f a9       	ldd	r24, Y+55	; 0x37
    30bc:	98 ad       	ldd	r25, Y+56	; 0x38
    30be:	20 e0       	ldi	r18, 0x00	; 0
    30c0:	30 e0       	ldi	r19, 0x00	; 0
    30c2:	40 e2       	ldi	r20, 0x20	; 32
    30c4:	51 e4       	ldi	r21, 0x41	; 65
    30c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ca:	dc 01       	movw	r26, r24
    30cc:	cb 01       	movw	r24, r22
    30ce:	bc 01       	movw	r22, r24
    30d0:	cd 01       	movw	r24, r26
    30d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30d6:	dc 01       	movw	r26, r24
    30d8:	cb 01       	movw	r24, r22
    30da:	98 ab       	std	Y+48, r25	; 0x30
    30dc:	8f a7       	std	Y+47, r24	; 0x2f
    30de:	0f c0       	rjmp	.+30     	; 0x30fe <main+0x29a>
    30e0:	88 ec       	ldi	r24, 0xC8	; 200
    30e2:	90 e0       	ldi	r25, 0x00	; 0
    30e4:	9e a7       	std	Y+46, r25	; 0x2e
    30e6:	8d a7       	std	Y+45, r24	; 0x2d
    30e8:	8d a5       	ldd	r24, Y+45	; 0x2d
    30ea:	9e a5       	ldd	r25, Y+46	; 0x2e
    30ec:	01 97       	sbiw	r24, 0x01	; 1
    30ee:	f1 f7       	brne	.-4      	; 0x30ec <main+0x288>
    30f0:	9e a7       	std	Y+46, r25	; 0x2e
    30f2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    30f6:	98 a9       	ldd	r25, Y+48	; 0x30
    30f8:	01 97       	sbiw	r24, 0x01	; 1
    30fa:	98 ab       	std	Y+48, r25	; 0x30
    30fc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    3100:	98 a9       	ldd	r25, Y+48	; 0x30
    3102:	00 97       	sbiw	r24, 0x00	; 0
    3104:	69 f7       	brne	.-38     	; 0x30e0 <main+0x27c>
    3106:	14 c0       	rjmp	.+40     	; 0x3130 <main+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3108:	69 a9       	ldd	r22, Y+49	; 0x31
    310a:	7a a9       	ldd	r23, Y+50	; 0x32
    310c:	8b a9       	ldd	r24, Y+51	; 0x33
    310e:	9c a9       	ldd	r25, Y+52	; 0x34
    3110:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3114:	dc 01       	movw	r26, r24
    3116:	cb 01       	movw	r24, r22
    3118:	98 ab       	std	Y+48, r25	; 0x30
    311a:	8f a7       	std	Y+47, r24	; 0x2f
    311c:	8f a5       	ldd	r24, Y+47	; 0x2f
    311e:	98 a9       	ldd	r25, Y+48	; 0x30
    3120:	9c a7       	std	Y+44, r25	; 0x2c
    3122:	8b a7       	std	Y+43, r24	; 0x2b
    3124:	8b a5       	ldd	r24, Y+43	; 0x2b
    3126:	9c a5       	ldd	r25, Y+44	; 0x2c
    3128:	01 97       	sbiw	r24, 0x01	; 1
    312a:	f1 f7       	brne	.-4      	; 0x3128 <main+0x2c4>
    312c:	9c a7       	std	Y+44, r25	; 0x2c
    312e:	8b a7       	std	Y+43, r24	; 0x2b
/****************************************************************************************************************/
/******(2st interfacing screen with owner- to select Open Door or Change Password )*************************************************/

    while(1)
    {
    	LCD_clearScreen(); /* clear the LCD display */
    3130:	0e 94 c9 20 	call	0x4192	; 0x4192 <LCD_clearScreen>
    3134:	80 e0       	ldi	r24, 0x00	; 0
    3136:	90 e0       	ldi	r25, 0x00	; 0
    3138:	a8 e4       	ldi	r26, 0x48	; 72
    313a:	b3 e4       	ldi	r27, 0x43	; 67
    313c:	8f a3       	std	Y+39, r24	; 0x27
    313e:	98 a7       	std	Y+40, r25	; 0x28
    3140:	a9 a7       	std	Y+41, r26	; 0x29
    3142:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3144:	6f a1       	ldd	r22, Y+39	; 0x27
    3146:	78 a5       	ldd	r23, Y+40	; 0x28
    3148:	89 a5       	ldd	r24, Y+41	; 0x29
    314a:	9a a5       	ldd	r25, Y+42	; 0x2a
    314c:	20 e0       	ldi	r18, 0x00	; 0
    314e:	30 e0       	ldi	r19, 0x00	; 0
    3150:	4a ef       	ldi	r20, 0xFA	; 250
    3152:	54 e4       	ldi	r21, 0x44	; 68
    3154:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3158:	dc 01       	movw	r26, r24
    315a:	cb 01       	movw	r24, r22
    315c:	8b a3       	std	Y+35, r24	; 0x23
    315e:	9c a3       	std	Y+36, r25	; 0x24
    3160:	ad a3       	std	Y+37, r26	; 0x25
    3162:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3164:	6b a1       	ldd	r22, Y+35	; 0x23
    3166:	7c a1       	ldd	r23, Y+36	; 0x24
    3168:	8d a1       	ldd	r24, Y+37	; 0x25
    316a:	9e a1       	ldd	r25, Y+38	; 0x26
    316c:	20 e0       	ldi	r18, 0x00	; 0
    316e:	30 e0       	ldi	r19, 0x00	; 0
    3170:	40 e8       	ldi	r20, 0x80	; 128
    3172:	5f e3       	ldi	r21, 0x3F	; 63
    3174:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3178:	88 23       	and	r24, r24
    317a:	2c f4       	brge	.+10     	; 0x3186 <main+0x322>
		__ticks = 1;
    317c:	81 e0       	ldi	r24, 0x01	; 1
    317e:	90 e0       	ldi	r25, 0x00	; 0
    3180:	9a a3       	std	Y+34, r25	; 0x22
    3182:	89 a3       	std	Y+33, r24	; 0x21
    3184:	3f c0       	rjmp	.+126    	; 0x3204 <main+0x3a0>
	else if (__tmp > 65535)
    3186:	6b a1       	ldd	r22, Y+35	; 0x23
    3188:	7c a1       	ldd	r23, Y+36	; 0x24
    318a:	8d a1       	ldd	r24, Y+37	; 0x25
    318c:	9e a1       	ldd	r25, Y+38	; 0x26
    318e:	20 e0       	ldi	r18, 0x00	; 0
    3190:	3f ef       	ldi	r19, 0xFF	; 255
    3192:	4f e7       	ldi	r20, 0x7F	; 127
    3194:	57 e4       	ldi	r21, 0x47	; 71
    3196:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    319a:	18 16       	cp	r1, r24
    319c:	4c f5       	brge	.+82     	; 0x31f0 <main+0x38c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    319e:	6f a1       	ldd	r22, Y+39	; 0x27
    31a0:	78 a5       	ldd	r23, Y+40	; 0x28
    31a2:	89 a5       	ldd	r24, Y+41	; 0x29
    31a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    31a6:	20 e0       	ldi	r18, 0x00	; 0
    31a8:	30 e0       	ldi	r19, 0x00	; 0
    31aa:	40 e2       	ldi	r20, 0x20	; 32
    31ac:	51 e4       	ldi	r21, 0x41	; 65
    31ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31b2:	dc 01       	movw	r26, r24
    31b4:	cb 01       	movw	r24, r22
    31b6:	bc 01       	movw	r22, r24
    31b8:	cd 01       	movw	r24, r26
    31ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31be:	dc 01       	movw	r26, r24
    31c0:	cb 01       	movw	r24, r22
    31c2:	9a a3       	std	Y+34, r25	; 0x22
    31c4:	89 a3       	std	Y+33, r24	; 0x21
    31c6:	0f c0       	rjmp	.+30     	; 0x31e6 <main+0x382>
    31c8:	88 ec       	ldi	r24, 0xC8	; 200
    31ca:	90 e0       	ldi	r25, 0x00	; 0
    31cc:	98 a3       	std	Y+32, r25	; 0x20
    31ce:	8f 8f       	std	Y+31, r24	; 0x1f
    31d0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    31d2:	98 a1       	ldd	r25, Y+32	; 0x20
    31d4:	01 97       	sbiw	r24, 0x01	; 1
    31d6:	f1 f7       	brne	.-4      	; 0x31d4 <main+0x370>
    31d8:	98 a3       	std	Y+32, r25	; 0x20
    31da:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31dc:	89 a1       	ldd	r24, Y+33	; 0x21
    31de:	9a a1       	ldd	r25, Y+34	; 0x22
    31e0:	01 97       	sbiw	r24, 0x01	; 1
    31e2:	9a a3       	std	Y+34, r25	; 0x22
    31e4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31e6:	89 a1       	ldd	r24, Y+33	; 0x21
    31e8:	9a a1       	ldd	r25, Y+34	; 0x22
    31ea:	00 97       	sbiw	r24, 0x00	; 0
    31ec:	69 f7       	brne	.-38     	; 0x31c8 <main+0x364>
    31ee:	14 c0       	rjmp	.+40     	; 0x3218 <main+0x3b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31f0:	6b a1       	ldd	r22, Y+35	; 0x23
    31f2:	7c a1       	ldd	r23, Y+36	; 0x24
    31f4:	8d a1       	ldd	r24, Y+37	; 0x25
    31f6:	9e a1       	ldd	r25, Y+38	; 0x26
    31f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31fc:	dc 01       	movw	r26, r24
    31fe:	cb 01       	movw	r24, r22
    3200:	9a a3       	std	Y+34, r25	; 0x22
    3202:	89 a3       	std	Y+33, r24	; 0x21
    3204:	89 a1       	ldd	r24, Y+33	; 0x21
    3206:	9a a1       	ldd	r25, Y+34	; 0x22
    3208:	9e 8f       	std	Y+30, r25	; 0x1e
    320a:	8d 8f       	std	Y+29, r24	; 0x1d
    320c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    320e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3210:	01 97       	sbiw	r24, 0x01	; 1
    3212:	f1 f7       	brne	.-4      	; 0x3210 <main+0x3ac>
    3214:	9e 8f       	std	Y+30, r25	; 0x1e
    3216:	8d 8f       	std	Y+29, r24	; 0x1d
    	_delay_ms(200);

 	   LCD_displayStringRowColumn(0,0,"  ***WELCOME*** ");
    3218:	21 e4       	ldi	r18, 0x41	; 65
    321a:	31 e0       	ldi	r19, 0x01	; 1
    321c:	80 e0       	ldi	r24, 0x00	; 0
    321e:	60 e0       	ldi	r22, 0x00	; 0
    3220:	a9 01       	movw	r20, r18
    3222:	0e 94 8d 20 	call	0x411a	; 0x411a <LCD_displayStringRowColumn>
    3226:	80 e0       	ldi	r24, 0x00	; 0
    3228:	90 e0       	ldi	r25, 0x00	; 0
    322a:	aa ef       	ldi	r26, 0xFA	; 250
    322c:	b4 e4       	ldi	r27, 0x44	; 68
    322e:	89 8f       	std	Y+25, r24	; 0x19
    3230:	9a 8f       	std	Y+26, r25	; 0x1a
    3232:	ab 8f       	std	Y+27, r26	; 0x1b
    3234:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3236:	69 8d       	ldd	r22, Y+25	; 0x19
    3238:	7a 8d       	ldd	r23, Y+26	; 0x1a
    323a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    323c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    323e:	20 e0       	ldi	r18, 0x00	; 0
    3240:	30 e0       	ldi	r19, 0x00	; 0
    3242:	4a ef       	ldi	r20, 0xFA	; 250
    3244:	54 e4       	ldi	r21, 0x44	; 68
    3246:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    324a:	dc 01       	movw	r26, r24
    324c:	cb 01       	movw	r24, r22
    324e:	8d 8b       	std	Y+21, r24	; 0x15
    3250:	9e 8b       	std	Y+22, r25	; 0x16
    3252:	af 8b       	std	Y+23, r26	; 0x17
    3254:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3256:	6d 89       	ldd	r22, Y+21	; 0x15
    3258:	7e 89       	ldd	r23, Y+22	; 0x16
    325a:	8f 89       	ldd	r24, Y+23	; 0x17
    325c:	98 8d       	ldd	r25, Y+24	; 0x18
    325e:	20 e0       	ldi	r18, 0x00	; 0
    3260:	30 e0       	ldi	r19, 0x00	; 0
    3262:	40 e8       	ldi	r20, 0x80	; 128
    3264:	5f e3       	ldi	r21, 0x3F	; 63
    3266:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    326a:	88 23       	and	r24, r24
    326c:	2c f4       	brge	.+10     	; 0x3278 <main+0x414>
		__ticks = 1;
    326e:	81 e0       	ldi	r24, 0x01	; 1
    3270:	90 e0       	ldi	r25, 0x00	; 0
    3272:	9c 8b       	std	Y+20, r25	; 0x14
    3274:	8b 8b       	std	Y+19, r24	; 0x13
    3276:	3f c0       	rjmp	.+126    	; 0x32f6 <main+0x492>
	else if (__tmp > 65535)
    3278:	6d 89       	ldd	r22, Y+21	; 0x15
    327a:	7e 89       	ldd	r23, Y+22	; 0x16
    327c:	8f 89       	ldd	r24, Y+23	; 0x17
    327e:	98 8d       	ldd	r25, Y+24	; 0x18
    3280:	20 e0       	ldi	r18, 0x00	; 0
    3282:	3f ef       	ldi	r19, 0xFF	; 255
    3284:	4f e7       	ldi	r20, 0x7F	; 127
    3286:	57 e4       	ldi	r21, 0x47	; 71
    3288:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    328c:	18 16       	cp	r1, r24
    328e:	4c f5       	brge	.+82     	; 0x32e2 <main+0x47e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3290:	69 8d       	ldd	r22, Y+25	; 0x19
    3292:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3294:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3296:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3298:	20 e0       	ldi	r18, 0x00	; 0
    329a:	30 e0       	ldi	r19, 0x00	; 0
    329c:	40 e2       	ldi	r20, 0x20	; 32
    329e:	51 e4       	ldi	r21, 0x41	; 65
    32a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32a4:	dc 01       	movw	r26, r24
    32a6:	cb 01       	movw	r24, r22
    32a8:	bc 01       	movw	r22, r24
    32aa:	cd 01       	movw	r24, r26
    32ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32b0:	dc 01       	movw	r26, r24
    32b2:	cb 01       	movw	r24, r22
    32b4:	9c 8b       	std	Y+20, r25	; 0x14
    32b6:	8b 8b       	std	Y+19, r24	; 0x13
    32b8:	0f c0       	rjmp	.+30     	; 0x32d8 <main+0x474>
    32ba:	88 ec       	ldi	r24, 0xC8	; 200
    32bc:	90 e0       	ldi	r25, 0x00	; 0
    32be:	9a 8b       	std	Y+18, r25	; 0x12
    32c0:	89 8b       	std	Y+17, r24	; 0x11
    32c2:	89 89       	ldd	r24, Y+17	; 0x11
    32c4:	9a 89       	ldd	r25, Y+18	; 0x12
    32c6:	01 97       	sbiw	r24, 0x01	; 1
    32c8:	f1 f7       	brne	.-4      	; 0x32c6 <main+0x462>
    32ca:	9a 8b       	std	Y+18, r25	; 0x12
    32cc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32ce:	8b 89       	ldd	r24, Y+19	; 0x13
    32d0:	9c 89       	ldd	r25, Y+20	; 0x14
    32d2:	01 97       	sbiw	r24, 0x01	; 1
    32d4:	9c 8b       	std	Y+20, r25	; 0x14
    32d6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32d8:	8b 89       	ldd	r24, Y+19	; 0x13
    32da:	9c 89       	ldd	r25, Y+20	; 0x14
    32dc:	00 97       	sbiw	r24, 0x00	; 0
    32de:	69 f7       	brne	.-38     	; 0x32ba <main+0x456>
    32e0:	14 c0       	rjmp	.+40     	; 0x330a <main+0x4a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32e2:	6d 89       	ldd	r22, Y+21	; 0x15
    32e4:	7e 89       	ldd	r23, Y+22	; 0x16
    32e6:	8f 89       	ldd	r24, Y+23	; 0x17
    32e8:	98 8d       	ldd	r25, Y+24	; 0x18
    32ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ee:	dc 01       	movw	r26, r24
    32f0:	cb 01       	movw	r24, r22
    32f2:	9c 8b       	std	Y+20, r25	; 0x14
    32f4:	8b 8b       	std	Y+19, r24	; 0x13
    32f6:	8b 89       	ldd	r24, Y+19	; 0x13
    32f8:	9c 89       	ldd	r25, Y+20	; 0x14
    32fa:	98 8b       	std	Y+16, r25	; 0x10
    32fc:	8f 87       	std	Y+15, r24	; 0x0f
    32fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    3300:	98 89       	ldd	r25, Y+16	; 0x10
    3302:	01 97       	sbiw	r24, 0x01	; 1
    3304:	f1 f7       	brne	.-4      	; 0x3302 <main+0x49e>
    3306:	98 8b       	std	Y+16, r25	; 0x10
    3308:	8f 87       	std	Y+15, r24	; 0x0f

       	_delay_ms(2000);

    	LCD_clearScreen(); /* clear the LCD display */
    330a:	0e 94 c9 20 	call	0x4192	; 0x4192 <LCD_clearScreen>
    330e:	80 e0       	ldi	r24, 0x00	; 0
    3310:	90 e0       	ldi	r25, 0x00	; 0
    3312:	a8 e4       	ldi	r26, 0x48	; 72
    3314:	b3 e4       	ldi	r27, 0x43	; 67
    3316:	8b 87       	std	Y+11, r24	; 0x0b
    3318:	9c 87       	std	Y+12, r25	; 0x0c
    331a:	ad 87       	std	Y+13, r26	; 0x0d
    331c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    331e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3320:	7c 85       	ldd	r23, Y+12	; 0x0c
    3322:	8d 85       	ldd	r24, Y+13	; 0x0d
    3324:	9e 85       	ldd	r25, Y+14	; 0x0e
    3326:	20 e0       	ldi	r18, 0x00	; 0
    3328:	30 e0       	ldi	r19, 0x00	; 0
    332a:	4a ef       	ldi	r20, 0xFA	; 250
    332c:	54 e4       	ldi	r21, 0x44	; 68
    332e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3332:	dc 01       	movw	r26, r24
    3334:	cb 01       	movw	r24, r22
    3336:	8f 83       	std	Y+7, r24	; 0x07
    3338:	98 87       	std	Y+8, r25	; 0x08
    333a:	a9 87       	std	Y+9, r26	; 0x09
    333c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    333e:	6f 81       	ldd	r22, Y+7	; 0x07
    3340:	78 85       	ldd	r23, Y+8	; 0x08
    3342:	89 85       	ldd	r24, Y+9	; 0x09
    3344:	9a 85       	ldd	r25, Y+10	; 0x0a
    3346:	20 e0       	ldi	r18, 0x00	; 0
    3348:	30 e0       	ldi	r19, 0x00	; 0
    334a:	40 e8       	ldi	r20, 0x80	; 128
    334c:	5f e3       	ldi	r21, 0x3F	; 63
    334e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3352:	88 23       	and	r24, r24
    3354:	2c f4       	brge	.+10     	; 0x3360 <main+0x4fc>
		__ticks = 1;
    3356:	81 e0       	ldi	r24, 0x01	; 1
    3358:	90 e0       	ldi	r25, 0x00	; 0
    335a:	9e 83       	std	Y+6, r25	; 0x06
    335c:	8d 83       	std	Y+5, r24	; 0x05
    335e:	3f c0       	rjmp	.+126    	; 0x33de <main+0x57a>
	else if (__tmp > 65535)
    3360:	6f 81       	ldd	r22, Y+7	; 0x07
    3362:	78 85       	ldd	r23, Y+8	; 0x08
    3364:	89 85       	ldd	r24, Y+9	; 0x09
    3366:	9a 85       	ldd	r25, Y+10	; 0x0a
    3368:	20 e0       	ldi	r18, 0x00	; 0
    336a:	3f ef       	ldi	r19, 0xFF	; 255
    336c:	4f e7       	ldi	r20, 0x7F	; 127
    336e:	57 e4       	ldi	r21, 0x47	; 71
    3370:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3374:	18 16       	cp	r1, r24
    3376:	4c f5       	brge	.+82     	; 0x33ca <main+0x566>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3378:	6b 85       	ldd	r22, Y+11	; 0x0b
    337a:	7c 85       	ldd	r23, Y+12	; 0x0c
    337c:	8d 85       	ldd	r24, Y+13	; 0x0d
    337e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3380:	20 e0       	ldi	r18, 0x00	; 0
    3382:	30 e0       	ldi	r19, 0x00	; 0
    3384:	40 e2       	ldi	r20, 0x20	; 32
    3386:	51 e4       	ldi	r21, 0x41	; 65
    3388:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    338c:	dc 01       	movw	r26, r24
    338e:	cb 01       	movw	r24, r22
    3390:	bc 01       	movw	r22, r24
    3392:	cd 01       	movw	r24, r26
    3394:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3398:	dc 01       	movw	r26, r24
    339a:	cb 01       	movw	r24, r22
    339c:	9e 83       	std	Y+6, r25	; 0x06
    339e:	8d 83       	std	Y+5, r24	; 0x05
    33a0:	0f c0       	rjmp	.+30     	; 0x33c0 <main+0x55c>
    33a2:	88 ec       	ldi	r24, 0xC8	; 200
    33a4:	90 e0       	ldi	r25, 0x00	; 0
    33a6:	9c 83       	std	Y+4, r25	; 0x04
    33a8:	8b 83       	std	Y+3, r24	; 0x03
    33aa:	8b 81       	ldd	r24, Y+3	; 0x03
    33ac:	9c 81       	ldd	r25, Y+4	; 0x04
    33ae:	01 97       	sbiw	r24, 0x01	; 1
    33b0:	f1 f7       	brne	.-4      	; 0x33ae <main+0x54a>
    33b2:	9c 83       	std	Y+4, r25	; 0x04
    33b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33b6:	8d 81       	ldd	r24, Y+5	; 0x05
    33b8:	9e 81       	ldd	r25, Y+6	; 0x06
    33ba:	01 97       	sbiw	r24, 0x01	; 1
    33bc:	9e 83       	std	Y+6, r25	; 0x06
    33be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33c0:	8d 81       	ldd	r24, Y+5	; 0x05
    33c2:	9e 81       	ldd	r25, Y+6	; 0x06
    33c4:	00 97       	sbiw	r24, 0x00	; 0
    33c6:	69 f7       	brne	.-38     	; 0x33a2 <main+0x53e>
    33c8:	14 c0       	rjmp	.+40     	; 0x33f2 <main+0x58e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33ca:	6f 81       	ldd	r22, Y+7	; 0x07
    33cc:	78 85       	ldd	r23, Y+8	; 0x08
    33ce:	89 85       	ldd	r24, Y+9	; 0x09
    33d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    33d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33d6:	dc 01       	movw	r26, r24
    33d8:	cb 01       	movw	r24, r22
    33da:	9e 83       	std	Y+6, r25	; 0x06
    33dc:	8d 83       	std	Y+5, r24	; 0x05
    33de:	8d 81       	ldd	r24, Y+5	; 0x05
    33e0:	9e 81       	ldd	r25, Y+6	; 0x06
    33e2:	9a 83       	std	Y+2, r25	; 0x02
    33e4:	89 83       	std	Y+1, r24	; 0x01
    33e6:	89 81       	ldd	r24, Y+1	; 0x01
    33e8:	9a 81       	ldd	r25, Y+2	; 0x02
    33ea:	01 97       	sbiw	r24, 0x01	; 1
    33ec:	f1 f7       	brne	.-4      	; 0x33ea <main+0x586>
    33ee:	9a 83       	std	Y+2, r25	; 0x02
    33f0:	89 83       	std	Y+1, r24	; 0x01
    	_delay_ms(200);


	   LCD_displayStringRowColumn(0,0,"Open Door: 1 ");
    33f2:	22 e5       	ldi	r18, 0x52	; 82
    33f4:	31 e0       	ldi	r19, 0x01	; 1
    33f6:	80 e0       	ldi	r24, 0x00	; 0
    33f8:	60 e0       	ldi	r22, 0x00	; 0
    33fa:	a9 01       	movw	r20, r18
    33fc:	0e 94 8d 20 	call	0x411a	; 0x411a <LCD_displayStringRowColumn>
	   LCD_displayStringRowColumn(1,0,"Change Pass: 2");
    3400:	20 e6       	ldi	r18, 0x60	; 96
    3402:	31 e0       	ldi	r19, 0x01	; 1
    3404:	81 e0       	ldi	r24, 0x01	; 1
    3406:	60 e0       	ldi	r22, 0x00	; 0
    3408:	a9 01       	movw	r20, r18
    340a:	0e 94 8d 20 	call	0x411a	; 0x411a <LCD_displayStringRowColumn>

		key = KeyPad_getPressedKey(); //get the pressed key
    340e:	0e 94 11 1b 	call	0x3622	; 0x3622 <KeyPad_getPressedKey>
    3412:	fe 01       	movw	r30, r28
    3414:	e6 5b       	subi	r30, 0xB6	; 182
    3416:	ff 4f       	sbci	r31, 0xFF	; 255
    3418:	80 83       	st	Z, r24

/*****************************( Open Door mode )*************************************************/
		if(key == 1)
    341a:	fe 01       	movw	r30, r28
    341c:	e6 5b       	subi	r30, 0xB6	; 182
    341e:	ff 4f       	sbci	r31, 0xFF	; 255
    3420:	80 81       	ld	r24, Z
    3422:	81 30       	cpi	r24, 0x01	; 1
    3424:	19 f4       	brne	.+6      	; 0x342c <main+0x5c8>
		{
			Open_Door();
    3426:	0e 94 65 0a 	call	0x14ca	; 0x14ca <Open_Door>
    342a:	82 ce       	rjmp	.-764    	; 0x3130 <main+0x2cc>

		}
/*****************************( change password mode )*************************************************/
		else if(key == 2)
    342c:	fe 01       	movw	r30, r28
    342e:	e6 5b       	subi	r30, 0xB6	; 182
    3430:	ff 4f       	sbci	r31, 0xFF	; 255
    3432:	80 81       	ld	r24, Z
    3434:	82 30       	cpi	r24, 0x02	; 2
    3436:	19 f4       	brne	.+6      	; 0x343e <main+0x5da>
		{
			Change_Password();
    3438:	0e 94 86 11 	call	0x230c	; 0x230c <Change_Password>
    343c:	79 ce       	rjmp	.-782    	; 0x3130 <main+0x2cc>

		}
		else
		{
			   LCD_displayStringRowColumn(0,0,"Wrong pressed");
    343e:	2f e6       	ldi	r18, 0x6F	; 111
    3440:	31 e0       	ldi	r19, 0x01	; 1
    3442:	80 e0       	ldi	r24, 0x00	; 0
    3444:	60 e0       	ldi	r22, 0x00	; 0
    3446:	a9 01       	movw	r20, r18
    3448:	0e 94 8d 20 	call	0x411a	; 0x411a <LCD_displayStringRowColumn>
			   LCD_displayStringRowColumn(1,0,"Try again");
    344c:	2d e7       	ldi	r18, 0x7D	; 125
    344e:	31 e0       	ldi	r19, 0x01	; 1
    3450:	81 e0       	ldi	r24, 0x01	; 1
    3452:	60 e0       	ldi	r22, 0x00	; 0
    3454:	a9 01       	movw	r20, r18
    3456:	0e 94 8d 20 	call	0x411a	; 0x411a <LCD_displayStringRowColumn>
    345a:	6a ce       	rjmp	.-812    	; 0x3130 <main+0x2cc>

0000345c <__vector_11>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
    345c:	1f 92       	push	r1
    345e:	0f 92       	push	r0
    3460:	0f b6       	in	r0, 0x3f	; 63
    3462:	0f 92       	push	r0
    3464:	11 24       	eor	r1, r1
    3466:	2f 93       	push	r18
    3468:	3f 93       	push	r19
    346a:	4f 93       	push	r20
    346c:	5f 93       	push	r21
    346e:	6f 93       	push	r22
    3470:	7f 93       	push	r23
    3472:	8f 93       	push	r24
    3474:	9f 93       	push	r25
    3476:	af 93       	push	r26
    3478:	bf 93       	push	r27
    347a:	ef 93       	push	r30
    347c:	ff 93       	push	r31
    347e:	df 93       	push	r29
    3480:	cf 93       	push	r28
    3482:	cd b7       	in	r28, 0x3d	; 61
    3484:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    3486:	80 91 90 01 	lds	r24, 0x0190
    348a:	90 91 91 01 	lds	r25, 0x0191
    348e:	00 97       	sbiw	r24, 0x00	; 0
    3490:	29 f0       	breq	.+10     	; 0x349c <__vector_11+0x40>
	{
		/* Call the Call Back function in the application after get init NORMAL value */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    3492:	e0 91 90 01 	lds	r30, 0x0190
    3496:	f0 91 91 01 	lds	r31, 0x0191
    349a:	09 95       	icall
	}
}
    349c:	cf 91       	pop	r28
    349e:	df 91       	pop	r29
    34a0:	ff 91       	pop	r31
    34a2:	ef 91       	pop	r30
    34a4:	bf 91       	pop	r27
    34a6:	af 91       	pop	r26
    34a8:	9f 91       	pop	r25
    34aa:	8f 91       	pop	r24
    34ac:	7f 91       	pop	r23
    34ae:	6f 91       	pop	r22
    34b0:	5f 91       	pop	r21
    34b2:	4f 91       	pop	r20
    34b4:	3f 91       	pop	r19
    34b6:	2f 91       	pop	r18
    34b8:	0f 90       	pop	r0
    34ba:	0f be       	out	0x3f, r0	; 63
    34bc:	0f 90       	pop	r0
    34be:	1f 90       	pop	r1
    34c0:	18 95       	reti

000034c2 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    34c2:	1f 92       	push	r1
    34c4:	0f 92       	push	r0
    34c6:	0f b6       	in	r0, 0x3f	; 63
    34c8:	0f 92       	push	r0
    34ca:	11 24       	eor	r1, r1
    34cc:	2f 93       	push	r18
    34ce:	3f 93       	push	r19
    34d0:	4f 93       	push	r20
    34d2:	5f 93       	push	r21
    34d4:	6f 93       	push	r22
    34d6:	7f 93       	push	r23
    34d8:	8f 93       	push	r24
    34da:	9f 93       	push	r25
    34dc:	af 93       	push	r26
    34de:	bf 93       	push	r27
    34e0:	ef 93       	push	r30
    34e2:	ff 93       	push	r31
    34e4:	df 93       	push	r29
    34e6:	cf 93       	push	r28
    34e8:	cd b7       	in	r28, 0x3d	; 61
    34ea:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    34ec:	80 91 90 01 	lds	r24, 0x0190
    34f0:	90 91 91 01 	lds	r25, 0x0191
    34f4:	00 97       	sbiw	r24, 0x00	; 0
    34f6:	29 f0       	breq	.+10     	; 0x3502 <__vector_10+0x40>
	{
		/* Call the Call Back function in the application after get CTC value  */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    34f8:	e0 91 90 01 	lds	r30, 0x0190
    34fc:	f0 91 91 01 	lds	r31, 0x0191
    3500:	09 95       	icall
	}
}
    3502:	cf 91       	pop	r28
    3504:	df 91       	pop	r29
    3506:	ff 91       	pop	r31
    3508:	ef 91       	pop	r30
    350a:	bf 91       	pop	r27
    350c:	af 91       	pop	r26
    350e:	9f 91       	pop	r25
    3510:	8f 91       	pop	r24
    3512:	7f 91       	pop	r23
    3514:	6f 91       	pop	r22
    3516:	5f 91       	pop	r21
    3518:	4f 91       	pop	r20
    351a:	3f 91       	pop	r19
    351c:	2f 91       	pop	r18
    351e:	0f 90       	pop	r0
    3520:	0f be       	out	0x3f, r0	; 63
    3522:	0f 90       	pop	r0
    3524:	1f 90       	pop	r1
    3526:	18 95       	reti

00003528 <Timer_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void Timer_init(const Timer_ConfigType * Config_Ptr)
{
    3528:	df 93       	push	r29
    352a:	cf 93       	push	r28
    352c:	00 d0       	rcall	.+0      	; 0x352e <Timer_init+0x6>
    352e:	cd b7       	in	r28, 0x3d	; 61
    3530:	de b7       	in	r29, 0x3e	; 62
    3532:	9a 83       	std	Y+2, r25	; 0x02
    3534:	89 83       	std	Y+1, r24	; 0x01
	SREG  |= (1<<7);    //Enable global interrupts in MC by setting the I-Bit.
    3536:	af e5       	ldi	r26, 0x5F	; 95
    3538:	b0 e0       	ldi	r27, 0x00	; 0
    353a:	ef e5       	ldi	r30, 0x5F	; 95
    353c:	f0 e0       	ldi	r31, 0x00	; 0
    353e:	80 81       	ld	r24, Z
    3540:	80 68       	ori	r24, 0x80	; 128
    3542:	8c 93       	st	X, r24

	if (Config_Ptr->mode ==NORMAL)
    3544:	e9 81       	ldd	r30, Y+1	; 0x01
    3546:	fa 81       	ldd	r31, Y+2	; 0x02
    3548:	81 81       	ldd	r24, Z+1	; 0x01
    354a:	88 23       	and	r24, r24
    354c:	09 f5       	brne	.+66     	; 0x3590 <Timer_init+0x68>
	{
		TCNT0 =  (Config_Ptr->init_NORMAL_value); // Set Timer initial value
    354e:	a2 e5       	ldi	r26, 0x52	; 82
    3550:	b0 e0       	ldi	r27, 0x00	; 0
    3552:	e9 81       	ldd	r30, Y+1	; 0x01
    3554:	fa 81       	ldd	r31, Y+2	; 0x02
    3556:	82 81       	ldd	r24, Z+2	; 0x02
    3558:	8c 93       	st	X, r24

		TIMSK |= (1<<TOIE0); // Enable Timer0 Overflow Interrupt
    355a:	a9 e5       	ldi	r26, 0x59	; 89
    355c:	b0 e0       	ldi	r27, 0x00	; 0
    355e:	e9 e5       	ldi	r30, 0x59	; 89
    3560:	f0 e0       	ldi	r31, 0x00	; 0
    3562:	80 81       	ld	r24, Z
    3564:	81 60       	ori	r24, 0x01	; 1
    3566:	8c 93       	st	X, r24

		TCCR0 |= (1<<FOC0); //1. Non PWM mode FOC0=1
    3568:	a3 e5       	ldi	r26, 0x53	; 83
    356a:	b0 e0       	ldi	r27, 0x00	; 0
    356c:	e3 e5       	ldi	r30, 0x53	; 83
    356e:	f0 e0       	ldi	r31, 0x00	; 0
    3570:	80 81       	ld	r24, Z
    3572:	80 68       	ori	r24, 0x80	; 128
    3574:	8c 93       	st	X, r24
		/*
		* insert the required clock value in the first three bits (CS00, CS01 and C02)
		* of TCCR0 Register
		*/

		TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->clock);
    3576:	a3 e5       	ldi	r26, 0x53	; 83
    3578:	b0 e0       	ldi	r27, 0x00	; 0
    357a:	e3 e5       	ldi	r30, 0x53	; 83
    357c:	f0 e0       	ldi	r31, 0x00	; 0
    357e:	80 81       	ld	r24, Z
    3580:	98 2f       	mov	r25, r24
    3582:	98 7f       	andi	r25, 0xF8	; 248
    3584:	e9 81       	ldd	r30, Y+1	; 0x01
    3586:	fa 81       	ldd	r31, Y+2	; 0x02
    3588:	80 81       	ld	r24, Z
    358a:	89 2b       	or	r24, r25
    358c:	8c 93       	st	X, r24
    358e:	32 c0       	rjmp	.+100    	; 0x35f4 <Timer_init+0xcc>

	}

	else if(Config_Ptr->mode == CTC)
    3590:	e9 81       	ldd	r30, Y+1	; 0x01
    3592:	fa 81       	ldd	r31, Y+2	; 0x02
    3594:	81 81       	ldd	r24, Z+1	; 0x01
    3596:	81 30       	cpi	r24, 0x01	; 1
    3598:	69 f5       	brne	.+90     	; 0x35f4 <Timer_init+0xcc>
		{
		TCNT0 =  (Config_Ptr->init_NORMAL_value); // Set Timer initial value
    359a:	a2 e5       	ldi	r26, 0x52	; 82
    359c:	b0 e0       	ldi	r27, 0x00	; 0
    359e:	e9 81       	ldd	r30, Y+1	; 0x01
    35a0:	fa 81       	ldd	r31, Y+2	; 0x02
    35a2:	82 81       	ldd	r24, Z+2	; 0x02
    35a4:	8c 93       	st	X, r24

		OCR0  = (Config_Ptr->CTC_value); // Set Compare Value
    35a6:	ac e5       	ldi	r26, 0x5C	; 92
    35a8:	b0 e0       	ldi	r27, 0x00	; 0
    35aa:	e9 81       	ldd	r30, Y+1	; 0x01
    35ac:	fa 81       	ldd	r31, Y+2	; 0x02
    35ae:	83 81       	ldd	r24, Z+3	; 0x03
    35b0:	8c 93       	st	X, r24

		TIMSK |= (1<<OCIE0); // Enable Timer0 Compare Interrupt
    35b2:	a9 e5       	ldi	r26, 0x59	; 89
    35b4:	b0 e0       	ldi	r27, 0x00	; 0
    35b6:	e9 e5       	ldi	r30, 0x59	; 89
    35b8:	f0 e0       	ldi	r31, 0x00	; 0
    35ba:	80 81       	ld	r24, Z
    35bc:	82 60       	ori	r24, 0x02	; 2
    35be:	8c 93       	st	X, r24

		TCCR0 |= (1<<FOC0); //1. Non PWM mode FOC0=1
    35c0:	a3 e5       	ldi	r26, 0x53	; 83
    35c2:	b0 e0       	ldi	r27, 0x00	; 0
    35c4:	e3 e5       	ldi	r30, 0x53	; 83
    35c6:	f0 e0       	ldi	r31, 0x00	; 0
    35c8:	80 81       	ld	r24, Z
    35ca:	80 68       	ori	r24, 0x80	; 128
    35cc:	8c 93       	st	X, r24
		/*
		 * insert the required mode in the Two bits number 3 and 6  (WGM01 and WGM00)
		 * of TCCR0 Register to be CTC mode
		 */

		TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->clock);
    35ce:	a3 e5       	ldi	r26, 0x53	; 83
    35d0:	b0 e0       	ldi	r27, 0x00	; 0
    35d2:	e3 e5       	ldi	r30, 0x53	; 83
    35d4:	f0 e0       	ldi	r31, 0x00	; 0
    35d6:	80 81       	ld	r24, Z
    35d8:	98 2f       	mov	r25, r24
    35da:	98 7f       	andi	r25, 0xF8	; 248
    35dc:	e9 81       	ldd	r30, Y+1	; 0x01
    35de:	fa 81       	ldd	r31, Y+2	; 0x02
    35e0:	80 81       	ld	r24, Z
    35e2:	89 2b       	or	r24, r25
    35e4:	8c 93       	st	X, r24
		 * insert the required mode in the Two bits number 3 and 6  (WGM01 and WGM00)
		 * of TCCR0 Register to be CTC mode
		 */


		TCCR0 |= (1<<WGM01);
    35e6:	a3 e5       	ldi	r26, 0x53	; 83
    35e8:	b0 e0       	ldi	r27, 0x00	; 0
    35ea:	e3 e5       	ldi	r30, 0x53	; 83
    35ec:	f0 e0       	ldi	r31, 0x00	; 0
    35ee:	80 81       	ld	r24, Z
    35f0:	88 60       	ori	r24, 0x08	; 8
    35f2:	8c 93       	st	X, r24
		}
}
    35f4:	0f 90       	pop	r0
    35f6:	0f 90       	pop	r0
    35f8:	cf 91       	pop	r28
    35fa:	df 91       	pop	r29
    35fc:	08 95       	ret

000035fe <Timer_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void Timer_setCallBack(void(*a_ptr)(void))
{
    35fe:	df 93       	push	r29
    3600:	cf 93       	push	r28
    3602:	00 d0       	rcall	.+0      	; 0x3604 <Timer_setCallBack+0x6>
    3604:	cd b7       	in	r28, 0x3d	; 61
    3606:	de b7       	in	r29, 0x3e	; 62
    3608:	9a 83       	std	Y+2, r25	; 0x02
    360a:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    360c:	89 81       	ldd	r24, Y+1	; 0x01
    360e:	9a 81       	ldd	r25, Y+2	; 0x02
    3610:	90 93 91 01 	sts	0x0191, r25
    3614:	80 93 90 01 	sts	0x0190, r24
}
    3618:	0f 90       	pop	r0
    361a:	0f 90       	pop	r0
    361c:	cf 91       	pop	r28
    361e:	df 91       	pop	r29
    3620:	08 95       	ret

00003622 <KeyPad_getPressedKey>:
#endif

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
    3622:	df 93       	push	r29
    3624:	cf 93       	push	r28
    3626:	00 d0       	rcall	.+0      	; 0x3628 <KeyPad_getPressedKey+0x6>
    3628:	cd b7       	in	r28, 0x3d	; 61
    362a:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    362c:	1a 82       	std	Y+2, r1	; 0x02
    362e:	4c c0       	rjmp	.+152    	; 0x36c8 <KeyPad_getPressedKey+0xa6>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
    3630:	ea e3       	ldi	r30, 0x3A	; 58
    3632:	f0 e0       	ldi	r31, 0x00	; 0
    3634:	8a 81       	ldd	r24, Y+2	; 0x02
    3636:	28 2f       	mov	r18, r24
    3638:	30 e0       	ldi	r19, 0x00	; 0
    363a:	80 e1       	ldi	r24, 0x10	; 16
    363c:	90 e0       	ldi	r25, 0x00	; 0
    363e:	02 c0       	rjmp	.+4      	; 0x3644 <KeyPad_getPressedKey+0x22>
    3640:	88 0f       	add	r24, r24
    3642:	99 1f       	adc	r25, r25
    3644:	2a 95       	dec	r18
    3646:	e2 f7       	brpl	.-8      	; 0x3640 <KeyPad_getPressedKey+0x1e>
    3648:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
    364a:	eb e3       	ldi	r30, 0x3B	; 59
    364c:	f0 e0       	ldi	r31, 0x00	; 0
    364e:	8a 81       	ldd	r24, Y+2	; 0x02
    3650:	28 2f       	mov	r18, r24
    3652:	30 e0       	ldi	r19, 0x00	; 0
    3654:	80 e1       	ldi	r24, 0x10	; 16
    3656:	90 e0       	ldi	r25, 0x00	; 0
    3658:	02 2e       	mov	r0, r18
    365a:	02 c0       	rjmp	.+4      	; 0x3660 <KeyPad_getPressedKey+0x3e>
    365c:	88 0f       	add	r24, r24
    365e:	99 1f       	adc	r25, r25
    3660:	0a 94       	dec	r0
    3662:	e2 f7       	brpl	.-8      	; 0x365c <KeyPad_getPressedKey+0x3a>
    3664:	80 95       	com	r24
    3666:	80 83       	st	Z, r24
			for(row=0;row<N_row;row++) /* loop for rows */
    3668:	19 82       	std	Y+1, r1	; 0x01
    366a:	28 c0       	rjmp	.+80     	; 0x36bc <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
    366c:	e9 e3       	ldi	r30, 0x39	; 57
    366e:	f0 e0       	ldi	r31, 0x00	; 0
    3670:	80 81       	ld	r24, Z
    3672:	28 2f       	mov	r18, r24
    3674:	30 e0       	ldi	r19, 0x00	; 0
    3676:	89 81       	ldd	r24, Y+1	; 0x01
    3678:	88 2f       	mov	r24, r24
    367a:	90 e0       	ldi	r25, 0x00	; 0
    367c:	a9 01       	movw	r20, r18
    367e:	02 c0       	rjmp	.+4      	; 0x3684 <KeyPad_getPressedKey+0x62>
    3680:	55 95       	asr	r21
    3682:	47 95       	ror	r20
    3684:	8a 95       	dec	r24
    3686:	e2 f7       	brpl	.-8      	; 0x3680 <KeyPad_getPressedKey+0x5e>
    3688:	ca 01       	movw	r24, r20
    368a:	81 70       	andi	r24, 0x01	; 1
    368c:	90 70       	andi	r25, 0x00	; 0
    368e:	00 97       	sbiw	r24, 0x00	; 0
    3690:	91 f4       	brne	.+36     	; 0x36b6 <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)  
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1); 
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
    3692:	89 81       	ldd	r24, Y+1	; 0x01
    3694:	88 2f       	mov	r24, r24
    3696:	90 e0       	ldi	r25, 0x00	; 0
    3698:	88 0f       	add	r24, r24
    369a:	99 1f       	adc	r25, r25
    369c:	88 0f       	add	r24, r24
    369e:	99 1f       	adc	r25, r25
    36a0:	98 2f       	mov	r25, r24
    36a2:	8a 81       	ldd	r24, Y+2	; 0x02
    36a4:	89 0f       	add	r24, r25
    36a6:	8f 5f       	subi	r24, 0xFF	; 255
    36a8:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <KeyPad_4x4_adjustKeyNumber>
					#endif				
				}
			}
		}
	}	
}
    36ac:	0f 90       	pop	r0
    36ae:	0f 90       	pop	r0
    36b0:	cf 91       	pop	r28
    36b2:	df 91       	pop	r29
    36b4:	08 95       	ret
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
			for(row=0;row<N_row;row++) /* loop for rows */
    36b6:	89 81       	ldd	r24, Y+1	; 0x01
    36b8:	8f 5f       	subi	r24, 0xFF	; 255
    36ba:	89 83       	std	Y+1, r24	; 0x01
    36bc:	89 81       	ldd	r24, Y+1	; 0x01
    36be:	84 30       	cpi	r24, 0x04	; 4
    36c0:	a8 f2       	brcs	.-86     	; 0x366c <KeyPad_getPressedKey+0x4a>
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    36c2:	8a 81       	ldd	r24, Y+2	; 0x02
    36c4:	8f 5f       	subi	r24, 0xFF	; 255
    36c6:	8a 83       	std	Y+2, r24	; 0x02
    36c8:	8a 81       	ldd	r24, Y+2	; 0x02
    36ca:	84 30       	cpi	r24, 0x04	; 4
    36cc:	08 f4       	brcc	.+2      	; 0x36d0 <KeyPad_getPressedKey+0xae>
    36ce:	b0 cf       	rjmp	.-160    	; 0x3630 <KeyPad_getPressedKey+0xe>
    36d0:	ad cf       	rjmp	.-166    	; 0x362c <KeyPad_getPressedKey+0xa>

000036d2 <KeyPad_4x4_adjustKeyNumber>:
} 

#elif (N_col == 4)
 
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
    36d2:	df 93       	push	r29
    36d4:	cf 93       	push	r28
    36d6:	00 d0       	rcall	.+0      	; 0x36d8 <KeyPad_4x4_adjustKeyNumber+0x6>
    36d8:	00 d0       	rcall	.+0      	; 0x36da <KeyPad_4x4_adjustKeyNumber+0x8>
    36da:	cd b7       	in	r28, 0x3d	; 61
    36dc:	de b7       	in	r29, 0x3e	; 62
    36de:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    36e0:	89 81       	ldd	r24, Y+1	; 0x01
    36e2:	28 2f       	mov	r18, r24
    36e4:	30 e0       	ldi	r19, 0x00	; 0
    36e6:	3c 83       	std	Y+4, r19	; 0x04
    36e8:	2b 83       	std	Y+3, r18	; 0x03
    36ea:	8b 81       	ldd	r24, Y+3	; 0x03
    36ec:	9c 81       	ldd	r25, Y+4	; 0x04
    36ee:	88 30       	cpi	r24, 0x08	; 8
    36f0:	91 05       	cpc	r25, r1
    36f2:	09 f4       	brne	.+2      	; 0x36f6 <KeyPad_4x4_adjustKeyNumber+0x24>
    36f4:	70 c0       	rjmp	.+224    	; 0x37d6 <KeyPad_4x4_adjustKeyNumber+0x104>
    36f6:	2b 81       	ldd	r18, Y+3	; 0x03
    36f8:	3c 81       	ldd	r19, Y+4	; 0x04
    36fa:	29 30       	cpi	r18, 0x09	; 9
    36fc:	31 05       	cpc	r19, r1
    36fe:	5c f5       	brge	.+86     	; 0x3756 <KeyPad_4x4_adjustKeyNumber+0x84>
    3700:	8b 81       	ldd	r24, Y+3	; 0x03
    3702:	9c 81       	ldd	r25, Y+4	; 0x04
    3704:	84 30       	cpi	r24, 0x04	; 4
    3706:	91 05       	cpc	r25, r1
    3708:	09 f4       	brne	.+2      	; 0x370c <KeyPad_4x4_adjustKeyNumber+0x3a>
    370a:	59 c0       	rjmp	.+178    	; 0x37be <KeyPad_4x4_adjustKeyNumber+0xec>
    370c:	2b 81       	ldd	r18, Y+3	; 0x03
    370e:	3c 81       	ldd	r19, Y+4	; 0x04
    3710:	25 30       	cpi	r18, 0x05	; 5
    3712:	31 05       	cpc	r19, r1
    3714:	9c f4       	brge	.+38     	; 0x373c <KeyPad_4x4_adjustKeyNumber+0x6a>
    3716:	8b 81       	ldd	r24, Y+3	; 0x03
    3718:	9c 81       	ldd	r25, Y+4	; 0x04
    371a:	82 30       	cpi	r24, 0x02	; 2
    371c:	91 05       	cpc	r25, r1
    371e:	09 f4       	brne	.+2      	; 0x3722 <KeyPad_4x4_adjustKeyNumber+0x50>
    3720:	48 c0       	rjmp	.+144    	; 0x37b2 <KeyPad_4x4_adjustKeyNumber+0xe0>
    3722:	2b 81       	ldd	r18, Y+3	; 0x03
    3724:	3c 81       	ldd	r19, Y+4	; 0x04
    3726:	23 30       	cpi	r18, 0x03	; 3
    3728:	31 05       	cpc	r19, r1
    372a:	0c f0       	brlt	.+2      	; 0x372e <KeyPad_4x4_adjustKeyNumber+0x5c>
    372c:	45 c0       	rjmp	.+138    	; 0x37b8 <KeyPad_4x4_adjustKeyNumber+0xe6>
    372e:	8b 81       	ldd	r24, Y+3	; 0x03
    3730:	9c 81       	ldd	r25, Y+4	; 0x04
    3732:	81 30       	cpi	r24, 0x01	; 1
    3734:	91 05       	cpc	r25, r1
    3736:	09 f4       	brne	.+2      	; 0x373a <KeyPad_4x4_adjustKeyNumber+0x68>
    3738:	39 c0       	rjmp	.+114    	; 0x37ac <KeyPad_4x4_adjustKeyNumber+0xda>
    373a:	67 c0       	rjmp	.+206    	; 0x380a <KeyPad_4x4_adjustKeyNumber+0x138>
    373c:	2b 81       	ldd	r18, Y+3	; 0x03
    373e:	3c 81       	ldd	r19, Y+4	; 0x04
    3740:	26 30       	cpi	r18, 0x06	; 6
    3742:	31 05       	cpc	r19, r1
    3744:	09 f4       	brne	.+2      	; 0x3748 <KeyPad_4x4_adjustKeyNumber+0x76>
    3746:	41 c0       	rjmp	.+130    	; 0x37ca <KeyPad_4x4_adjustKeyNumber+0xf8>
    3748:	8b 81       	ldd	r24, Y+3	; 0x03
    374a:	9c 81       	ldd	r25, Y+4	; 0x04
    374c:	87 30       	cpi	r24, 0x07	; 7
    374e:	91 05       	cpc	r25, r1
    3750:	0c f0       	brlt	.+2      	; 0x3754 <KeyPad_4x4_adjustKeyNumber+0x82>
    3752:	3e c0       	rjmp	.+124    	; 0x37d0 <KeyPad_4x4_adjustKeyNumber+0xfe>
    3754:	37 c0       	rjmp	.+110    	; 0x37c4 <KeyPad_4x4_adjustKeyNumber+0xf2>
    3756:	2b 81       	ldd	r18, Y+3	; 0x03
    3758:	3c 81       	ldd	r19, Y+4	; 0x04
    375a:	2c 30       	cpi	r18, 0x0C	; 12
    375c:	31 05       	cpc	r19, r1
    375e:	09 f4       	brne	.+2      	; 0x3762 <KeyPad_4x4_adjustKeyNumber+0x90>
    3760:	46 c0       	rjmp	.+140    	; 0x37ee <KeyPad_4x4_adjustKeyNumber+0x11c>
    3762:	8b 81       	ldd	r24, Y+3	; 0x03
    3764:	9c 81       	ldd	r25, Y+4	; 0x04
    3766:	8d 30       	cpi	r24, 0x0D	; 13
    3768:	91 05       	cpc	r25, r1
    376a:	5c f4       	brge	.+22     	; 0x3782 <KeyPad_4x4_adjustKeyNumber+0xb0>
    376c:	2b 81       	ldd	r18, Y+3	; 0x03
    376e:	3c 81       	ldd	r19, Y+4	; 0x04
    3770:	2a 30       	cpi	r18, 0x0A	; 10
    3772:	31 05       	cpc	r19, r1
    3774:	b1 f1       	breq	.+108    	; 0x37e2 <KeyPad_4x4_adjustKeyNumber+0x110>
    3776:	8b 81       	ldd	r24, Y+3	; 0x03
    3778:	9c 81       	ldd	r25, Y+4	; 0x04
    377a:	8b 30       	cpi	r24, 0x0B	; 11
    377c:	91 05       	cpc	r25, r1
    377e:	a4 f5       	brge	.+104    	; 0x37e8 <KeyPad_4x4_adjustKeyNumber+0x116>
    3780:	2d c0       	rjmp	.+90     	; 0x37dc <KeyPad_4x4_adjustKeyNumber+0x10a>
    3782:	2b 81       	ldd	r18, Y+3	; 0x03
    3784:	3c 81       	ldd	r19, Y+4	; 0x04
    3786:	2e 30       	cpi	r18, 0x0E	; 14
    3788:	31 05       	cpc	r19, r1
    378a:	b9 f1       	breq	.+110    	; 0x37fa <KeyPad_4x4_adjustKeyNumber+0x128>
    378c:	8b 81       	ldd	r24, Y+3	; 0x03
    378e:	9c 81       	ldd	r25, Y+4	; 0x04
    3790:	8e 30       	cpi	r24, 0x0E	; 14
    3792:	91 05       	cpc	r25, r1
    3794:	7c f1       	brlt	.+94     	; 0x37f4 <KeyPad_4x4_adjustKeyNumber+0x122>
    3796:	2b 81       	ldd	r18, Y+3	; 0x03
    3798:	3c 81       	ldd	r19, Y+4	; 0x04
    379a:	2f 30       	cpi	r18, 0x0F	; 15
    379c:	31 05       	cpc	r19, r1
    379e:	79 f1       	breq	.+94     	; 0x37fe <KeyPad_4x4_adjustKeyNumber+0x12c>
    37a0:	8b 81       	ldd	r24, Y+3	; 0x03
    37a2:	9c 81       	ldd	r25, Y+4	; 0x04
    37a4:	80 31       	cpi	r24, 0x10	; 16
    37a6:	91 05       	cpc	r25, r1
    37a8:	69 f1       	breq	.+90     	; 0x3804 <KeyPad_4x4_adjustKeyNumber+0x132>
    37aa:	2f c0       	rjmp	.+94     	; 0x380a <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7; 
    37ac:	97 e0       	ldi	r25, 0x07	; 7
    37ae:	9a 83       	std	Y+2, r25	; 0x02
    37b0:	2e c0       	rjmp	.+92     	; 0x380e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8; 
    37b2:	28 e0       	ldi	r18, 0x08	; 8
    37b4:	2a 83       	std	Y+2, r18	; 0x02
    37b6:	2b c0       	rjmp	.+86     	; 0x380e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9; 
    37b8:	39 e0       	ldi	r19, 0x09	; 9
    37ba:	3a 83       	std	Y+2, r19	; 0x02
    37bc:	28 c0       	rjmp	.+80     	; 0x380e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '%'; // ASCII Code of %
    37be:	85 e2       	ldi	r24, 0x25	; 37
    37c0:	8a 83       	std	Y+2, r24	; 0x02
    37c2:	25 c0       	rjmp	.+74     	; 0x380e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4; 
    37c4:	94 e0       	ldi	r25, 0x04	; 4
    37c6:	9a 83       	std	Y+2, r25	; 0x02
    37c8:	22 c0       	rjmp	.+68     	; 0x380e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
    37ca:	25 e0       	ldi	r18, 0x05	; 5
    37cc:	2a 83       	std	Y+2, r18	; 0x02
    37ce:	1f c0       	rjmp	.+62     	; 0x380e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6; 
    37d0:	36 e0       	ldi	r19, 0x06	; 6
    37d2:	3a 83       	std	Y+2, r19	; 0x02
    37d4:	1c c0       	rjmp	.+56     	; 0x380e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
    37d6:	8a e2       	ldi	r24, 0x2A	; 42
    37d8:	8a 83       	std	Y+2, r24	; 0x02
    37da:	19 c0       	rjmp	.+50     	; 0x380e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;		
		case 9: return 1; 
    37dc:	91 e0       	ldi	r25, 0x01	; 1
    37de:	9a 83       	std	Y+2, r25	; 0x02
    37e0:	16 c0       	rjmp	.+44     	; 0x380e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2; 
    37e2:	22 e0       	ldi	r18, 0x02	; 2
    37e4:	2a 83       	std	Y+2, r18	; 0x02
    37e6:	13 c0       	rjmp	.+38     	; 0x380e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3; 
    37e8:	33 e0       	ldi	r19, 0x03	; 3
    37ea:	3a 83       	std	Y+2, r19	; 0x02
    37ec:	10 c0       	rjmp	.+32     	; 0x380e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
    37ee:	8d e2       	ldi	r24, 0x2D	; 45
    37f0:	8a 83       	std	Y+2, r24	; 0x02
    37f2:	0d c0       	rjmp	.+26     	; 0x380e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;  /* ASCII of Enter */
    37f4:	9d e0       	ldi	r25, 0x0D	; 13
    37f6:	9a 83       	std	Y+2, r25	; 0x02
    37f8:	0a c0       	rjmp	.+20     	; 0x380e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;			
		case 14: return 0; 
    37fa:	1a 82       	std	Y+2, r1	; 0x02
    37fc:	08 c0       	rjmp	.+16     	; 0x380e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
    37fe:	2d e3       	ldi	r18, 0x3D	; 61
    3800:	2a 83       	std	Y+2, r18	; 0x02
    3802:	05 c0       	rjmp	.+10     	; 0x380e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
    3804:	3b e2       	ldi	r19, 0x2B	; 43
    3806:	3a 83       	std	Y+2, r19	; 0x02
    3808:	02 c0       	rjmp	.+4      	; 0x380e <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;								 						
    380a:	89 81       	ldd	r24, Y+1	; 0x01
    380c:	8a 83       	std	Y+2, r24	; 0x02
    380e:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
    3810:	0f 90       	pop	r0
    3812:	0f 90       	pop	r0
    3814:	0f 90       	pop	r0
    3816:	0f 90       	pop	r0
    3818:	cf 91       	pop	r28
    381a:	df 91       	pop	r29
    381c:	08 95       	ret

0000381e <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    381e:	df 93       	push	r29
    3820:	cf 93       	push	r28
    3822:	cd b7       	in	r28, 0x3d	; 61
    3824:	de b7       	in	r29, 0x3e	; 62
	LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
    3826:	e4 e3       	ldi	r30, 0x34	; 52
    3828:	f0 e0       	ldi	r31, 0x00	; 0
    382a:	8f ef       	ldi	r24, 0xFF	; 255
    382c:	80 83       	st	Z, r24
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    382e:	a1 e3       	ldi	r26, 0x31	; 49
    3830:	b0 e0       	ldi	r27, 0x00	; 0
    3832:	e1 e3       	ldi	r30, 0x31	; 49
    3834:	f0 e0       	ldi	r31, 0x00	; 0
    3836:	80 81       	ld	r24, Z
    3838:	80 67       	ori	r24, 0x70	; 112
    383a:	8c 93       	st	X, r24
	
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    383c:	88 e3       	ldi	r24, 0x38	; 56
    383e:	0e 94 2a 1c 	call	0x3854	; 0x3854 <LCD_sendCommand>
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    3842:	8c e0       	ldi	r24, 0x0C	; 12
    3844:	0e 94 2a 1c 	call	0x3854	; 0x3854 <LCD_sendCommand>
	
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    3848:	81 e0       	ldi	r24, 0x01	; 1
    384a:	0e 94 2a 1c 	call	0x3854	; 0x3854 <LCD_sendCommand>
}
    384e:	cf 91       	pop	r28
    3850:	df 91       	pop	r29
    3852:	08 95       	ret

00003854 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    3854:	df 93       	push	r29
    3856:	cf 93       	push	r28
    3858:	cd b7       	in	r28, 0x3d	; 61
    385a:	de b7       	in	r29, 0x3e	; 62
    385c:	e9 97       	sbiw	r28, 0x39	; 57
    385e:	0f b6       	in	r0, 0x3f	; 63
    3860:	f8 94       	cli
    3862:	de bf       	out	0x3e, r29	; 62
    3864:	0f be       	out	0x3f, r0	; 63
    3866:	cd bf       	out	0x3d, r28	; 61
    3868:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    386a:	a2 e3       	ldi	r26, 0x32	; 50
    386c:	b0 e0       	ldi	r27, 0x00	; 0
    386e:	e2 e3       	ldi	r30, 0x32	; 50
    3870:	f0 e0       	ldi	r31, 0x00	; 0
    3872:	80 81       	ld	r24, Z
    3874:	8f 7e       	andi	r24, 0xEF	; 239
    3876:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    3878:	a2 e3       	ldi	r26, 0x32	; 50
    387a:	b0 e0       	ldi	r27, 0x00	; 0
    387c:	e2 e3       	ldi	r30, 0x32	; 50
    387e:	f0 e0       	ldi	r31, 0x00	; 0
    3880:	80 81       	ld	r24, Z
    3882:	8f 7d       	andi	r24, 0xDF	; 223
    3884:	8c 93       	st	X, r24
    3886:	80 e0       	ldi	r24, 0x00	; 0
    3888:	90 e0       	ldi	r25, 0x00	; 0
    388a:	a0 e8       	ldi	r26, 0x80	; 128
    388c:	bf e3       	ldi	r27, 0x3F	; 63
    388e:	8d ab       	std	Y+53, r24	; 0x35
    3890:	9e ab       	std	Y+54, r25	; 0x36
    3892:	af ab       	std	Y+55, r26	; 0x37
    3894:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3896:	6d a9       	ldd	r22, Y+53	; 0x35
    3898:	7e a9       	ldd	r23, Y+54	; 0x36
    389a:	8f a9       	ldd	r24, Y+55	; 0x37
    389c:	98 ad       	ldd	r25, Y+56	; 0x38
    389e:	20 e0       	ldi	r18, 0x00	; 0
    38a0:	30 e0       	ldi	r19, 0x00	; 0
    38a2:	4a ef       	ldi	r20, 0xFA	; 250
    38a4:	54 e4       	ldi	r21, 0x44	; 68
    38a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38aa:	dc 01       	movw	r26, r24
    38ac:	cb 01       	movw	r24, r22
    38ae:	89 ab       	std	Y+49, r24	; 0x31
    38b0:	9a ab       	std	Y+50, r25	; 0x32
    38b2:	ab ab       	std	Y+51, r26	; 0x33
    38b4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    38b6:	69 a9       	ldd	r22, Y+49	; 0x31
    38b8:	7a a9       	ldd	r23, Y+50	; 0x32
    38ba:	8b a9       	ldd	r24, Y+51	; 0x33
    38bc:	9c a9       	ldd	r25, Y+52	; 0x34
    38be:	20 e0       	ldi	r18, 0x00	; 0
    38c0:	30 e0       	ldi	r19, 0x00	; 0
    38c2:	40 e8       	ldi	r20, 0x80	; 128
    38c4:	5f e3       	ldi	r21, 0x3F	; 63
    38c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38ca:	88 23       	and	r24, r24
    38cc:	2c f4       	brge	.+10     	; 0x38d8 <LCD_sendCommand+0x84>
		__ticks = 1;
    38ce:	81 e0       	ldi	r24, 0x01	; 1
    38d0:	90 e0       	ldi	r25, 0x00	; 0
    38d2:	98 ab       	std	Y+48, r25	; 0x30
    38d4:	8f a7       	std	Y+47, r24	; 0x2f
    38d6:	3f c0       	rjmp	.+126    	; 0x3956 <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    38d8:	69 a9       	ldd	r22, Y+49	; 0x31
    38da:	7a a9       	ldd	r23, Y+50	; 0x32
    38dc:	8b a9       	ldd	r24, Y+51	; 0x33
    38de:	9c a9       	ldd	r25, Y+52	; 0x34
    38e0:	20 e0       	ldi	r18, 0x00	; 0
    38e2:	3f ef       	ldi	r19, 0xFF	; 255
    38e4:	4f e7       	ldi	r20, 0x7F	; 127
    38e6:	57 e4       	ldi	r21, 0x47	; 71
    38e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38ec:	18 16       	cp	r1, r24
    38ee:	4c f5       	brge	.+82     	; 0x3942 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38f0:	6d a9       	ldd	r22, Y+53	; 0x35
    38f2:	7e a9       	ldd	r23, Y+54	; 0x36
    38f4:	8f a9       	ldd	r24, Y+55	; 0x37
    38f6:	98 ad       	ldd	r25, Y+56	; 0x38
    38f8:	20 e0       	ldi	r18, 0x00	; 0
    38fa:	30 e0       	ldi	r19, 0x00	; 0
    38fc:	40 e2       	ldi	r20, 0x20	; 32
    38fe:	51 e4       	ldi	r21, 0x41	; 65
    3900:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3904:	dc 01       	movw	r26, r24
    3906:	cb 01       	movw	r24, r22
    3908:	bc 01       	movw	r22, r24
    390a:	cd 01       	movw	r24, r26
    390c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3910:	dc 01       	movw	r26, r24
    3912:	cb 01       	movw	r24, r22
    3914:	98 ab       	std	Y+48, r25	; 0x30
    3916:	8f a7       	std	Y+47, r24	; 0x2f
    3918:	0f c0       	rjmp	.+30     	; 0x3938 <LCD_sendCommand+0xe4>
    391a:	88 ec       	ldi	r24, 0xC8	; 200
    391c:	90 e0       	ldi	r25, 0x00	; 0
    391e:	9e a7       	std	Y+46, r25	; 0x2e
    3920:	8d a7       	std	Y+45, r24	; 0x2d
    3922:	8d a5       	ldd	r24, Y+45	; 0x2d
    3924:	9e a5       	ldd	r25, Y+46	; 0x2e
    3926:	01 97       	sbiw	r24, 0x01	; 1
    3928:	f1 f7       	brne	.-4      	; 0x3926 <LCD_sendCommand+0xd2>
    392a:	9e a7       	std	Y+46, r25	; 0x2e
    392c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    392e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3930:	98 a9       	ldd	r25, Y+48	; 0x30
    3932:	01 97       	sbiw	r24, 0x01	; 1
    3934:	98 ab       	std	Y+48, r25	; 0x30
    3936:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3938:	8f a5       	ldd	r24, Y+47	; 0x2f
    393a:	98 a9       	ldd	r25, Y+48	; 0x30
    393c:	00 97       	sbiw	r24, 0x00	; 0
    393e:	69 f7       	brne	.-38     	; 0x391a <LCD_sendCommand+0xc6>
    3940:	14 c0       	rjmp	.+40     	; 0x396a <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3942:	69 a9       	ldd	r22, Y+49	; 0x31
    3944:	7a a9       	ldd	r23, Y+50	; 0x32
    3946:	8b a9       	ldd	r24, Y+51	; 0x33
    3948:	9c a9       	ldd	r25, Y+52	; 0x34
    394a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    394e:	dc 01       	movw	r26, r24
    3950:	cb 01       	movw	r24, r22
    3952:	98 ab       	std	Y+48, r25	; 0x30
    3954:	8f a7       	std	Y+47, r24	; 0x2f
    3956:	8f a5       	ldd	r24, Y+47	; 0x2f
    3958:	98 a9       	ldd	r25, Y+48	; 0x30
    395a:	9c a7       	std	Y+44, r25	; 0x2c
    395c:	8b a7       	std	Y+43, r24	; 0x2b
    395e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3960:	9c a5       	ldd	r25, Y+44	; 0x2c
    3962:	01 97       	sbiw	r24, 0x01	; 1
    3964:	f1 f7       	brne	.-4      	; 0x3962 <LCD_sendCommand+0x10e>
    3966:	9c a7       	std	Y+44, r25	; 0x2c
    3968:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    396a:	a2 e3       	ldi	r26, 0x32	; 50
    396c:	b0 e0       	ldi	r27, 0x00	; 0
    396e:	e2 e3       	ldi	r30, 0x32	; 50
    3970:	f0 e0       	ldi	r31, 0x00	; 0
    3972:	80 81       	ld	r24, Z
    3974:	80 64       	ori	r24, 0x40	; 64
    3976:	8c 93       	st	X, r24
    3978:	80 e0       	ldi	r24, 0x00	; 0
    397a:	90 e0       	ldi	r25, 0x00	; 0
    397c:	a0 e8       	ldi	r26, 0x80	; 128
    397e:	bf e3       	ldi	r27, 0x3F	; 63
    3980:	8f a3       	std	Y+39, r24	; 0x27
    3982:	98 a7       	std	Y+40, r25	; 0x28
    3984:	a9 a7       	std	Y+41, r26	; 0x29
    3986:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3988:	6f a1       	ldd	r22, Y+39	; 0x27
    398a:	78 a5       	ldd	r23, Y+40	; 0x28
    398c:	89 a5       	ldd	r24, Y+41	; 0x29
    398e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3990:	20 e0       	ldi	r18, 0x00	; 0
    3992:	30 e0       	ldi	r19, 0x00	; 0
    3994:	4a ef       	ldi	r20, 0xFA	; 250
    3996:	54 e4       	ldi	r21, 0x44	; 68
    3998:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    399c:	dc 01       	movw	r26, r24
    399e:	cb 01       	movw	r24, r22
    39a0:	8b a3       	std	Y+35, r24	; 0x23
    39a2:	9c a3       	std	Y+36, r25	; 0x24
    39a4:	ad a3       	std	Y+37, r26	; 0x25
    39a6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    39a8:	6b a1       	ldd	r22, Y+35	; 0x23
    39aa:	7c a1       	ldd	r23, Y+36	; 0x24
    39ac:	8d a1       	ldd	r24, Y+37	; 0x25
    39ae:	9e a1       	ldd	r25, Y+38	; 0x26
    39b0:	20 e0       	ldi	r18, 0x00	; 0
    39b2:	30 e0       	ldi	r19, 0x00	; 0
    39b4:	40 e8       	ldi	r20, 0x80	; 128
    39b6:	5f e3       	ldi	r21, 0x3F	; 63
    39b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    39bc:	88 23       	and	r24, r24
    39be:	2c f4       	brge	.+10     	; 0x39ca <LCD_sendCommand+0x176>
		__ticks = 1;
    39c0:	81 e0       	ldi	r24, 0x01	; 1
    39c2:	90 e0       	ldi	r25, 0x00	; 0
    39c4:	9a a3       	std	Y+34, r25	; 0x22
    39c6:	89 a3       	std	Y+33, r24	; 0x21
    39c8:	3f c0       	rjmp	.+126    	; 0x3a48 <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    39ca:	6b a1       	ldd	r22, Y+35	; 0x23
    39cc:	7c a1       	ldd	r23, Y+36	; 0x24
    39ce:	8d a1       	ldd	r24, Y+37	; 0x25
    39d0:	9e a1       	ldd	r25, Y+38	; 0x26
    39d2:	20 e0       	ldi	r18, 0x00	; 0
    39d4:	3f ef       	ldi	r19, 0xFF	; 255
    39d6:	4f e7       	ldi	r20, 0x7F	; 127
    39d8:	57 e4       	ldi	r21, 0x47	; 71
    39da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    39de:	18 16       	cp	r1, r24
    39e0:	4c f5       	brge	.+82     	; 0x3a34 <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39e2:	6f a1       	ldd	r22, Y+39	; 0x27
    39e4:	78 a5       	ldd	r23, Y+40	; 0x28
    39e6:	89 a5       	ldd	r24, Y+41	; 0x29
    39e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    39ea:	20 e0       	ldi	r18, 0x00	; 0
    39ec:	30 e0       	ldi	r19, 0x00	; 0
    39ee:	40 e2       	ldi	r20, 0x20	; 32
    39f0:	51 e4       	ldi	r21, 0x41	; 65
    39f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39f6:	dc 01       	movw	r26, r24
    39f8:	cb 01       	movw	r24, r22
    39fa:	bc 01       	movw	r22, r24
    39fc:	cd 01       	movw	r24, r26
    39fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a02:	dc 01       	movw	r26, r24
    3a04:	cb 01       	movw	r24, r22
    3a06:	9a a3       	std	Y+34, r25	; 0x22
    3a08:	89 a3       	std	Y+33, r24	; 0x21
    3a0a:	0f c0       	rjmp	.+30     	; 0x3a2a <LCD_sendCommand+0x1d6>
    3a0c:	88 ec       	ldi	r24, 0xC8	; 200
    3a0e:	90 e0       	ldi	r25, 0x00	; 0
    3a10:	98 a3       	std	Y+32, r25	; 0x20
    3a12:	8f 8f       	std	Y+31, r24	; 0x1f
    3a14:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3a16:	98 a1       	ldd	r25, Y+32	; 0x20
    3a18:	01 97       	sbiw	r24, 0x01	; 1
    3a1a:	f1 f7       	brne	.-4      	; 0x3a18 <LCD_sendCommand+0x1c4>
    3a1c:	98 a3       	std	Y+32, r25	; 0x20
    3a1e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a20:	89 a1       	ldd	r24, Y+33	; 0x21
    3a22:	9a a1       	ldd	r25, Y+34	; 0x22
    3a24:	01 97       	sbiw	r24, 0x01	; 1
    3a26:	9a a3       	std	Y+34, r25	; 0x22
    3a28:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a2a:	89 a1       	ldd	r24, Y+33	; 0x21
    3a2c:	9a a1       	ldd	r25, Y+34	; 0x22
    3a2e:	00 97       	sbiw	r24, 0x00	; 0
    3a30:	69 f7       	brne	.-38     	; 0x3a0c <LCD_sendCommand+0x1b8>
    3a32:	14 c0       	rjmp	.+40     	; 0x3a5c <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a34:	6b a1       	ldd	r22, Y+35	; 0x23
    3a36:	7c a1       	ldd	r23, Y+36	; 0x24
    3a38:	8d a1       	ldd	r24, Y+37	; 0x25
    3a3a:	9e a1       	ldd	r25, Y+38	; 0x26
    3a3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a40:	dc 01       	movw	r26, r24
    3a42:	cb 01       	movw	r24, r22
    3a44:	9a a3       	std	Y+34, r25	; 0x22
    3a46:	89 a3       	std	Y+33, r24	; 0x21
    3a48:	89 a1       	ldd	r24, Y+33	; 0x21
    3a4a:	9a a1       	ldd	r25, Y+34	; 0x22
    3a4c:	9e 8f       	std	Y+30, r25	; 0x1e
    3a4e:	8d 8f       	std	Y+29, r24	; 0x1d
    3a50:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a52:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3a54:	01 97       	sbiw	r24, 0x01	; 1
    3a56:	f1 f7       	brne	.-4      	; 0x3a54 <LCD_sendCommand+0x200>
    3a58:	9e 8f       	std	Y+30, r25	; 0x1e
    3a5a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    3a5c:	e5 e3       	ldi	r30, 0x35	; 53
    3a5e:	f0 e0       	ldi	r31, 0x00	; 0
    3a60:	89 ad       	ldd	r24, Y+57	; 0x39
    3a62:	80 83       	st	Z, r24
    3a64:	80 e0       	ldi	r24, 0x00	; 0
    3a66:	90 e0       	ldi	r25, 0x00	; 0
    3a68:	a0 e8       	ldi	r26, 0x80	; 128
    3a6a:	bf e3       	ldi	r27, 0x3F	; 63
    3a6c:	89 8f       	std	Y+25, r24	; 0x19
    3a6e:	9a 8f       	std	Y+26, r25	; 0x1a
    3a70:	ab 8f       	std	Y+27, r26	; 0x1b
    3a72:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a74:	69 8d       	ldd	r22, Y+25	; 0x19
    3a76:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a78:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a7c:	20 e0       	ldi	r18, 0x00	; 0
    3a7e:	30 e0       	ldi	r19, 0x00	; 0
    3a80:	4a ef       	ldi	r20, 0xFA	; 250
    3a82:	54 e4       	ldi	r21, 0x44	; 68
    3a84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a88:	dc 01       	movw	r26, r24
    3a8a:	cb 01       	movw	r24, r22
    3a8c:	8d 8b       	std	Y+21, r24	; 0x15
    3a8e:	9e 8b       	std	Y+22, r25	; 0x16
    3a90:	af 8b       	std	Y+23, r26	; 0x17
    3a92:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3a94:	6d 89       	ldd	r22, Y+21	; 0x15
    3a96:	7e 89       	ldd	r23, Y+22	; 0x16
    3a98:	8f 89       	ldd	r24, Y+23	; 0x17
    3a9a:	98 8d       	ldd	r25, Y+24	; 0x18
    3a9c:	20 e0       	ldi	r18, 0x00	; 0
    3a9e:	30 e0       	ldi	r19, 0x00	; 0
    3aa0:	40 e8       	ldi	r20, 0x80	; 128
    3aa2:	5f e3       	ldi	r21, 0x3F	; 63
    3aa4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3aa8:	88 23       	and	r24, r24
    3aaa:	2c f4       	brge	.+10     	; 0x3ab6 <LCD_sendCommand+0x262>
		__ticks = 1;
    3aac:	81 e0       	ldi	r24, 0x01	; 1
    3aae:	90 e0       	ldi	r25, 0x00	; 0
    3ab0:	9c 8b       	std	Y+20, r25	; 0x14
    3ab2:	8b 8b       	std	Y+19, r24	; 0x13
    3ab4:	3f c0       	rjmp	.+126    	; 0x3b34 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    3ab6:	6d 89       	ldd	r22, Y+21	; 0x15
    3ab8:	7e 89       	ldd	r23, Y+22	; 0x16
    3aba:	8f 89       	ldd	r24, Y+23	; 0x17
    3abc:	98 8d       	ldd	r25, Y+24	; 0x18
    3abe:	20 e0       	ldi	r18, 0x00	; 0
    3ac0:	3f ef       	ldi	r19, 0xFF	; 255
    3ac2:	4f e7       	ldi	r20, 0x7F	; 127
    3ac4:	57 e4       	ldi	r21, 0x47	; 71
    3ac6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3aca:	18 16       	cp	r1, r24
    3acc:	4c f5       	brge	.+82     	; 0x3b20 <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ace:	69 8d       	ldd	r22, Y+25	; 0x19
    3ad0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ad2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ad4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ad6:	20 e0       	ldi	r18, 0x00	; 0
    3ad8:	30 e0       	ldi	r19, 0x00	; 0
    3ada:	40 e2       	ldi	r20, 0x20	; 32
    3adc:	51 e4       	ldi	r21, 0x41	; 65
    3ade:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ae2:	dc 01       	movw	r26, r24
    3ae4:	cb 01       	movw	r24, r22
    3ae6:	bc 01       	movw	r22, r24
    3ae8:	cd 01       	movw	r24, r26
    3aea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aee:	dc 01       	movw	r26, r24
    3af0:	cb 01       	movw	r24, r22
    3af2:	9c 8b       	std	Y+20, r25	; 0x14
    3af4:	8b 8b       	std	Y+19, r24	; 0x13
    3af6:	0f c0       	rjmp	.+30     	; 0x3b16 <LCD_sendCommand+0x2c2>
    3af8:	88 ec       	ldi	r24, 0xC8	; 200
    3afa:	90 e0       	ldi	r25, 0x00	; 0
    3afc:	9a 8b       	std	Y+18, r25	; 0x12
    3afe:	89 8b       	std	Y+17, r24	; 0x11
    3b00:	89 89       	ldd	r24, Y+17	; 0x11
    3b02:	9a 89       	ldd	r25, Y+18	; 0x12
    3b04:	01 97       	sbiw	r24, 0x01	; 1
    3b06:	f1 f7       	brne	.-4      	; 0x3b04 <LCD_sendCommand+0x2b0>
    3b08:	9a 8b       	std	Y+18, r25	; 0x12
    3b0a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b0c:	8b 89       	ldd	r24, Y+19	; 0x13
    3b0e:	9c 89       	ldd	r25, Y+20	; 0x14
    3b10:	01 97       	sbiw	r24, 0x01	; 1
    3b12:	9c 8b       	std	Y+20, r25	; 0x14
    3b14:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b16:	8b 89       	ldd	r24, Y+19	; 0x13
    3b18:	9c 89       	ldd	r25, Y+20	; 0x14
    3b1a:	00 97       	sbiw	r24, 0x00	; 0
    3b1c:	69 f7       	brne	.-38     	; 0x3af8 <LCD_sendCommand+0x2a4>
    3b1e:	14 c0       	rjmp	.+40     	; 0x3b48 <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b20:	6d 89       	ldd	r22, Y+21	; 0x15
    3b22:	7e 89       	ldd	r23, Y+22	; 0x16
    3b24:	8f 89       	ldd	r24, Y+23	; 0x17
    3b26:	98 8d       	ldd	r25, Y+24	; 0x18
    3b28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b2c:	dc 01       	movw	r26, r24
    3b2e:	cb 01       	movw	r24, r22
    3b30:	9c 8b       	std	Y+20, r25	; 0x14
    3b32:	8b 8b       	std	Y+19, r24	; 0x13
    3b34:	8b 89       	ldd	r24, Y+19	; 0x13
    3b36:	9c 89       	ldd	r25, Y+20	; 0x14
    3b38:	98 8b       	std	Y+16, r25	; 0x10
    3b3a:	8f 87       	std	Y+15, r24	; 0x0f
    3b3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b3e:	98 89       	ldd	r25, Y+16	; 0x10
    3b40:	01 97       	sbiw	r24, 0x01	; 1
    3b42:	f1 f7       	brne	.-4      	; 0x3b40 <LCD_sendCommand+0x2ec>
    3b44:	98 8b       	std	Y+16, r25	; 0x10
    3b46:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    3b48:	a2 e3       	ldi	r26, 0x32	; 50
    3b4a:	b0 e0       	ldi	r27, 0x00	; 0
    3b4c:	e2 e3       	ldi	r30, 0x32	; 50
    3b4e:	f0 e0       	ldi	r31, 0x00	; 0
    3b50:	80 81       	ld	r24, Z
    3b52:	8f 7b       	andi	r24, 0xBF	; 191
    3b54:	8c 93       	st	X, r24
    3b56:	80 e0       	ldi	r24, 0x00	; 0
    3b58:	90 e0       	ldi	r25, 0x00	; 0
    3b5a:	a0 e8       	ldi	r26, 0x80	; 128
    3b5c:	bf e3       	ldi	r27, 0x3F	; 63
    3b5e:	8b 87       	std	Y+11, r24	; 0x0b
    3b60:	9c 87       	std	Y+12, r25	; 0x0c
    3b62:	ad 87       	std	Y+13, r26	; 0x0d
    3b64:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b66:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b68:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b6e:	20 e0       	ldi	r18, 0x00	; 0
    3b70:	30 e0       	ldi	r19, 0x00	; 0
    3b72:	4a ef       	ldi	r20, 0xFA	; 250
    3b74:	54 e4       	ldi	r21, 0x44	; 68
    3b76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b7a:	dc 01       	movw	r26, r24
    3b7c:	cb 01       	movw	r24, r22
    3b7e:	8f 83       	std	Y+7, r24	; 0x07
    3b80:	98 87       	std	Y+8, r25	; 0x08
    3b82:	a9 87       	std	Y+9, r26	; 0x09
    3b84:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b86:	6f 81       	ldd	r22, Y+7	; 0x07
    3b88:	78 85       	ldd	r23, Y+8	; 0x08
    3b8a:	89 85       	ldd	r24, Y+9	; 0x09
    3b8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b8e:	20 e0       	ldi	r18, 0x00	; 0
    3b90:	30 e0       	ldi	r19, 0x00	; 0
    3b92:	40 e8       	ldi	r20, 0x80	; 128
    3b94:	5f e3       	ldi	r21, 0x3F	; 63
    3b96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b9a:	88 23       	and	r24, r24
    3b9c:	2c f4       	brge	.+10     	; 0x3ba8 <LCD_sendCommand+0x354>
		__ticks = 1;
    3b9e:	81 e0       	ldi	r24, 0x01	; 1
    3ba0:	90 e0       	ldi	r25, 0x00	; 0
    3ba2:	9e 83       	std	Y+6, r25	; 0x06
    3ba4:	8d 83       	std	Y+5, r24	; 0x05
    3ba6:	3f c0       	rjmp	.+126    	; 0x3c26 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    3ba8:	6f 81       	ldd	r22, Y+7	; 0x07
    3baa:	78 85       	ldd	r23, Y+8	; 0x08
    3bac:	89 85       	ldd	r24, Y+9	; 0x09
    3bae:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bb0:	20 e0       	ldi	r18, 0x00	; 0
    3bb2:	3f ef       	ldi	r19, 0xFF	; 255
    3bb4:	4f e7       	ldi	r20, 0x7F	; 127
    3bb6:	57 e4       	ldi	r21, 0x47	; 71
    3bb8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3bbc:	18 16       	cp	r1, r24
    3bbe:	4c f5       	brge	.+82     	; 0x3c12 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bc0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bc2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bc8:	20 e0       	ldi	r18, 0x00	; 0
    3bca:	30 e0       	ldi	r19, 0x00	; 0
    3bcc:	40 e2       	ldi	r20, 0x20	; 32
    3bce:	51 e4       	ldi	r21, 0x41	; 65
    3bd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bd4:	dc 01       	movw	r26, r24
    3bd6:	cb 01       	movw	r24, r22
    3bd8:	bc 01       	movw	r22, r24
    3bda:	cd 01       	movw	r24, r26
    3bdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3be0:	dc 01       	movw	r26, r24
    3be2:	cb 01       	movw	r24, r22
    3be4:	9e 83       	std	Y+6, r25	; 0x06
    3be6:	8d 83       	std	Y+5, r24	; 0x05
    3be8:	0f c0       	rjmp	.+30     	; 0x3c08 <LCD_sendCommand+0x3b4>
    3bea:	88 ec       	ldi	r24, 0xC8	; 200
    3bec:	90 e0       	ldi	r25, 0x00	; 0
    3bee:	9c 83       	std	Y+4, r25	; 0x04
    3bf0:	8b 83       	std	Y+3, r24	; 0x03
    3bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    3bf4:	9c 81       	ldd	r25, Y+4	; 0x04
    3bf6:	01 97       	sbiw	r24, 0x01	; 1
    3bf8:	f1 f7       	brne	.-4      	; 0x3bf6 <LCD_sendCommand+0x3a2>
    3bfa:	9c 83       	std	Y+4, r25	; 0x04
    3bfc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bfe:	8d 81       	ldd	r24, Y+5	; 0x05
    3c00:	9e 81       	ldd	r25, Y+6	; 0x06
    3c02:	01 97       	sbiw	r24, 0x01	; 1
    3c04:	9e 83       	std	Y+6, r25	; 0x06
    3c06:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c08:	8d 81       	ldd	r24, Y+5	; 0x05
    3c0a:	9e 81       	ldd	r25, Y+6	; 0x06
    3c0c:	00 97       	sbiw	r24, 0x00	; 0
    3c0e:	69 f7       	brne	.-38     	; 0x3bea <LCD_sendCommand+0x396>
    3c10:	14 c0       	rjmp	.+40     	; 0x3c3a <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c12:	6f 81       	ldd	r22, Y+7	; 0x07
    3c14:	78 85       	ldd	r23, Y+8	; 0x08
    3c16:	89 85       	ldd	r24, Y+9	; 0x09
    3c18:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c1e:	dc 01       	movw	r26, r24
    3c20:	cb 01       	movw	r24, r22
    3c22:	9e 83       	std	Y+6, r25	; 0x06
    3c24:	8d 83       	std	Y+5, r24	; 0x05
    3c26:	8d 81       	ldd	r24, Y+5	; 0x05
    3c28:	9e 81       	ldd	r25, Y+6	; 0x06
    3c2a:	9a 83       	std	Y+2, r25	; 0x02
    3c2c:	89 83       	std	Y+1, r24	; 0x01
    3c2e:	89 81       	ldd	r24, Y+1	; 0x01
    3c30:	9a 81       	ldd	r25, Y+2	; 0x02
    3c32:	01 97       	sbiw	r24, 0x01	; 1
    3c34:	f1 f7       	brne	.-4      	; 0x3c32 <LCD_sendCommand+0x3de>
    3c36:	9a 83       	std	Y+2, r25	; 0x02
    3c38:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    3c3a:	e9 96       	adiw	r28, 0x39	; 57
    3c3c:	0f b6       	in	r0, 0x3f	; 63
    3c3e:	f8 94       	cli
    3c40:	de bf       	out	0x3e, r29	; 62
    3c42:	0f be       	out	0x3f, r0	; 63
    3c44:	cd bf       	out	0x3d, r28	; 61
    3c46:	cf 91       	pop	r28
    3c48:	df 91       	pop	r29
    3c4a:	08 95       	ret

00003c4c <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    3c4c:	df 93       	push	r29
    3c4e:	cf 93       	push	r28
    3c50:	cd b7       	in	r28, 0x3d	; 61
    3c52:	de b7       	in	r29, 0x3e	; 62
    3c54:	e9 97       	sbiw	r28, 0x39	; 57
    3c56:	0f b6       	in	r0, 0x3f	; 63
    3c58:	f8 94       	cli
    3c5a:	de bf       	out	0x3e, r29	; 62
    3c5c:	0f be       	out	0x3f, r0	; 63
    3c5e:	cd bf       	out	0x3d, r28	; 61
    3c60:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    3c62:	a2 e3       	ldi	r26, 0x32	; 50
    3c64:	b0 e0       	ldi	r27, 0x00	; 0
    3c66:	e2 e3       	ldi	r30, 0x32	; 50
    3c68:	f0 e0       	ldi	r31, 0x00	; 0
    3c6a:	80 81       	ld	r24, Z
    3c6c:	80 61       	ori	r24, 0x10	; 16
    3c6e:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    3c70:	a2 e3       	ldi	r26, 0x32	; 50
    3c72:	b0 e0       	ldi	r27, 0x00	; 0
    3c74:	e2 e3       	ldi	r30, 0x32	; 50
    3c76:	f0 e0       	ldi	r31, 0x00	; 0
    3c78:	80 81       	ld	r24, Z
    3c7a:	8f 7d       	andi	r24, 0xDF	; 223
    3c7c:	8c 93       	st	X, r24
    3c7e:	80 e0       	ldi	r24, 0x00	; 0
    3c80:	90 e0       	ldi	r25, 0x00	; 0
    3c82:	a0 e8       	ldi	r26, 0x80	; 128
    3c84:	bf e3       	ldi	r27, 0x3F	; 63
    3c86:	8d ab       	std	Y+53, r24	; 0x35
    3c88:	9e ab       	std	Y+54, r25	; 0x36
    3c8a:	af ab       	std	Y+55, r26	; 0x37
    3c8c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c8e:	6d a9       	ldd	r22, Y+53	; 0x35
    3c90:	7e a9       	ldd	r23, Y+54	; 0x36
    3c92:	8f a9       	ldd	r24, Y+55	; 0x37
    3c94:	98 ad       	ldd	r25, Y+56	; 0x38
    3c96:	20 e0       	ldi	r18, 0x00	; 0
    3c98:	30 e0       	ldi	r19, 0x00	; 0
    3c9a:	4a ef       	ldi	r20, 0xFA	; 250
    3c9c:	54 e4       	ldi	r21, 0x44	; 68
    3c9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ca2:	dc 01       	movw	r26, r24
    3ca4:	cb 01       	movw	r24, r22
    3ca6:	89 ab       	std	Y+49, r24	; 0x31
    3ca8:	9a ab       	std	Y+50, r25	; 0x32
    3caa:	ab ab       	std	Y+51, r26	; 0x33
    3cac:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3cae:	69 a9       	ldd	r22, Y+49	; 0x31
    3cb0:	7a a9       	ldd	r23, Y+50	; 0x32
    3cb2:	8b a9       	ldd	r24, Y+51	; 0x33
    3cb4:	9c a9       	ldd	r25, Y+52	; 0x34
    3cb6:	20 e0       	ldi	r18, 0x00	; 0
    3cb8:	30 e0       	ldi	r19, 0x00	; 0
    3cba:	40 e8       	ldi	r20, 0x80	; 128
    3cbc:	5f e3       	ldi	r21, 0x3F	; 63
    3cbe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3cc2:	88 23       	and	r24, r24
    3cc4:	2c f4       	brge	.+10     	; 0x3cd0 <LCD_displayCharacter+0x84>
		__ticks = 1;
    3cc6:	81 e0       	ldi	r24, 0x01	; 1
    3cc8:	90 e0       	ldi	r25, 0x00	; 0
    3cca:	98 ab       	std	Y+48, r25	; 0x30
    3ccc:	8f a7       	std	Y+47, r24	; 0x2f
    3cce:	3f c0       	rjmp	.+126    	; 0x3d4e <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    3cd0:	69 a9       	ldd	r22, Y+49	; 0x31
    3cd2:	7a a9       	ldd	r23, Y+50	; 0x32
    3cd4:	8b a9       	ldd	r24, Y+51	; 0x33
    3cd6:	9c a9       	ldd	r25, Y+52	; 0x34
    3cd8:	20 e0       	ldi	r18, 0x00	; 0
    3cda:	3f ef       	ldi	r19, 0xFF	; 255
    3cdc:	4f e7       	ldi	r20, 0x7F	; 127
    3cde:	57 e4       	ldi	r21, 0x47	; 71
    3ce0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ce4:	18 16       	cp	r1, r24
    3ce6:	4c f5       	brge	.+82     	; 0x3d3a <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ce8:	6d a9       	ldd	r22, Y+53	; 0x35
    3cea:	7e a9       	ldd	r23, Y+54	; 0x36
    3cec:	8f a9       	ldd	r24, Y+55	; 0x37
    3cee:	98 ad       	ldd	r25, Y+56	; 0x38
    3cf0:	20 e0       	ldi	r18, 0x00	; 0
    3cf2:	30 e0       	ldi	r19, 0x00	; 0
    3cf4:	40 e2       	ldi	r20, 0x20	; 32
    3cf6:	51 e4       	ldi	r21, 0x41	; 65
    3cf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cfc:	dc 01       	movw	r26, r24
    3cfe:	cb 01       	movw	r24, r22
    3d00:	bc 01       	movw	r22, r24
    3d02:	cd 01       	movw	r24, r26
    3d04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d08:	dc 01       	movw	r26, r24
    3d0a:	cb 01       	movw	r24, r22
    3d0c:	98 ab       	std	Y+48, r25	; 0x30
    3d0e:	8f a7       	std	Y+47, r24	; 0x2f
    3d10:	0f c0       	rjmp	.+30     	; 0x3d30 <LCD_displayCharacter+0xe4>
    3d12:	88 ec       	ldi	r24, 0xC8	; 200
    3d14:	90 e0       	ldi	r25, 0x00	; 0
    3d16:	9e a7       	std	Y+46, r25	; 0x2e
    3d18:	8d a7       	std	Y+45, r24	; 0x2d
    3d1a:	8d a5       	ldd	r24, Y+45	; 0x2d
    3d1c:	9e a5       	ldd	r25, Y+46	; 0x2e
    3d1e:	01 97       	sbiw	r24, 0x01	; 1
    3d20:	f1 f7       	brne	.-4      	; 0x3d1e <LCD_displayCharacter+0xd2>
    3d22:	9e a7       	std	Y+46, r25	; 0x2e
    3d24:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d26:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d28:	98 a9       	ldd	r25, Y+48	; 0x30
    3d2a:	01 97       	sbiw	r24, 0x01	; 1
    3d2c:	98 ab       	std	Y+48, r25	; 0x30
    3d2e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d30:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d32:	98 a9       	ldd	r25, Y+48	; 0x30
    3d34:	00 97       	sbiw	r24, 0x00	; 0
    3d36:	69 f7       	brne	.-38     	; 0x3d12 <LCD_displayCharacter+0xc6>
    3d38:	14 c0       	rjmp	.+40     	; 0x3d62 <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d3a:	69 a9       	ldd	r22, Y+49	; 0x31
    3d3c:	7a a9       	ldd	r23, Y+50	; 0x32
    3d3e:	8b a9       	ldd	r24, Y+51	; 0x33
    3d40:	9c a9       	ldd	r25, Y+52	; 0x34
    3d42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d46:	dc 01       	movw	r26, r24
    3d48:	cb 01       	movw	r24, r22
    3d4a:	98 ab       	std	Y+48, r25	; 0x30
    3d4c:	8f a7       	std	Y+47, r24	; 0x2f
    3d4e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d50:	98 a9       	ldd	r25, Y+48	; 0x30
    3d52:	9c a7       	std	Y+44, r25	; 0x2c
    3d54:	8b a7       	std	Y+43, r24	; 0x2b
    3d56:	8b a5       	ldd	r24, Y+43	; 0x2b
    3d58:	9c a5       	ldd	r25, Y+44	; 0x2c
    3d5a:	01 97       	sbiw	r24, 0x01	; 1
    3d5c:	f1 f7       	brne	.-4      	; 0x3d5a <LCD_displayCharacter+0x10e>
    3d5e:	9c a7       	std	Y+44, r25	; 0x2c
    3d60:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    3d62:	a2 e3       	ldi	r26, 0x32	; 50
    3d64:	b0 e0       	ldi	r27, 0x00	; 0
    3d66:	e2 e3       	ldi	r30, 0x32	; 50
    3d68:	f0 e0       	ldi	r31, 0x00	; 0
    3d6a:	80 81       	ld	r24, Z
    3d6c:	80 64       	ori	r24, 0x40	; 64
    3d6e:	8c 93       	st	X, r24
    3d70:	80 e0       	ldi	r24, 0x00	; 0
    3d72:	90 e0       	ldi	r25, 0x00	; 0
    3d74:	a0 e8       	ldi	r26, 0x80	; 128
    3d76:	bf e3       	ldi	r27, 0x3F	; 63
    3d78:	8f a3       	std	Y+39, r24	; 0x27
    3d7a:	98 a7       	std	Y+40, r25	; 0x28
    3d7c:	a9 a7       	std	Y+41, r26	; 0x29
    3d7e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d80:	6f a1       	ldd	r22, Y+39	; 0x27
    3d82:	78 a5       	ldd	r23, Y+40	; 0x28
    3d84:	89 a5       	ldd	r24, Y+41	; 0x29
    3d86:	9a a5       	ldd	r25, Y+42	; 0x2a
    3d88:	20 e0       	ldi	r18, 0x00	; 0
    3d8a:	30 e0       	ldi	r19, 0x00	; 0
    3d8c:	4a ef       	ldi	r20, 0xFA	; 250
    3d8e:	54 e4       	ldi	r21, 0x44	; 68
    3d90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d94:	dc 01       	movw	r26, r24
    3d96:	cb 01       	movw	r24, r22
    3d98:	8b a3       	std	Y+35, r24	; 0x23
    3d9a:	9c a3       	std	Y+36, r25	; 0x24
    3d9c:	ad a3       	std	Y+37, r26	; 0x25
    3d9e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3da0:	6b a1       	ldd	r22, Y+35	; 0x23
    3da2:	7c a1       	ldd	r23, Y+36	; 0x24
    3da4:	8d a1       	ldd	r24, Y+37	; 0x25
    3da6:	9e a1       	ldd	r25, Y+38	; 0x26
    3da8:	20 e0       	ldi	r18, 0x00	; 0
    3daa:	30 e0       	ldi	r19, 0x00	; 0
    3dac:	40 e8       	ldi	r20, 0x80	; 128
    3dae:	5f e3       	ldi	r21, 0x3F	; 63
    3db0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3db4:	88 23       	and	r24, r24
    3db6:	2c f4       	brge	.+10     	; 0x3dc2 <LCD_displayCharacter+0x176>
		__ticks = 1;
    3db8:	81 e0       	ldi	r24, 0x01	; 1
    3dba:	90 e0       	ldi	r25, 0x00	; 0
    3dbc:	9a a3       	std	Y+34, r25	; 0x22
    3dbe:	89 a3       	std	Y+33, r24	; 0x21
    3dc0:	3f c0       	rjmp	.+126    	; 0x3e40 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    3dc2:	6b a1       	ldd	r22, Y+35	; 0x23
    3dc4:	7c a1       	ldd	r23, Y+36	; 0x24
    3dc6:	8d a1       	ldd	r24, Y+37	; 0x25
    3dc8:	9e a1       	ldd	r25, Y+38	; 0x26
    3dca:	20 e0       	ldi	r18, 0x00	; 0
    3dcc:	3f ef       	ldi	r19, 0xFF	; 255
    3dce:	4f e7       	ldi	r20, 0x7F	; 127
    3dd0:	57 e4       	ldi	r21, 0x47	; 71
    3dd2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3dd6:	18 16       	cp	r1, r24
    3dd8:	4c f5       	brge	.+82     	; 0x3e2c <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dda:	6f a1       	ldd	r22, Y+39	; 0x27
    3ddc:	78 a5       	ldd	r23, Y+40	; 0x28
    3dde:	89 a5       	ldd	r24, Y+41	; 0x29
    3de0:	9a a5       	ldd	r25, Y+42	; 0x2a
    3de2:	20 e0       	ldi	r18, 0x00	; 0
    3de4:	30 e0       	ldi	r19, 0x00	; 0
    3de6:	40 e2       	ldi	r20, 0x20	; 32
    3de8:	51 e4       	ldi	r21, 0x41	; 65
    3dea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dee:	dc 01       	movw	r26, r24
    3df0:	cb 01       	movw	r24, r22
    3df2:	bc 01       	movw	r22, r24
    3df4:	cd 01       	movw	r24, r26
    3df6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dfa:	dc 01       	movw	r26, r24
    3dfc:	cb 01       	movw	r24, r22
    3dfe:	9a a3       	std	Y+34, r25	; 0x22
    3e00:	89 a3       	std	Y+33, r24	; 0x21
    3e02:	0f c0       	rjmp	.+30     	; 0x3e22 <LCD_displayCharacter+0x1d6>
    3e04:	88 ec       	ldi	r24, 0xC8	; 200
    3e06:	90 e0       	ldi	r25, 0x00	; 0
    3e08:	98 a3       	std	Y+32, r25	; 0x20
    3e0a:	8f 8f       	std	Y+31, r24	; 0x1f
    3e0c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3e0e:	98 a1       	ldd	r25, Y+32	; 0x20
    3e10:	01 97       	sbiw	r24, 0x01	; 1
    3e12:	f1 f7       	brne	.-4      	; 0x3e10 <LCD_displayCharacter+0x1c4>
    3e14:	98 a3       	std	Y+32, r25	; 0x20
    3e16:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e18:	89 a1       	ldd	r24, Y+33	; 0x21
    3e1a:	9a a1       	ldd	r25, Y+34	; 0x22
    3e1c:	01 97       	sbiw	r24, 0x01	; 1
    3e1e:	9a a3       	std	Y+34, r25	; 0x22
    3e20:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e22:	89 a1       	ldd	r24, Y+33	; 0x21
    3e24:	9a a1       	ldd	r25, Y+34	; 0x22
    3e26:	00 97       	sbiw	r24, 0x00	; 0
    3e28:	69 f7       	brne	.-38     	; 0x3e04 <LCD_displayCharacter+0x1b8>
    3e2a:	14 c0       	rjmp	.+40     	; 0x3e54 <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e2c:	6b a1       	ldd	r22, Y+35	; 0x23
    3e2e:	7c a1       	ldd	r23, Y+36	; 0x24
    3e30:	8d a1       	ldd	r24, Y+37	; 0x25
    3e32:	9e a1       	ldd	r25, Y+38	; 0x26
    3e34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e38:	dc 01       	movw	r26, r24
    3e3a:	cb 01       	movw	r24, r22
    3e3c:	9a a3       	std	Y+34, r25	; 0x22
    3e3e:	89 a3       	std	Y+33, r24	; 0x21
    3e40:	89 a1       	ldd	r24, Y+33	; 0x21
    3e42:	9a a1       	ldd	r25, Y+34	; 0x22
    3e44:	9e 8f       	std	Y+30, r25	; 0x1e
    3e46:	8d 8f       	std	Y+29, r24	; 0x1d
    3e48:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3e4a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3e4c:	01 97       	sbiw	r24, 0x01	; 1
    3e4e:	f1 f7       	brne	.-4      	; 0x3e4c <LCD_displayCharacter+0x200>
    3e50:	9e 8f       	std	Y+30, r25	; 0x1e
    3e52:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = data; /* out the required data char to the data bus D0 --> D7 */
    3e54:	e5 e3       	ldi	r30, 0x35	; 53
    3e56:	f0 e0       	ldi	r31, 0x00	; 0
    3e58:	89 ad       	ldd	r24, Y+57	; 0x39
    3e5a:	80 83       	st	Z, r24
    3e5c:	80 e0       	ldi	r24, 0x00	; 0
    3e5e:	90 e0       	ldi	r25, 0x00	; 0
    3e60:	a0 e8       	ldi	r26, 0x80	; 128
    3e62:	bf e3       	ldi	r27, 0x3F	; 63
    3e64:	89 8f       	std	Y+25, r24	; 0x19
    3e66:	9a 8f       	std	Y+26, r25	; 0x1a
    3e68:	ab 8f       	std	Y+27, r26	; 0x1b
    3e6a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e6c:	69 8d       	ldd	r22, Y+25	; 0x19
    3e6e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3e70:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e72:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e74:	20 e0       	ldi	r18, 0x00	; 0
    3e76:	30 e0       	ldi	r19, 0x00	; 0
    3e78:	4a ef       	ldi	r20, 0xFA	; 250
    3e7a:	54 e4       	ldi	r21, 0x44	; 68
    3e7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e80:	dc 01       	movw	r26, r24
    3e82:	cb 01       	movw	r24, r22
    3e84:	8d 8b       	std	Y+21, r24	; 0x15
    3e86:	9e 8b       	std	Y+22, r25	; 0x16
    3e88:	af 8b       	std	Y+23, r26	; 0x17
    3e8a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3e8c:	6d 89       	ldd	r22, Y+21	; 0x15
    3e8e:	7e 89       	ldd	r23, Y+22	; 0x16
    3e90:	8f 89       	ldd	r24, Y+23	; 0x17
    3e92:	98 8d       	ldd	r25, Y+24	; 0x18
    3e94:	20 e0       	ldi	r18, 0x00	; 0
    3e96:	30 e0       	ldi	r19, 0x00	; 0
    3e98:	40 e8       	ldi	r20, 0x80	; 128
    3e9a:	5f e3       	ldi	r21, 0x3F	; 63
    3e9c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3ea0:	88 23       	and	r24, r24
    3ea2:	2c f4       	brge	.+10     	; 0x3eae <LCD_displayCharacter+0x262>
		__ticks = 1;
    3ea4:	81 e0       	ldi	r24, 0x01	; 1
    3ea6:	90 e0       	ldi	r25, 0x00	; 0
    3ea8:	9c 8b       	std	Y+20, r25	; 0x14
    3eaa:	8b 8b       	std	Y+19, r24	; 0x13
    3eac:	3f c0       	rjmp	.+126    	; 0x3f2c <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    3eae:	6d 89       	ldd	r22, Y+21	; 0x15
    3eb0:	7e 89       	ldd	r23, Y+22	; 0x16
    3eb2:	8f 89       	ldd	r24, Y+23	; 0x17
    3eb4:	98 8d       	ldd	r25, Y+24	; 0x18
    3eb6:	20 e0       	ldi	r18, 0x00	; 0
    3eb8:	3f ef       	ldi	r19, 0xFF	; 255
    3eba:	4f e7       	ldi	r20, 0x7F	; 127
    3ebc:	57 e4       	ldi	r21, 0x47	; 71
    3ebe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ec2:	18 16       	cp	r1, r24
    3ec4:	4c f5       	brge	.+82     	; 0x3f18 <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ec6:	69 8d       	ldd	r22, Y+25	; 0x19
    3ec8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3eca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ecc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ece:	20 e0       	ldi	r18, 0x00	; 0
    3ed0:	30 e0       	ldi	r19, 0x00	; 0
    3ed2:	40 e2       	ldi	r20, 0x20	; 32
    3ed4:	51 e4       	ldi	r21, 0x41	; 65
    3ed6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3eda:	dc 01       	movw	r26, r24
    3edc:	cb 01       	movw	r24, r22
    3ede:	bc 01       	movw	r22, r24
    3ee0:	cd 01       	movw	r24, r26
    3ee2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ee6:	dc 01       	movw	r26, r24
    3ee8:	cb 01       	movw	r24, r22
    3eea:	9c 8b       	std	Y+20, r25	; 0x14
    3eec:	8b 8b       	std	Y+19, r24	; 0x13
    3eee:	0f c0       	rjmp	.+30     	; 0x3f0e <LCD_displayCharacter+0x2c2>
    3ef0:	88 ec       	ldi	r24, 0xC8	; 200
    3ef2:	90 e0       	ldi	r25, 0x00	; 0
    3ef4:	9a 8b       	std	Y+18, r25	; 0x12
    3ef6:	89 8b       	std	Y+17, r24	; 0x11
    3ef8:	89 89       	ldd	r24, Y+17	; 0x11
    3efa:	9a 89       	ldd	r25, Y+18	; 0x12
    3efc:	01 97       	sbiw	r24, 0x01	; 1
    3efe:	f1 f7       	brne	.-4      	; 0x3efc <LCD_displayCharacter+0x2b0>
    3f00:	9a 8b       	std	Y+18, r25	; 0x12
    3f02:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f04:	8b 89       	ldd	r24, Y+19	; 0x13
    3f06:	9c 89       	ldd	r25, Y+20	; 0x14
    3f08:	01 97       	sbiw	r24, 0x01	; 1
    3f0a:	9c 8b       	std	Y+20, r25	; 0x14
    3f0c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f0e:	8b 89       	ldd	r24, Y+19	; 0x13
    3f10:	9c 89       	ldd	r25, Y+20	; 0x14
    3f12:	00 97       	sbiw	r24, 0x00	; 0
    3f14:	69 f7       	brne	.-38     	; 0x3ef0 <LCD_displayCharacter+0x2a4>
    3f16:	14 c0       	rjmp	.+40     	; 0x3f40 <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f18:	6d 89       	ldd	r22, Y+21	; 0x15
    3f1a:	7e 89       	ldd	r23, Y+22	; 0x16
    3f1c:	8f 89       	ldd	r24, Y+23	; 0x17
    3f1e:	98 8d       	ldd	r25, Y+24	; 0x18
    3f20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f24:	dc 01       	movw	r26, r24
    3f26:	cb 01       	movw	r24, r22
    3f28:	9c 8b       	std	Y+20, r25	; 0x14
    3f2a:	8b 8b       	std	Y+19, r24	; 0x13
    3f2c:	8b 89       	ldd	r24, Y+19	; 0x13
    3f2e:	9c 89       	ldd	r25, Y+20	; 0x14
    3f30:	98 8b       	std	Y+16, r25	; 0x10
    3f32:	8f 87       	std	Y+15, r24	; 0x0f
    3f34:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f36:	98 89       	ldd	r25, Y+16	; 0x10
    3f38:	01 97       	sbiw	r24, 0x01	; 1
    3f3a:	f1 f7       	brne	.-4      	; 0x3f38 <LCD_displayCharacter+0x2ec>
    3f3c:	98 8b       	std	Y+16, r25	; 0x10
    3f3e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    3f40:	a2 e3       	ldi	r26, 0x32	; 50
    3f42:	b0 e0       	ldi	r27, 0x00	; 0
    3f44:	e2 e3       	ldi	r30, 0x32	; 50
    3f46:	f0 e0       	ldi	r31, 0x00	; 0
    3f48:	80 81       	ld	r24, Z
    3f4a:	8f 7b       	andi	r24, 0xBF	; 191
    3f4c:	8c 93       	st	X, r24
    3f4e:	80 e0       	ldi	r24, 0x00	; 0
    3f50:	90 e0       	ldi	r25, 0x00	; 0
    3f52:	a0 e8       	ldi	r26, 0x80	; 128
    3f54:	bf e3       	ldi	r27, 0x3F	; 63
    3f56:	8b 87       	std	Y+11, r24	; 0x0b
    3f58:	9c 87       	std	Y+12, r25	; 0x0c
    3f5a:	ad 87       	std	Y+13, r26	; 0x0d
    3f5c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f60:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f62:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f64:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f66:	20 e0       	ldi	r18, 0x00	; 0
    3f68:	30 e0       	ldi	r19, 0x00	; 0
    3f6a:	4a ef       	ldi	r20, 0xFA	; 250
    3f6c:	54 e4       	ldi	r21, 0x44	; 68
    3f6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f72:	dc 01       	movw	r26, r24
    3f74:	cb 01       	movw	r24, r22
    3f76:	8f 83       	std	Y+7, r24	; 0x07
    3f78:	98 87       	std	Y+8, r25	; 0x08
    3f7a:	a9 87       	std	Y+9, r26	; 0x09
    3f7c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f7e:	6f 81       	ldd	r22, Y+7	; 0x07
    3f80:	78 85       	ldd	r23, Y+8	; 0x08
    3f82:	89 85       	ldd	r24, Y+9	; 0x09
    3f84:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f86:	20 e0       	ldi	r18, 0x00	; 0
    3f88:	30 e0       	ldi	r19, 0x00	; 0
    3f8a:	40 e8       	ldi	r20, 0x80	; 128
    3f8c:	5f e3       	ldi	r21, 0x3F	; 63
    3f8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f92:	88 23       	and	r24, r24
    3f94:	2c f4       	brge	.+10     	; 0x3fa0 <LCD_displayCharacter+0x354>
		__ticks = 1;
    3f96:	81 e0       	ldi	r24, 0x01	; 1
    3f98:	90 e0       	ldi	r25, 0x00	; 0
    3f9a:	9e 83       	std	Y+6, r25	; 0x06
    3f9c:	8d 83       	std	Y+5, r24	; 0x05
    3f9e:	3f c0       	rjmp	.+126    	; 0x401e <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    3fa0:	6f 81       	ldd	r22, Y+7	; 0x07
    3fa2:	78 85       	ldd	r23, Y+8	; 0x08
    3fa4:	89 85       	ldd	r24, Y+9	; 0x09
    3fa6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fa8:	20 e0       	ldi	r18, 0x00	; 0
    3faa:	3f ef       	ldi	r19, 0xFF	; 255
    3fac:	4f e7       	ldi	r20, 0x7F	; 127
    3fae:	57 e4       	ldi	r21, 0x47	; 71
    3fb0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3fb4:	18 16       	cp	r1, r24
    3fb6:	4c f5       	brge	.+82     	; 0x400a <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fb8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3fba:	7c 85       	ldd	r23, Y+12	; 0x0c
    3fbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fc0:	20 e0       	ldi	r18, 0x00	; 0
    3fc2:	30 e0       	ldi	r19, 0x00	; 0
    3fc4:	40 e2       	ldi	r20, 0x20	; 32
    3fc6:	51 e4       	ldi	r21, 0x41	; 65
    3fc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fcc:	dc 01       	movw	r26, r24
    3fce:	cb 01       	movw	r24, r22
    3fd0:	bc 01       	movw	r22, r24
    3fd2:	cd 01       	movw	r24, r26
    3fd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fd8:	dc 01       	movw	r26, r24
    3fda:	cb 01       	movw	r24, r22
    3fdc:	9e 83       	std	Y+6, r25	; 0x06
    3fde:	8d 83       	std	Y+5, r24	; 0x05
    3fe0:	0f c0       	rjmp	.+30     	; 0x4000 <LCD_displayCharacter+0x3b4>
    3fe2:	88 ec       	ldi	r24, 0xC8	; 200
    3fe4:	90 e0       	ldi	r25, 0x00	; 0
    3fe6:	9c 83       	std	Y+4, r25	; 0x04
    3fe8:	8b 83       	std	Y+3, r24	; 0x03
    3fea:	8b 81       	ldd	r24, Y+3	; 0x03
    3fec:	9c 81       	ldd	r25, Y+4	; 0x04
    3fee:	01 97       	sbiw	r24, 0x01	; 1
    3ff0:	f1 f7       	brne	.-4      	; 0x3fee <LCD_displayCharacter+0x3a2>
    3ff2:	9c 83       	std	Y+4, r25	; 0x04
    3ff4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ff6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ff8:	9e 81       	ldd	r25, Y+6	; 0x06
    3ffa:	01 97       	sbiw	r24, 0x01	; 1
    3ffc:	9e 83       	std	Y+6, r25	; 0x06
    3ffe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4000:	8d 81       	ldd	r24, Y+5	; 0x05
    4002:	9e 81       	ldd	r25, Y+6	; 0x06
    4004:	00 97       	sbiw	r24, 0x00	; 0
    4006:	69 f7       	brne	.-38     	; 0x3fe2 <LCD_displayCharacter+0x396>
    4008:	14 c0       	rjmp	.+40     	; 0x4032 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    400a:	6f 81       	ldd	r22, Y+7	; 0x07
    400c:	78 85       	ldd	r23, Y+8	; 0x08
    400e:	89 85       	ldd	r24, Y+9	; 0x09
    4010:	9a 85       	ldd	r25, Y+10	; 0x0a
    4012:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4016:	dc 01       	movw	r26, r24
    4018:	cb 01       	movw	r24, r22
    401a:	9e 83       	std	Y+6, r25	; 0x06
    401c:	8d 83       	std	Y+5, r24	; 0x05
    401e:	8d 81       	ldd	r24, Y+5	; 0x05
    4020:	9e 81       	ldd	r25, Y+6	; 0x06
    4022:	9a 83       	std	Y+2, r25	; 0x02
    4024:	89 83       	std	Y+1, r24	; 0x01
    4026:	89 81       	ldd	r24, Y+1	; 0x01
    4028:	9a 81       	ldd	r25, Y+2	; 0x02
    402a:	01 97       	sbiw	r24, 0x01	; 1
    402c:	f1 f7       	brne	.-4      	; 0x402a <LCD_displayCharacter+0x3de>
    402e:	9a 83       	std	Y+2, r25	; 0x02
    4030:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */	
}
    4032:	e9 96       	adiw	r28, 0x39	; 57
    4034:	0f b6       	in	r0, 0x3f	; 63
    4036:	f8 94       	cli
    4038:	de bf       	out	0x3e, r29	; 62
    403a:	0f be       	out	0x3f, r0	; 63
    403c:	cd bf       	out	0x3d, r28	; 61
    403e:	cf 91       	pop	r28
    4040:	df 91       	pop	r29
    4042:	08 95       	ret

00004044 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    4044:	df 93       	push	r29
    4046:	cf 93       	push	r28
    4048:	00 d0       	rcall	.+0      	; 0x404a <LCD_displayString+0x6>
    404a:	0f 92       	push	r0
    404c:	cd b7       	in	r28, 0x3d	; 61
    404e:	de b7       	in	r29, 0x3e	; 62
    4050:	9b 83       	std	Y+3, r25	; 0x03
    4052:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    4054:	19 82       	std	Y+1, r1	; 0x01
    4056:	0e c0       	rjmp	.+28     	; 0x4074 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    4058:	89 81       	ldd	r24, Y+1	; 0x01
    405a:	28 2f       	mov	r18, r24
    405c:	30 e0       	ldi	r19, 0x00	; 0
    405e:	8a 81       	ldd	r24, Y+2	; 0x02
    4060:	9b 81       	ldd	r25, Y+3	; 0x03
    4062:	fc 01       	movw	r30, r24
    4064:	e2 0f       	add	r30, r18
    4066:	f3 1f       	adc	r31, r19
    4068:	80 81       	ld	r24, Z
    406a:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <LCD_displayCharacter>
		i++;
    406e:	89 81       	ldd	r24, Y+1	; 0x01
    4070:	8f 5f       	subi	r24, 0xFF	; 255
    4072:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    4074:	89 81       	ldd	r24, Y+1	; 0x01
    4076:	28 2f       	mov	r18, r24
    4078:	30 e0       	ldi	r19, 0x00	; 0
    407a:	8a 81       	ldd	r24, Y+2	; 0x02
    407c:	9b 81       	ldd	r25, Y+3	; 0x03
    407e:	fc 01       	movw	r30, r24
    4080:	e2 0f       	add	r30, r18
    4082:	f3 1f       	adc	r31, r19
    4084:	80 81       	ld	r24, Z
    4086:	88 23       	and	r24, r24
    4088:	39 f7       	brne	.-50     	; 0x4058 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    408a:	0f 90       	pop	r0
    408c:	0f 90       	pop	r0
    408e:	0f 90       	pop	r0
    4090:	cf 91       	pop	r28
    4092:	df 91       	pop	r29
    4094:	08 95       	ret

00004096 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    4096:	df 93       	push	r29
    4098:	cf 93       	push	r28
    409a:	00 d0       	rcall	.+0      	; 0x409c <LCD_goToRowColumn+0x6>
    409c:	00 d0       	rcall	.+0      	; 0x409e <LCD_goToRowColumn+0x8>
    409e:	0f 92       	push	r0
    40a0:	cd b7       	in	r28, 0x3d	; 61
    40a2:	de b7       	in	r29, 0x3e	; 62
    40a4:	8a 83       	std	Y+2, r24	; 0x02
    40a6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    40a8:	8a 81       	ldd	r24, Y+2	; 0x02
    40aa:	28 2f       	mov	r18, r24
    40ac:	30 e0       	ldi	r19, 0x00	; 0
    40ae:	3d 83       	std	Y+5, r19	; 0x05
    40b0:	2c 83       	std	Y+4, r18	; 0x04
    40b2:	8c 81       	ldd	r24, Y+4	; 0x04
    40b4:	9d 81       	ldd	r25, Y+5	; 0x05
    40b6:	81 30       	cpi	r24, 0x01	; 1
    40b8:	91 05       	cpc	r25, r1
    40ba:	c1 f0       	breq	.+48     	; 0x40ec <LCD_goToRowColumn+0x56>
    40bc:	2c 81       	ldd	r18, Y+4	; 0x04
    40be:	3d 81       	ldd	r19, Y+5	; 0x05
    40c0:	22 30       	cpi	r18, 0x02	; 2
    40c2:	31 05       	cpc	r19, r1
    40c4:	2c f4       	brge	.+10     	; 0x40d0 <LCD_goToRowColumn+0x3a>
    40c6:	8c 81       	ldd	r24, Y+4	; 0x04
    40c8:	9d 81       	ldd	r25, Y+5	; 0x05
    40ca:	00 97       	sbiw	r24, 0x00	; 0
    40cc:	61 f0       	breq	.+24     	; 0x40e6 <LCD_goToRowColumn+0x50>
    40ce:	19 c0       	rjmp	.+50     	; 0x4102 <LCD_goToRowColumn+0x6c>
    40d0:	2c 81       	ldd	r18, Y+4	; 0x04
    40d2:	3d 81       	ldd	r19, Y+5	; 0x05
    40d4:	22 30       	cpi	r18, 0x02	; 2
    40d6:	31 05       	cpc	r19, r1
    40d8:	69 f0       	breq	.+26     	; 0x40f4 <LCD_goToRowColumn+0x5e>
    40da:	8c 81       	ldd	r24, Y+4	; 0x04
    40dc:	9d 81       	ldd	r25, Y+5	; 0x05
    40de:	83 30       	cpi	r24, 0x03	; 3
    40e0:	91 05       	cpc	r25, r1
    40e2:	61 f0       	breq	.+24     	; 0x40fc <LCD_goToRowColumn+0x66>
    40e4:	0e c0       	rjmp	.+28     	; 0x4102 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    40e6:	8b 81       	ldd	r24, Y+3	; 0x03
    40e8:	89 83       	std	Y+1, r24	; 0x01
    40ea:	0b c0       	rjmp	.+22     	; 0x4102 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    40ec:	8b 81       	ldd	r24, Y+3	; 0x03
    40ee:	80 5c       	subi	r24, 0xC0	; 192
    40f0:	89 83       	std	Y+1, r24	; 0x01
    40f2:	07 c0       	rjmp	.+14     	; 0x4102 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    40f4:	8b 81       	ldd	r24, Y+3	; 0x03
    40f6:	80 5f       	subi	r24, 0xF0	; 240
    40f8:	89 83       	std	Y+1, r24	; 0x01
    40fa:	03 c0       	rjmp	.+6      	; 0x4102 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    40fc:	8b 81       	ldd	r24, Y+3	; 0x03
    40fe:	80 5b       	subi	r24, 0xB0	; 176
    4100:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    4102:	89 81       	ldd	r24, Y+1	; 0x01
    4104:	80 68       	ori	r24, 0x80	; 128
    4106:	0e 94 2a 1c 	call	0x3854	; 0x3854 <LCD_sendCommand>
}
    410a:	0f 90       	pop	r0
    410c:	0f 90       	pop	r0
    410e:	0f 90       	pop	r0
    4110:	0f 90       	pop	r0
    4112:	0f 90       	pop	r0
    4114:	cf 91       	pop	r28
    4116:	df 91       	pop	r29
    4118:	08 95       	ret

0000411a <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    411a:	df 93       	push	r29
    411c:	cf 93       	push	r28
    411e:	00 d0       	rcall	.+0      	; 0x4120 <LCD_displayStringRowColumn+0x6>
    4120:	00 d0       	rcall	.+0      	; 0x4122 <LCD_displayStringRowColumn+0x8>
    4122:	cd b7       	in	r28, 0x3d	; 61
    4124:	de b7       	in	r29, 0x3e	; 62
    4126:	89 83       	std	Y+1, r24	; 0x01
    4128:	6a 83       	std	Y+2, r22	; 0x02
    412a:	5c 83       	std	Y+4, r21	; 0x04
    412c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    412e:	89 81       	ldd	r24, Y+1	; 0x01
    4130:	6a 81       	ldd	r22, Y+2	; 0x02
    4132:	0e 94 4b 20 	call	0x4096	; 0x4096 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    4136:	8b 81       	ldd	r24, Y+3	; 0x03
    4138:	9c 81       	ldd	r25, Y+4	; 0x04
    413a:	0e 94 22 20 	call	0x4044	; 0x4044 <LCD_displayString>
}
    413e:	0f 90       	pop	r0
    4140:	0f 90       	pop	r0
    4142:	0f 90       	pop	r0
    4144:	0f 90       	pop	r0
    4146:	cf 91       	pop	r28
    4148:	df 91       	pop	r29
    414a:	08 95       	ret

0000414c <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    414c:	df 93       	push	r29
    414e:	cf 93       	push	r28
    4150:	cd b7       	in	r28, 0x3d	; 61
    4152:	de b7       	in	r29, 0x3e	; 62
    4154:	62 97       	sbiw	r28, 0x12	; 18
    4156:	0f b6       	in	r0, 0x3f	; 63
    4158:	f8 94       	cli
    415a:	de bf       	out	0x3e, r29	; 62
    415c:	0f be       	out	0x3f, r0	; 63
    415e:	cd bf       	out	0x3d, r28	; 61
    4160:	9a 8b       	std	Y+18, r25	; 0x12
    4162:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    4164:	89 89       	ldd	r24, Y+17	; 0x11
    4166:	9a 89       	ldd	r25, Y+18	; 0x12
    4168:	9e 01       	movw	r18, r28
    416a:	2f 5f       	subi	r18, 0xFF	; 255
    416c:	3f 4f       	sbci	r19, 0xFF	; 255
    416e:	b9 01       	movw	r22, r18
    4170:	4a e0       	ldi	r20, 0x0A	; 10
    4172:	50 e0       	ldi	r21, 0x00	; 0
    4174:	0e 94 18 22 	call	0x4430	; 0x4430 <itoa>
   LCD_displayString(buff);
    4178:	ce 01       	movw	r24, r28
    417a:	01 96       	adiw	r24, 0x01	; 1
    417c:	0e 94 22 20 	call	0x4044	; 0x4044 <LCD_displayString>
}
    4180:	62 96       	adiw	r28, 0x12	; 18
    4182:	0f b6       	in	r0, 0x3f	; 63
    4184:	f8 94       	cli
    4186:	de bf       	out	0x3e, r29	; 62
    4188:	0f be       	out	0x3f, r0	; 63
    418a:	cd bf       	out	0x3d, r28	; 61
    418c:	cf 91       	pop	r28
    418e:	df 91       	pop	r29
    4190:	08 95       	ret

00004192 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    4192:	df 93       	push	r29
    4194:	cf 93       	push	r28
    4196:	cd b7       	in	r28, 0x3d	; 61
    4198:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    419a:	81 e0       	ldi	r24, 0x01	; 1
    419c:	0e 94 2a 1c 	call	0x3854	; 0x3854 <LCD_sendCommand>
}
    41a0:	cf 91       	pop	r28
    41a2:	df 91       	pop	r29
    41a4:	08 95       	ret

000041a6 <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(const  UART_ConfigType * Config_Ptr)
{
    41a6:	df 93       	push	r29
    41a8:	cf 93       	push	r28
    41aa:	00 d0       	rcall	.+0      	; 0x41ac <UART_init+0x6>
    41ac:	cd b7       	in	r28, 0x3d	; 61
    41ae:	de b7       	in	r29, 0x3e	; 62
    41b0:	9a 83       	std	Y+2, r25	; 0x02
    41b2:	89 83       	std	Y+1, r24	; 0x01
	/* U2X = 1 for double transmission speed */
	UCSRA =(UCSRC &0XFD )|((Config_Ptr->  OPERATION_MODE )<<1);
    41b4:	ab e2       	ldi	r26, 0x2B	; 43
    41b6:	b0 e0       	ldi	r27, 0x00	; 0
    41b8:	e0 e4       	ldi	r30, 0x40	; 64
    41ba:	f0 e0       	ldi	r31, 0x00	; 0
    41bc:	80 81       	ld	r24, Z
    41be:	28 2f       	mov	r18, r24
    41c0:	2d 7f       	andi	r18, 0xFD	; 253
    41c2:	e9 81       	ldd	r30, Y+1	; 0x01
    41c4:	fa 81       	ldd	r31, Y+2	; 0x02
    41c6:	83 81       	ldd	r24, Z+3	; 0x03
    41c8:	88 2f       	mov	r24, r24
    41ca:	90 e0       	ldi	r25, 0x00	; 0
    41cc:	88 0f       	add	r24, r24
    41ce:	99 1f       	adc	r25, r25
    41d0:	82 2b       	or	r24, r18
    41d2:	8c 93       	st	X, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    41d4:	ea e2       	ldi	r30, 0x2A	; 42
    41d6:	f0 e0       	ldi	r31, 0x00	; 0
    41d8:	88 e1       	ldi	r24, 0x18	; 24
    41da:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    41dc:	e0 e4       	ldi	r30, 0x40	; 64
    41de:	f0 e0       	ldi	r31, 0x00	; 0
    41e0:	86 e8       	ldi	r24, 0x86	; 134
    41e2:	80 83       	st	Z, r24
	UCSRC=(UCSRC &0XFB )|((Config_Ptr-> STOP_BIT)<<3);
    41e4:	a0 e4       	ldi	r26, 0x40	; 64
    41e6:	b0 e0       	ldi	r27, 0x00	; 0
    41e8:	e0 e4       	ldi	r30, 0x40	; 64
    41ea:	f0 e0       	ldi	r31, 0x00	; 0
    41ec:	80 81       	ld	r24, Z
    41ee:	28 2f       	mov	r18, r24
    41f0:	2b 7f       	andi	r18, 0xFB	; 251
    41f2:	e9 81       	ldd	r30, Y+1	; 0x01
    41f4:	fa 81       	ldd	r31, Y+2	; 0x02
    41f6:	80 81       	ld	r24, Z
    41f8:	88 2f       	mov	r24, r24
    41fa:	90 e0       	ldi	r25, 0x00	; 0
    41fc:	88 0f       	add	r24, r24
    41fe:	99 1f       	adc	r25, r25
    4200:	88 0f       	add	r24, r24
    4202:	99 1f       	adc	r25, r25
    4204:	88 0f       	add	r24, r24
    4206:	99 1f       	adc	r25, r25
    4208:	82 2b       	or	r24, r18
    420a:	8c 93       	st	X, r24
	UCSRC=(UCSRC &0XDF )|((Config_Ptr-> MODE)<<6);
    420c:	a0 e4       	ldi	r26, 0x40	; 64
    420e:	b0 e0       	ldi	r27, 0x00	; 0
    4210:	e0 e4       	ldi	r30, 0x40	; 64
    4212:	f0 e0       	ldi	r31, 0x00	; 0
    4214:	80 81       	ld	r24, Z
    4216:	28 2f       	mov	r18, r24
    4218:	2f 7d       	andi	r18, 0xDF	; 223
    421a:	e9 81       	ldd	r30, Y+1	; 0x01
    421c:	fa 81       	ldd	r31, Y+2	; 0x02
    421e:	81 81       	ldd	r24, Z+1	; 0x01
    4220:	88 2f       	mov	r24, r24
    4222:	90 e0       	ldi	r25, 0x00	; 0
    4224:	00 24       	eor	r0, r0
    4226:	96 95       	lsr	r25
    4228:	87 95       	ror	r24
    422a:	07 94       	ror	r0
    422c:	96 95       	lsr	r25
    422e:	87 95       	ror	r24
    4230:	07 94       	ror	r0
    4232:	98 2f       	mov	r25, r24
    4234:	80 2d       	mov	r24, r0
    4236:	82 2b       	or	r24, r18
    4238:	8c 93       	st	X, r24
	UCSRC=(UCSRC &0XE7 )|((Config_Ptr-> PARITY_MODE)<<4);
    423a:	a0 e4       	ldi	r26, 0x40	; 64
    423c:	b0 e0       	ldi	r27, 0x00	; 0
    423e:	e0 e4       	ldi	r30, 0x40	; 64
    4240:	f0 e0       	ldi	r31, 0x00	; 0
    4242:	80 81       	ld	r24, Z
    4244:	28 2f       	mov	r18, r24
    4246:	27 7e       	andi	r18, 0xE7	; 231
    4248:	e9 81       	ldd	r30, Y+1	; 0x01
    424a:	fa 81       	ldd	r31, Y+2	; 0x02
    424c:	82 81       	ldd	r24, Z+2	; 0x02
    424e:	88 2f       	mov	r24, r24
    4250:	90 e0       	ldi	r25, 0x00	; 0
    4252:	82 95       	swap	r24
    4254:	92 95       	swap	r25
    4256:	90 7f       	andi	r25, 0xF0	; 240
    4258:	98 27       	eor	r25, r24
    425a:	80 7f       	andi	r24, 0xF0	; 240
    425c:	98 27       	eor	r25, r24
    425e:	82 2b       	or	r24, r18
    4260:	8c 93       	st	X, r24
	



	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
if (	Config_Ptr->  OPERATION_MODE==ASYNCHRONOUS_DOUBLE_SPEED_MODE){
    4262:	e9 81       	ldd	r30, Y+1	; 0x01
    4264:	fa 81       	ldd	r31, Y+2	; 0x02
    4266:	83 81       	ldd	r24, Z+3	; 0x03
    4268:	81 30       	cpi	r24, 0x01	; 1
    426a:	41 f4       	brne	.+16     	; 0x427c <UART_init+0xd6>
	UBRRH = BAUD_PRESCALE2>>8;
    426c:	e0 e4       	ldi	r30, 0x40	; 64
    426e:	f0 e0       	ldi	r31, 0x00	; 0
    4270:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE2;}
    4272:	e9 e2       	ldi	r30, 0x29	; 41
    4274:	f0 e0       	ldi	r31, 0x00	; 0
    4276:	87 e6       	ldi	r24, 0x67	; 103
    4278:	80 83       	st	Z, r24
    427a:	0c c0       	rjmp	.+24     	; 0x4294 <UART_init+0xee>
else if (	Config_Ptr->  OPERATION_MODE==ASYNCHRONOUS_NORMAL_MODE){
    427c:	e9 81       	ldd	r30, Y+1	; 0x01
    427e:	fa 81       	ldd	r31, Y+2	; 0x02
    4280:	83 81       	ldd	r24, Z+3	; 0x03
    4282:	88 23       	and	r24, r24
    4284:	39 f4       	brne	.+14     	; 0x4294 <UART_init+0xee>
	UBRRH = BAUD_PRESCALE1>>8;
    4286:	e0 e4       	ldi	r30, 0x40	; 64
    4288:	f0 e0       	ldi	r31, 0x00	; 0
    428a:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE1;}
    428c:	e9 e2       	ldi	r30, 0x29	; 41
    428e:	f0 e0       	ldi	r31, 0x00	; 0
    4290:	83 e3       	ldi	r24, 0x33	; 51
    4292:	80 83       	st	Z, r24
}
    4294:	0f 90       	pop	r0
    4296:	0f 90       	pop	r0
    4298:	cf 91       	pop	r28
    429a:	df 91       	pop	r29
    429c:	08 95       	ret

0000429e <UART_sendByte>:
	
void UART_sendByte(const uint8 data)
{
    429e:	df 93       	push	r29
    42a0:	cf 93       	push	r28
    42a2:	0f 92       	push	r0
    42a4:	cd b7       	in	r28, 0x3d	; 61
    42a6:	de b7       	in	r29, 0x3e	; 62
    42a8:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    42aa:	eb e2       	ldi	r30, 0x2B	; 43
    42ac:	f0 e0       	ldi	r31, 0x00	; 0
    42ae:	80 81       	ld	r24, Z
    42b0:	88 2f       	mov	r24, r24
    42b2:	90 e0       	ldi	r25, 0x00	; 0
    42b4:	80 72       	andi	r24, 0x20	; 32
    42b6:	90 70       	andi	r25, 0x00	; 0
    42b8:	00 97       	sbiw	r24, 0x00	; 0
    42ba:	b9 f3       	breq	.-18     	; 0x42aa <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
    42bc:	ec e2       	ldi	r30, 0x2C	; 44
    42be:	f0 e0       	ldi	r31, 0x00	; 0
    42c0:	89 81       	ldd	r24, Y+1	; 0x01
    42c2:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/	
}
    42c4:	0f 90       	pop	r0
    42c6:	cf 91       	pop	r28
    42c8:	df 91       	pop	r29
    42ca:	08 95       	ret

000042cc <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    42cc:	df 93       	push	r29
    42ce:	cf 93       	push	r28
    42d0:	cd b7       	in	r28, 0x3d	; 61
    42d2:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    42d4:	eb e2       	ldi	r30, 0x2B	; 43
    42d6:	f0 e0       	ldi	r31, 0x00	; 0
    42d8:	80 81       	ld	r24, Z
    42da:	88 23       	and	r24, r24
    42dc:	dc f7       	brge	.-10     	; 0x42d4 <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
    42de:	ec e2       	ldi	r30, 0x2C	; 44
    42e0:	f0 e0       	ldi	r31, 0x00	; 0
    42e2:	80 81       	ld	r24, Z
}
    42e4:	cf 91       	pop	r28
    42e6:	df 91       	pop	r29
    42e8:	08 95       	ret

000042ea <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    42ea:	df 93       	push	r29
    42ec:	cf 93       	push	r28
    42ee:	00 d0       	rcall	.+0      	; 0x42f0 <UART_sendString+0x6>
    42f0:	0f 92       	push	r0
    42f2:	cd b7       	in	r28, 0x3d	; 61
    42f4:	de b7       	in	r29, 0x3e	; 62
    42f6:	9b 83       	std	Y+3, r25	; 0x03
    42f8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    42fa:	19 82       	std	Y+1, r1	; 0x01
    42fc:	0e c0       	rjmp	.+28     	; 0x431a <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    42fe:	89 81       	ldd	r24, Y+1	; 0x01
    4300:	28 2f       	mov	r18, r24
    4302:	30 e0       	ldi	r19, 0x00	; 0
    4304:	8a 81       	ldd	r24, Y+2	; 0x02
    4306:	9b 81       	ldd	r25, Y+3	; 0x03
    4308:	fc 01       	movw	r30, r24
    430a:	e2 0f       	add	r30, r18
    430c:	f3 1f       	adc	r31, r19
    430e:	80 81       	ld	r24, Z
    4310:	0e 94 4f 21 	call	0x429e	; 0x429e <UART_sendByte>
		i++;
    4314:	89 81       	ldd	r24, Y+1	; 0x01
    4316:	8f 5f       	subi	r24, 0xFF	; 255
    4318:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    431a:	89 81       	ldd	r24, Y+1	; 0x01
    431c:	28 2f       	mov	r18, r24
    431e:	30 e0       	ldi	r19, 0x00	; 0
    4320:	8a 81       	ldd	r24, Y+2	; 0x02
    4322:	9b 81       	ldd	r25, Y+3	; 0x03
    4324:	fc 01       	movw	r30, r24
    4326:	e2 0f       	add	r30, r18
    4328:	f3 1f       	adc	r31, r19
    432a:	80 81       	ld	r24, Z
    432c:	88 23       	and	r24, r24
    432e:	39 f7       	brne	.-50     	; 0x42fe <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    4330:	0f 90       	pop	r0
    4332:	0f 90       	pop	r0
    4334:	0f 90       	pop	r0
    4336:	cf 91       	pop	r28
    4338:	df 91       	pop	r29
    433a:	08 95       	ret

0000433c <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    433c:	0f 93       	push	r16
    433e:	1f 93       	push	r17
    4340:	df 93       	push	r29
    4342:	cf 93       	push	r28
    4344:	00 d0       	rcall	.+0      	; 0x4346 <UART_receiveString+0xa>
    4346:	0f 92       	push	r0
    4348:	cd b7       	in	r28, 0x3d	; 61
    434a:	de b7       	in	r29, 0x3e	; 62
    434c:	9b 83       	std	Y+3, r25	; 0x03
    434e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    4350:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    4352:	89 81       	ldd	r24, Y+1	; 0x01
    4354:	28 2f       	mov	r18, r24
    4356:	30 e0       	ldi	r19, 0x00	; 0
    4358:	8a 81       	ldd	r24, Y+2	; 0x02
    435a:	9b 81       	ldd	r25, Y+3	; 0x03
    435c:	8c 01       	movw	r16, r24
    435e:	02 0f       	add	r16, r18
    4360:	13 1f       	adc	r17, r19
    4362:	0e 94 66 21 	call	0x42cc	; 0x42cc <UART_recieveByte>
    4366:	f8 01       	movw	r30, r16
    4368:	80 83       	st	Z, r24
    436a:	0f c0       	rjmp	.+30     	; 0x438a <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    436c:	89 81       	ldd	r24, Y+1	; 0x01
    436e:	8f 5f       	subi	r24, 0xFF	; 255
    4370:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    4372:	89 81       	ldd	r24, Y+1	; 0x01
    4374:	28 2f       	mov	r18, r24
    4376:	30 e0       	ldi	r19, 0x00	; 0
    4378:	8a 81       	ldd	r24, Y+2	; 0x02
    437a:	9b 81       	ldd	r25, Y+3	; 0x03
    437c:	8c 01       	movw	r16, r24
    437e:	02 0f       	add	r16, r18
    4380:	13 1f       	adc	r17, r19
    4382:	0e 94 66 21 	call	0x42cc	; 0x42cc <UART_recieveByte>
    4386:	f8 01       	movw	r30, r16
    4388:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    438a:	89 81       	ldd	r24, Y+1	; 0x01
    438c:	28 2f       	mov	r18, r24
    438e:	30 e0       	ldi	r19, 0x00	; 0
    4390:	8a 81       	ldd	r24, Y+2	; 0x02
    4392:	9b 81       	ldd	r25, Y+3	; 0x03
    4394:	fc 01       	movw	r30, r24
    4396:	e2 0f       	add	r30, r18
    4398:	f3 1f       	adc	r31, r19
    439a:	80 81       	ld	r24, Z
    439c:	83 32       	cpi	r24, 0x23	; 35
    439e:	31 f7       	brne	.-52     	; 0x436c <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    43a0:	89 81       	ldd	r24, Y+1	; 0x01
    43a2:	28 2f       	mov	r18, r24
    43a4:	30 e0       	ldi	r19, 0x00	; 0
    43a6:	8a 81       	ldd	r24, Y+2	; 0x02
    43a8:	9b 81       	ldd	r25, Y+3	; 0x03
    43aa:	fc 01       	movw	r30, r24
    43ac:	e2 0f       	add	r30, r18
    43ae:	f3 1f       	adc	r31, r19
    43b0:	10 82       	st	Z, r1
}
    43b2:	0f 90       	pop	r0
    43b4:	0f 90       	pop	r0
    43b6:	0f 90       	pop	r0
    43b8:	cf 91       	pop	r28
    43ba:	df 91       	pop	r29
    43bc:	1f 91       	pop	r17
    43be:	0f 91       	pop	r16
    43c0:	08 95       	ret

000043c2 <__prologue_saves__>:
    43c2:	2f 92       	push	r2
    43c4:	3f 92       	push	r3
    43c6:	4f 92       	push	r4
    43c8:	5f 92       	push	r5
    43ca:	6f 92       	push	r6
    43cc:	7f 92       	push	r7
    43ce:	8f 92       	push	r8
    43d0:	9f 92       	push	r9
    43d2:	af 92       	push	r10
    43d4:	bf 92       	push	r11
    43d6:	cf 92       	push	r12
    43d8:	df 92       	push	r13
    43da:	ef 92       	push	r14
    43dc:	ff 92       	push	r15
    43de:	0f 93       	push	r16
    43e0:	1f 93       	push	r17
    43e2:	cf 93       	push	r28
    43e4:	df 93       	push	r29
    43e6:	cd b7       	in	r28, 0x3d	; 61
    43e8:	de b7       	in	r29, 0x3e	; 62
    43ea:	ca 1b       	sub	r28, r26
    43ec:	db 0b       	sbc	r29, r27
    43ee:	0f b6       	in	r0, 0x3f	; 63
    43f0:	f8 94       	cli
    43f2:	de bf       	out	0x3e, r29	; 62
    43f4:	0f be       	out	0x3f, r0	; 63
    43f6:	cd bf       	out	0x3d, r28	; 61
    43f8:	09 94       	ijmp

000043fa <__epilogue_restores__>:
    43fa:	2a 88       	ldd	r2, Y+18	; 0x12
    43fc:	39 88       	ldd	r3, Y+17	; 0x11
    43fe:	48 88       	ldd	r4, Y+16	; 0x10
    4400:	5f 84       	ldd	r5, Y+15	; 0x0f
    4402:	6e 84       	ldd	r6, Y+14	; 0x0e
    4404:	7d 84       	ldd	r7, Y+13	; 0x0d
    4406:	8c 84       	ldd	r8, Y+12	; 0x0c
    4408:	9b 84       	ldd	r9, Y+11	; 0x0b
    440a:	aa 84       	ldd	r10, Y+10	; 0x0a
    440c:	b9 84       	ldd	r11, Y+9	; 0x09
    440e:	c8 84       	ldd	r12, Y+8	; 0x08
    4410:	df 80       	ldd	r13, Y+7	; 0x07
    4412:	ee 80       	ldd	r14, Y+6	; 0x06
    4414:	fd 80       	ldd	r15, Y+5	; 0x05
    4416:	0c 81       	ldd	r16, Y+4	; 0x04
    4418:	1b 81       	ldd	r17, Y+3	; 0x03
    441a:	aa 81       	ldd	r26, Y+2	; 0x02
    441c:	b9 81       	ldd	r27, Y+1	; 0x01
    441e:	ce 0f       	add	r28, r30
    4420:	d1 1d       	adc	r29, r1
    4422:	0f b6       	in	r0, 0x3f	; 63
    4424:	f8 94       	cli
    4426:	de bf       	out	0x3e, r29	; 62
    4428:	0f be       	out	0x3f, r0	; 63
    442a:	cd bf       	out	0x3d, r28	; 61
    442c:	ed 01       	movw	r28, r26
    442e:	08 95       	ret

00004430 <itoa>:
    4430:	fb 01       	movw	r30, r22
    4432:	9f 01       	movw	r18, r30
    4434:	e8 94       	clt
    4436:	42 30       	cpi	r20, 0x02	; 2
    4438:	c4 f0       	brlt	.+48     	; 0x446a <itoa+0x3a>
    443a:	45 32       	cpi	r20, 0x25	; 37
    443c:	b4 f4       	brge	.+44     	; 0x446a <itoa+0x3a>
    443e:	4a 30       	cpi	r20, 0x0A	; 10
    4440:	29 f4       	brne	.+10     	; 0x444c <itoa+0x1c>
    4442:	97 fb       	bst	r25, 7
    4444:	1e f4       	brtc	.+6      	; 0x444c <itoa+0x1c>
    4446:	90 95       	com	r25
    4448:	81 95       	neg	r24
    444a:	9f 4f       	sbci	r25, 0xFF	; 255
    444c:	64 2f       	mov	r22, r20
    444e:	77 27       	eor	r23, r23
    4450:	0e 94 49 22 	call	0x4492	; 0x4492 <__udivmodhi4>
    4454:	80 5d       	subi	r24, 0xD0	; 208
    4456:	8a 33       	cpi	r24, 0x3A	; 58
    4458:	0c f0       	brlt	.+2      	; 0x445c <itoa+0x2c>
    445a:	89 5d       	subi	r24, 0xD9	; 217
    445c:	81 93       	st	Z+, r24
    445e:	cb 01       	movw	r24, r22
    4460:	00 97       	sbiw	r24, 0x00	; 0
    4462:	a1 f7       	brne	.-24     	; 0x444c <itoa+0x1c>
    4464:	16 f4       	brtc	.+4      	; 0x446a <itoa+0x3a>
    4466:	5d e2       	ldi	r21, 0x2D	; 45
    4468:	51 93       	st	Z+, r21
    446a:	10 82       	st	Z, r1
    446c:	c9 01       	movw	r24, r18
    446e:	0c 94 39 22 	jmp	0x4472	; 0x4472 <strrev>

00004472 <strrev>:
    4472:	dc 01       	movw	r26, r24
    4474:	fc 01       	movw	r30, r24
    4476:	67 2f       	mov	r22, r23
    4478:	71 91       	ld	r23, Z+
    447a:	77 23       	and	r23, r23
    447c:	e1 f7       	brne	.-8      	; 0x4476 <strrev+0x4>
    447e:	32 97       	sbiw	r30, 0x02	; 2
    4480:	04 c0       	rjmp	.+8      	; 0x448a <strrev+0x18>
    4482:	7c 91       	ld	r23, X
    4484:	6d 93       	st	X+, r22
    4486:	70 83       	st	Z, r23
    4488:	62 91       	ld	r22, -Z
    448a:	ae 17       	cp	r26, r30
    448c:	bf 07       	cpc	r27, r31
    448e:	c8 f3       	brcs	.-14     	; 0x4482 <strrev+0x10>
    4490:	08 95       	ret

00004492 <__udivmodhi4>:
    4492:	aa 1b       	sub	r26, r26
    4494:	bb 1b       	sub	r27, r27
    4496:	51 e1       	ldi	r21, 0x11	; 17
    4498:	07 c0       	rjmp	.+14     	; 0x44a8 <__udivmodhi4_ep>

0000449a <__udivmodhi4_loop>:
    449a:	aa 1f       	adc	r26, r26
    449c:	bb 1f       	adc	r27, r27
    449e:	a6 17       	cp	r26, r22
    44a0:	b7 07       	cpc	r27, r23
    44a2:	10 f0       	brcs	.+4      	; 0x44a8 <__udivmodhi4_ep>
    44a4:	a6 1b       	sub	r26, r22
    44a6:	b7 0b       	sbc	r27, r23

000044a8 <__udivmodhi4_ep>:
    44a8:	88 1f       	adc	r24, r24
    44aa:	99 1f       	adc	r25, r25
    44ac:	5a 95       	dec	r21
    44ae:	a9 f7       	brne	.-22     	; 0x449a <__udivmodhi4_loop>
    44b0:	80 95       	com	r24
    44b2:	90 95       	com	r25
    44b4:	bc 01       	movw	r22, r24
    44b6:	cd 01       	movw	r24, r26
    44b8:	08 95       	ret

000044ba <_exit>:
    44ba:	f8 94       	cli

000044bc <__stop_program>:
    44bc:	ff cf       	rjmp	.-2      	; 0x44bc <__stop_program>
